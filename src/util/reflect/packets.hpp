// Generated by reflect_map tool
#pragma once
#include <string>
namespace copper_server::reflect{
template<>struct enum_data<copper_server::api::packets::chat_type::decoration::param_e> {using item = std::pair<std::string_view, copper_server::api::packets::chat_type::decoration::param_e>;
static constexpr inline std::array<item, 3> values = {item{"sender", copper_server::api::packets::chat_type::decoration::param_e::sender}, item{"target", copper_server::api::packets::chat_type::decoration::param_e::target}, item{"content", copper_server::api::packets::chat_type::decoration::param_e::content}};};
template<>consteval std::string_view type_name<copper_server::api::packets::chat_type::decoration::param_e>() { return "copper_server::api::packets::chat_type::decoration::param_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::chat_type::decoration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.translation_key);
  fn(obj.parameters);
  fn(obj.style);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::chat_type::decoration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.translation_key);
  fn(obj.parameters);
  fn(obj.style);
}
template<>struct for_each_type_s<copper_server::api::packets::chat_type::decoration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type::decoration>().translation_key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type::decoration>().parameters)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type::decoration>().style)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::chat_type::decoration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type::decoration>().translation_key)>("translation_key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type::decoration>().parameters)>("parameters");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type::decoration>().style)>("style");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::chat_type::decoration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.translation_key, "translation_key");
  fn(obj.parameters, "parameters");
  fn(obj.style, "style");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::chat_type::decoration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.translation_key, "translation_key");
  fn(obj.parameters, "parameters");
  fn(obj.style, "style");
}
template<>consteval std::string_view type_name<copper_server::api::packets::chat_type::decoration>() { return "copper_server::api::packets::chat_type::decoration"; }
template<>consteval size_t fields_count<copper_server::api::packets::chat_type::decoration>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::chat_type& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chat);
  fn(obj.narration);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::chat_type& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chat);
  fn(obj.narration);
}
template<>struct for_each_type_s<copper_server::api::packets::chat_type> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type>().chat)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type>().narration)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::chat_type> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type>().chat)>("chat");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::chat_type>().narration)>("narration");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::chat_type& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chat, "chat");
  fn(obj.narration, "narration");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::chat_type& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chat, "chat");
  fn(obj.narration, "narration");
}
template<>consteval std::string_view type_name<copper_server::api::packets::chat_type>() { return "copper_server::api::packets::chat_type"; }
template<>consteval size_t fields_count<copper_server::api::packets::chat_type>() { return 2; }
template<>struct enum_data<copper_server::api::packets::gamemode_e> {using item = std::pair<std::string_view, copper_server::api::packets::gamemode_e>;
static constexpr inline std::array<item, 4> values = {item{"survival", copper_server::api::packets::gamemode_e::survival}, item{"creative", copper_server::api::packets::gamemode_e::creative}, item{"adventure", copper_server::api::packets::gamemode_e::adventure}, item{"spectator", copper_server::api::packets::gamemode_e::spectator}};};
template<>consteval std::string_view type_name<copper_server::api::packets::gamemode_e>() { return "copper_server::api::packets::gamemode_e"; }
template<>struct enum_data<copper_server::api::packets::optional_gamemode_e> {using item = std::pair<std::string_view, copper_server::api::packets::optional_gamemode_e>;
static constexpr inline std::array<item, 5> values = {item{"undefined", copper_server::api::packets::optional_gamemode_e::undefined}, item{"survival", copper_server::api::packets::optional_gamemode_e::survival}, item{"creative", copper_server::api::packets::optional_gamemode_e::creative}, item{"adventure", copper_server::api::packets::optional_gamemode_e::adventure}, item{"spectator", copper_server::api::packets::optional_gamemode_e::spectator}};};
template<>consteval std::string_view type_name<copper_server::api::packets::optional_gamemode_e>() { return "copper_server::api::packets::optional_gamemode_e"; }
template<>struct enum_data<copper_server::api::packets::difficulty_e> {using item = std::pair<std::string_view, copper_server::api::packets::difficulty_e>;
static constexpr inline std::array<item, 4> values = {item{"peaceful", copper_server::api::packets::difficulty_e::peaceful}, item{"easy", copper_server::api::packets::difficulty_e::easy}, item{"normal", copper_server::api::packets::difficulty_e::normal}, item{"hard", copper_server::api::packets::difficulty_e::hard}};};
template<>consteval std::string_view type_name<copper_server::api::packets::difficulty_e>() { return "copper_server::api::packets::difficulty_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.count);
  fn(obj.id);
  fn(obj.components_to_add);
  fn(obj.components_to_remove);
  fn(obj.to_add);
  fn(obj.to_remove);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.count);
  fn(obj.id);
  fn(obj.components_to_add);
  fn(obj.components_to_remove);
  fn(obj.to_add);
  fn(obj.to_remove);
}
template<>struct for_each_type_s<copper_server::api::packets::slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().count)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().components_to_add)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().components_to_remove)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().to_add)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().to_remove)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().count)>("count");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().id)>("id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().components_to_add)>("components_to_add");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().components_to_remove)>("components_to_remove");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().to_add)>("to_add");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot>().to_remove)>("to_remove");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.count, "count");
  fn(obj.id, "id");
  fn(obj.components_to_add, "components_to_add");
  fn(obj.components_to_remove, "components_to_remove");
  fn(obj.to_add, "to_add");
  fn(obj.to_remove, "to_remove");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.count, "count");
  fn(obj.id, "id");
  fn(obj.components_to_add, "components_to_add");
  fn(obj.components_to_remove, "components_to_remove");
  fn(obj.to_add, "to_add");
  fn(obj.to_remove, "to_remove");
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot>() { return "copper_server::api::packets::slot"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot>() { return 6; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot_display::empty& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot_display::empty& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::slot_display::empty> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot_display::empty> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot_display::empty& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot_display::empty& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot_display::empty>() { return "copper_server::api::packets::slot_display::empty"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot_display::empty>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot_display::any_fuel& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot_display::any_fuel& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::slot_display::any_fuel> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot_display::any_fuel> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot_display::any_fuel& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot_display::any_fuel& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot_display::any_fuel>() { return "copper_server::api::packets::slot_display::any_fuel"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot_display::any_fuel>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot_display::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot_display::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
}
template<>struct for_each_type_s<copper_server::api::packets::slot_display::item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::item>().type)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot_display::item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::item>().type)>("type");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot_display::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot_display::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot_display::item>() { return "copper_server::api::packets::slot_display::item"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot_display::item>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot_display::item_stack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_stack);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot_display::item_stack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_stack);
}
template<>struct for_each_type_s<copper_server::api::packets::slot_display::item_stack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::item_stack>().item_stack)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot_display::item_stack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::item_stack>().item_stack)>("item_stack");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot_display::item_stack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_stack, "item_stack");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot_display::item_stack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_stack, "item_stack");
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot_display::item_stack>() { return "copper_server::api::packets::slot_display::item_stack"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot_display::item_stack>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot_display::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot_display::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag);
}
template<>struct for_each_type_s<copper_server::api::packets::slot_display::tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::tag>().tag)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot_display::tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::tag>().tag)>("tag");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot_display::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag, "tag");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot_display::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag, "tag");
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot_display::tag>() { return "copper_server::api::packets::slot_display::tag"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot_display::tag>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot_display::smithing_trim& obj, [[maybe_unused]] FN&& fn){
  fn(obj.base);
  fn(obj.material);
  fn(obj.pattern);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot_display::smithing_trim& obj, [[maybe_unused]] FN&& fn){
  fn(obj.base);
  fn(obj.material);
  fn(obj.pattern);
}
template<>struct for_each_type_s<copper_server::api::packets::slot_display::smithing_trim> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::smithing_trim>().base)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::smithing_trim>().material)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::smithing_trim>().pattern)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot_display::smithing_trim> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::smithing_trim>().base)>("base");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::smithing_trim>().material)>("material");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::smithing_trim>().pattern)>("pattern");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot_display::smithing_trim& obj, [[maybe_unused]] FN&& fn){
  fn(obj.base, "base");
  fn(obj.material, "material");
  fn(obj.pattern, "pattern");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot_display::smithing_trim& obj, [[maybe_unused]] FN&& fn){
  fn(obj.base, "base");
  fn(obj.material, "material");
  fn(obj.pattern, "pattern");
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot_display::smithing_trim>() { return "copper_server::api::packets::slot_display::smithing_trim"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot_display::smithing_trim>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot_display::with_remainder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient);
  fn(obj.remainder);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot_display::with_remainder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient);
  fn(obj.remainder);
}
template<>struct for_each_type_s<copper_server::api::packets::slot_display::with_remainder> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::with_remainder>().ingredient)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::with_remainder>().remainder)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot_display::with_remainder> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::with_remainder>().ingredient)>("ingredient");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::with_remainder>().remainder)>("remainder");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot_display::with_remainder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient, "ingredient");
  fn(obj.remainder, "remainder");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot_display::with_remainder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient, "ingredient");
  fn(obj.remainder, "remainder");
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot_display::with_remainder>() { return "copper_server::api::packets::slot_display::with_remainder"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot_display::with_remainder>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot_display::composite& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot_display::composite& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient);
}
template<>struct for_each_type_s<copper_server::api::packets::slot_display::composite> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::composite>().ingredient)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot_display::composite> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display::composite>().ingredient)>("ingredient");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot_display::composite& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient, "ingredient");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot_display::composite& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient, "ingredient");
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot_display::composite>() { return "copper_server::api::packets::slot_display::composite"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot_display::composite>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::slot_display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::slot_display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display);
}
template<>struct for_each_type_s<copper_server::api::packets::slot_display> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display>().display)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::slot_display> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::slot_display>().display)>("display");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::slot_display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display, "display");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::slot_display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display, "display");
}
template<>consteval std::string_view type_name<copper_server::api::packets::slot_display>() { return "copper_server::api::packets::slot_display"; }
template<>consteval size_t fields_count<copper_server::api::packets::slot_display>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::recipe_display::crafting_shapeless& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredients);
  fn(obj.result);
  fn(obj.crafting_station);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::recipe_display::crafting_shapeless& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredients);
  fn(obj.result);
  fn(obj.crafting_station);
}
template<>struct for_each_type_s<copper_server::api::packets::recipe_display::crafting_shapeless> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shapeless>().ingredients)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shapeless>().result)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shapeless>().crafting_station)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::recipe_display::crafting_shapeless> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shapeless>().ingredients)>("ingredients");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shapeless>().result)>("result");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shapeless>().crafting_station)>("crafting_station");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::recipe_display::crafting_shapeless& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredients, "ingredients");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::recipe_display::crafting_shapeless& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredients, "ingredients");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
}
template<>consteval std::string_view type_name<copper_server::api::packets::recipe_display::crafting_shapeless>() { return "copper_server::api::packets::recipe_display::crafting_shapeless"; }
template<>consteval size_t fields_count<copper_server::api::packets::recipe_display::crafting_shapeless>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::recipe_display::crafting_shaped& obj, [[maybe_unused]] FN&& fn){
  fn(obj.width);
  fn(obj.height);
  fn(obj.ingredients);
  fn(obj.result);
  fn(obj.crafting_station);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::recipe_display::crafting_shaped& obj, [[maybe_unused]] FN&& fn){
  fn(obj.width);
  fn(obj.height);
  fn(obj.ingredients);
  fn(obj.result);
  fn(obj.crafting_station);
}
template<>struct for_each_type_s<copper_server::api::packets::recipe_display::crafting_shaped> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().width)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().height)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().ingredients)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().result)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().crafting_station)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::recipe_display::crafting_shaped> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().width)>("width");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().height)>("height");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().ingredients)>("ingredients");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().result)>("result");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::crafting_shaped>().crafting_station)>("crafting_station");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::recipe_display::crafting_shaped& obj, [[maybe_unused]] FN&& fn){
  fn(obj.width, "width");
  fn(obj.height, "height");
  fn(obj.ingredients, "ingredients");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::recipe_display::crafting_shaped& obj, [[maybe_unused]] FN&& fn){
  fn(obj.width, "width");
  fn(obj.height, "height");
  fn(obj.ingredients, "ingredients");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
}
template<>consteval std::string_view type_name<copper_server::api::packets::recipe_display::crafting_shaped>() { return "copper_server::api::packets::recipe_display::crafting_shaped"; }
template<>consteval size_t fields_count<copper_server::api::packets::recipe_display::crafting_shaped>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::recipe_display::furnace& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient);
  fn(obj.fuel);
  fn(obj.result);
  fn(obj.crafting_station);
  fn(obj.cooking_time);
  fn(obj.experience);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::recipe_display::furnace& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient);
  fn(obj.fuel);
  fn(obj.result);
  fn(obj.crafting_station);
  fn(obj.cooking_time);
  fn(obj.experience);
}
template<>struct for_each_type_s<copper_server::api::packets::recipe_display::furnace> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().ingredient)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().fuel)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().result)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().crafting_station)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().cooking_time)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().experience)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::recipe_display::furnace> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().ingredient)>("ingredient");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().fuel)>("fuel");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().result)>("result");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().crafting_station)>("crafting_station");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().cooking_time)>("cooking_time");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::furnace>().experience)>("experience");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::recipe_display::furnace& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient, "ingredient");
  fn(obj.fuel, "fuel");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
  fn(obj.cooking_time, "cooking_time");
  fn(obj.experience, "experience");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::recipe_display::furnace& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient, "ingredient");
  fn(obj.fuel, "fuel");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
  fn(obj.cooking_time, "cooking_time");
  fn(obj.experience, "experience");
}
template<>consteval std::string_view type_name<copper_server::api::packets::recipe_display::furnace>() { return "copper_server::api::packets::recipe_display::furnace"; }
template<>consteval size_t fields_count<copper_server::api::packets::recipe_display::furnace>() { return 6; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::recipe_display::stonecutter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient);
  fn(obj.result);
  fn(obj.crafting_station);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::recipe_display::stonecutter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient);
  fn(obj.result);
  fn(obj.crafting_station);
}
template<>struct for_each_type_s<copper_server::api::packets::recipe_display::stonecutter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::stonecutter>().ingredient)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::stonecutter>().result)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::stonecutter>().crafting_station)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::recipe_display::stonecutter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::stonecutter>().ingredient)>("ingredient");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::stonecutter>().result)>("result");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::stonecutter>().crafting_station)>("crafting_station");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::recipe_display::stonecutter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient, "ingredient");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::recipe_display::stonecutter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredient, "ingredient");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
}
template<>consteval std::string_view type_name<copper_server::api::packets::recipe_display::stonecutter>() { return "copper_server::api::packets::recipe_display::stonecutter"; }
template<>consteval size_t fields_count<copper_server::api::packets::recipe_display::stonecutter>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::recipe_display::smithing& obj, [[maybe_unused]] FN&& fn){
  fn(obj.template_);
  fn(obj.base);
  fn(obj.addition);
  fn(obj.result);
  fn(obj.crafting_station);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::recipe_display::smithing& obj, [[maybe_unused]] FN&& fn){
  fn(obj.template_);
  fn(obj.base);
  fn(obj.addition);
  fn(obj.result);
  fn(obj.crafting_station);
}
template<>struct for_each_type_s<copper_server::api::packets::recipe_display::smithing> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().template_)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().base)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().addition)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().result)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().crafting_station)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::recipe_display::smithing> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().template_)>("template_");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().base)>("base");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().addition)>("addition");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().result)>("result");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display::smithing>().crafting_station)>("crafting_station");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::recipe_display::smithing& obj, [[maybe_unused]] FN&& fn){
  fn(obj.template_, "template_");
  fn(obj.base, "base");
  fn(obj.addition, "addition");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::recipe_display::smithing& obj, [[maybe_unused]] FN&& fn){
  fn(obj.template_, "template_");
  fn(obj.base, "base");
  fn(obj.addition, "addition");
  fn(obj.result, "result");
  fn(obj.crafting_station, "crafting_station");
}
template<>consteval std::string_view type_name<copper_server::api::packets::recipe_display::smithing>() { return "copper_server::api::packets::recipe_display::smithing"; }
template<>consteval size_t fields_count<copper_server::api::packets::recipe_display::smithing>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::recipe_display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::recipe_display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display);
}
template<>struct for_each_type_s<copper_server::api::packets::recipe_display> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display>().display)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::recipe_display> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::recipe_display>().display)>("display");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::recipe_display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display, "display");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::recipe_display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display, "display");
}
template<>consteval std::string_view type_name<copper_server::api::packets::recipe_display>() { return "copper_server::api::packets::recipe_display"; }
template<>consteval size_t fields_count<copper_server::api::packets::recipe_display>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::block>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::block>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::block>() { return "copper_server::api::packets::particle_data::block"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::block>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::block_marker& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::block_marker& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::block_marker> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::block_marker>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::block_marker> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::block_marker>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::block_marker& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::block_marker& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::block_marker>() { return "copper_server::api::packets::particle_data::block_marker"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::block_marker>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb);
  fn(obj.scale);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb);
  fn(obj.scale);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::dust> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust>().rgb)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust>().scale)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::dust> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust>().rgb)>("rgb");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust>().scale)>("scale");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb, "rgb");
  fn(obj.scale, "scale");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb, "rgb");
  fn(obj.scale, "scale");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::dust>() { return "copper_server::api::packets::particle_data::dust"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::dust>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::dust_color_transition& obj, [[maybe_unused]] FN&& fn){
  fn(obj.from_rgb);
  fn(obj.to_rgb);
  fn(obj.scale);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::dust_color_transition& obj, [[maybe_unused]] FN&& fn){
  fn(obj.from_rgb);
  fn(obj.to_rgb);
  fn(obj.scale);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::dust_color_transition> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust_color_transition>().from_rgb)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust_color_transition>().to_rgb)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust_color_transition>().scale)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::dust_color_transition> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust_color_transition>().from_rgb)>("from_rgb");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust_color_transition>().to_rgb)>("to_rgb");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust_color_transition>().scale)>("scale");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::dust_color_transition& obj, [[maybe_unused]] FN&& fn){
  fn(obj.from_rgb, "from_rgb");
  fn(obj.to_rgb, "to_rgb");
  fn(obj.scale, "scale");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::dust_color_transition& obj, [[maybe_unused]] FN&& fn){
  fn(obj.from_rgb, "from_rgb");
  fn(obj.to_rgb, "to_rgb");
  fn(obj.scale, "scale");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::dust_color_transition>() { return "copper_server::api::packets::particle_data::dust_color_transition"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::dust_color_transition>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::entity_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.argb);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::entity_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.argb);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::entity_effect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::entity_effect>().argb)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::entity_effect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::entity_effect>().argb)>("argb");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::entity_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.argb, "argb");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::entity_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.argb, "argb");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::entity_effect>() { return "copper_server::api::packets::particle_data::entity_effect"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::entity_effect>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::falling_dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::falling_dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::falling_dust> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::falling_dust>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::falling_dust> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::falling_dust>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::falling_dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::falling_dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::falling_dust>() { return "copper_server::api::packets::particle_data::falling_dust"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::falling_dust>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::tinted_leaves& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::tinted_leaves& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::tinted_leaves> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::tinted_leaves>().rgb)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::tinted_leaves> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::tinted_leaves>().rgb)>("rgb");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::tinted_leaves& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb, "rgb");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::tinted_leaves& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb, "rgb");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::tinted_leaves>() { return "copper_server::api::packets::particle_data::tinted_leaves"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::tinted_leaves>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::sculk_charge& obj, [[maybe_unused]] FN&& fn){
  fn(obj.roll);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::sculk_charge& obj, [[maybe_unused]] FN&& fn){
  fn(obj.roll);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::sculk_charge> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::sculk_charge>().roll)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::sculk_charge> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::sculk_charge>().roll)>("roll");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::sculk_charge& obj, [[maybe_unused]] FN&& fn){
  fn(obj.roll, "roll");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::sculk_charge& obj, [[maybe_unused]] FN&& fn){
  fn(obj.roll, "roll");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::sculk_charge>() { return "copper_server::api::packets::particle_data::sculk_charge"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::sculk_charge>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::item>().item)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::item>().item)>("item");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item, "item");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item, "item");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::item>() { return "copper_server::api::packets::particle_data::item"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::item>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::vibration::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_pos);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::vibration::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_pos);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::vibration::block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration::block>().block_pos)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::vibration::block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration::block>().block_pos)>("block_pos");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::vibration::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_pos, "block_pos");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::vibration::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_pos, "block_pos");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::vibration::block>() { return "copper_server::api::packets::particle_data::vibration::block"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::vibration::block>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::vibration::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.eye_height);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::vibration::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.eye_height);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::vibration::entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration::entity>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration::entity>().eye_height)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::vibration::entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration::entity>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration::entity>().eye_height)>("eye_height");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::vibration::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.eye_height, "eye_height");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::vibration::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.eye_height, "eye_height");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::vibration::entity>() { return "copper_server::api::packets::particle_data::vibration::entity"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::vibration::entity>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::vibration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.data);
  fn(obj.travel_ticks);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::vibration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.data);
  fn(obj.travel_ticks);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::vibration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration>().data)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration>().travel_ticks)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::vibration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration>().data)>("data");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::vibration>().travel_ticks)>("travel_ticks");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::vibration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.data, "data");
  fn(obj.travel_ticks, "travel_ticks");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::vibration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.data, "data");
  fn(obj.travel_ticks, "travel_ticks");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::vibration>() { return "copper_server::api::packets::particle_data::vibration"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::vibration>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::trail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.rgb);
  fn(obj.duration);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::trail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.rgb);
  fn(obj.duration);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::trail> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().rgb)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().duration)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::trail> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().rgb)>("rgb");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::trail>().duration)>("duration");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::trail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.rgb, "rgb");
  fn(obj.duration, "duration");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::trail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.rgb, "rgb");
  fn(obj.duration, "duration");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::trail>() { return "copper_server::api::packets::particle_data::trail"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::trail>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::shriek& obj, [[maybe_unused]] FN&& fn){
  fn(obj.delay);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::shriek& obj, [[maybe_unused]] FN&& fn){
  fn(obj.delay);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::shriek> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::shriek>().delay)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::shriek> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::shriek>().delay)>("delay");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::shriek& obj, [[maybe_unused]] FN&& fn){
  fn(obj.delay, "delay");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::shriek& obj, [[maybe_unused]] FN&& fn){
  fn(obj.delay, "delay");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::shriek>() { return "copper_server::api::packets::particle_data::shriek"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::shriek>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::dust_pillar& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::dust_pillar& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::dust_pillar> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust_pillar>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::dust_pillar> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::dust_pillar>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::dust_pillar& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::dust_pillar& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::dust_pillar>() { return "copper_server::api::packets::particle_data::dust_pillar"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::dust_pillar>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data::block_crumble& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data::block_crumble& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data::block_crumble> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::block_crumble>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data::block_crumble> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data::block_crumble>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data::block_crumble& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data::block_crumble& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data::block_crumble>() { return "copper_server::api::packets::particle_data::block_crumble"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data::block_crumble>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::particle_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.data);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::particle_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.data);
}
template<>struct for_each_type_s<copper_server::api::packets::particle_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data>().data)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::particle_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::particle_data>().data)>("data");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::particle_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.data, "data");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::particle_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.data, "data");
}
template<>consteval std::string_view type_name<copper_server::api::packets::particle_data>() { return "copper_server::api::packets::particle_data"; }
template<>consteval size_t fields_count<copper_server::api::packets::particle_data>() { return 1; }
template<>struct enum_data<copper_server::api::packets::teleport_flags::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::teleport_flags::flags_f>;
static constexpr inline std::array<item, 9> values = {item{"x_relative", copper_server::api::packets::teleport_flags::flags_f::x_relative}, item{"y_relative", copper_server::api::packets::teleport_flags::flags_f::y_relative}, item{"z_relative", copper_server::api::packets::teleport_flags::flags_f::z_relative}, item{"yaw_relative", copper_server::api::packets::teleport_flags::flags_f::yaw_relative}, item{"pitch_relative", copper_server::api::packets::teleport_flags::flags_f::pitch_relative}, item{"velocity_x_relative", copper_server::api::packets::teleport_flags::flags_f::velocity_x_relative}, item{"velocity_y_relative", copper_server::api::packets::teleport_flags::flags_f::velocity_y_relative}, item{"velocity_z_relative", copper_server::api::packets::teleport_flags::flags_f::velocity_z_relative}, item{"adjust_velocity_to_rotation", copper_server::api::packets::teleport_flags::flags_f::adjust_velocity_to_rotation}};};
template<>consteval std::string_view type_name<copper_server::api::packets::teleport_flags::flags_f>() { return "copper_server::api::packets::teleport_flags::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::teleport_flags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::teleport_flags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::teleport_flags> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::teleport_flags>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::teleport_flags> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::teleport_flags>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::teleport_flags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::teleport_flags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::teleport_flags>() { return "copper_server::api::packets::teleport_flags"; }
template<>consteval size_t fields_count<copper_server::api::packets::teleport_flags>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::status::status_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.json_response);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::status::status_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.json_response);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::status::status_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::status::status_response>().json_response)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::status::status_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::status::status_response>().json_response)>("json_response");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::status::status_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.json_response, "json_response");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::status::status_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.json_response, "json_response");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::status::status_response>() { return "copper_server::api::packets::client_bound::status::status_response"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::status::status_response>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::status::pong_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.timestamp);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::status::pong_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.timestamp);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::status::pong_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::status::pong_response>().timestamp)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::status::pong_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::status::pong_response>().timestamp)>("timestamp");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::status::pong_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.timestamp, "timestamp");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::status::pong_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.timestamp, "timestamp");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::status::pong_response>() { return "copper_server::api::packets::client_bound::status::pong_response"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::status::pong_response>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::login::login_disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::login::login_disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::login::login_disconnect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_disconnect>().reason)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::login::login_disconnect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_disconnect>().reason)>("reason");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::login::login_disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason, "reason");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::login::login_disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason, "reason");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::login::login_disconnect>() { return "copper_server::api::packets::client_bound::login::login_disconnect"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::login::login_disconnect>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::login::hello& obj, [[maybe_unused]] FN&& fn){
  fn(obj.server_id);
  fn(obj.public_key);
  fn(obj.verify_token);
  fn(obj.should_authenticate);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::login::hello& obj, [[maybe_unused]] FN&& fn){
  fn(obj.server_id);
  fn(obj.public_key);
  fn(obj.verify_token);
  fn(obj.should_authenticate);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::login::hello> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::hello>().server_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::hello>().public_key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::hello>().verify_token)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::hello>().should_authenticate)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::login::hello> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::hello>().server_id)>("server_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::hello>().public_key)>("public_key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::hello>().verify_token)>("verify_token");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::hello>().should_authenticate)>("should_authenticate");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::login::hello& obj, [[maybe_unused]] FN&& fn){
  fn(obj.server_id, "server_id");
  fn(obj.public_key, "public_key");
  fn(obj.verify_token, "verify_token");
  fn(obj.should_authenticate, "should_authenticate");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::login::hello& obj, [[maybe_unused]] FN&& fn){
  fn(obj.server_id, "server_id");
  fn(obj.public_key, "public_key");
  fn(obj.verify_token, "verify_token");
  fn(obj.should_authenticate, "should_authenticate");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::login::hello>() { return "copper_server::api::packets::client_bound::login::hello"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::login::hello>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::login::login_finished::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.value);
  fn(obj.signature);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::login::login_finished::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.value);
  fn(obj.signature);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::login::login_finished::property> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished::property>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished::property>().value)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished::property>().signature)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::login::login_finished::property> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished::property>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished::property>().value)>("value");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished::property>().signature)>("signature");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::login::login_finished::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.value, "value");
  fn(obj.signature, "signature");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::login::login_finished::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.value, "value");
  fn(obj.signature, "signature");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::login::login_finished::property>() { return "copper_server::api::packets::client_bound::login::login_finished::property"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::login::login_finished::property>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::login::login_finished& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.user_name);
  fn(obj.properties);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::login::login_finished& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.user_name);
  fn(obj.properties);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::login::login_finished> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished>().uuid)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished>().user_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished>().properties)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::login::login_finished> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished>().uuid)>("uuid");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished>().user_name)>("user_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_finished>().properties)>("properties");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::login::login_finished& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.user_name, "user_name");
  fn(obj.properties, "properties");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::login::login_finished& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.user_name, "user_name");
  fn(obj.properties, "properties");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::login::login_finished>() { return "copper_server::api::packets::client_bound::login::login_finished"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::login::login_finished>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::login::login_compression& obj, [[maybe_unused]] FN&& fn){
  fn(obj.threshold);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::login::login_compression& obj, [[maybe_unused]] FN&& fn){
  fn(obj.threshold);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::login::login_compression> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_compression>().threshold)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::login::login_compression> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::login_compression>().threshold)>("threshold");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::login::login_compression& obj, [[maybe_unused]] FN&& fn){
  fn(obj.threshold, "threshold");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::login::login_compression& obj, [[maybe_unused]] FN&& fn){
  fn(obj.threshold, "threshold");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::login::login_compression>() { return "copper_server::api::packets::client_bound::login::login_compression"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::login::login_compression>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::login::custom_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.query_message_id);
  fn(obj.channel);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::login::custom_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.query_message_id);
  fn(obj.channel);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::login::custom_query> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::custom_query>().query_message_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::custom_query>().channel)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::custom_query>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::login::custom_query> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::custom_query>().query_message_id)>("query_message_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::custom_query>().channel)>("channel");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::custom_query>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::login::custom_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.query_message_id, "query_message_id");
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::login::custom_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.query_message_id, "query_message_id");
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::login::custom_query>() { return "copper_server::api::packets::client_bound::login::custom_query"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::login::custom_query>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::login::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::login::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::login::cookie_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::cookie_request>().key)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::login::cookie_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::login::cookie_request>().key)>("key");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::login::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::login::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::login::cookie_request>() { return "copper_server::api::packets::client_bound::login::cookie_request"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::login::cookie_request>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::cookie_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::cookie_request>().key)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::cookie_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::cookie_request>().key)>("key");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::cookie_request>() { return "copper_server::api::packets::client_bound::configuration::cookie_request"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::cookie_request>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::custom_payload> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_payload>().channel)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_payload>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::custom_payload> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_payload>().channel)>("channel");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_payload>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::custom_payload>() { return "copper_server::api::packets::client_bound::configuration::custom_payload"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::custom_payload>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::disconnect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::disconnect>().reason)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::disconnect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::disconnect>().reason)>("reason");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason, "reason");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason, "reason");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::disconnect>() { return "copper_server::api::packets::client_bound::configuration::disconnect"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::disconnect>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::finish_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::finish_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::finish_configuration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::finish_configuration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::finish_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::finish_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::finish_configuration>() { return "copper_server::api::packets::client_bound::configuration::finish_configuration"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::finish_configuration>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::keep_alive> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::keep_alive>().keep_alive_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::keep_alive> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::keep_alive>().keep_alive_id)>("keep_alive_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id, "keep_alive_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id, "keep_alive_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::keep_alive>() { return "copper_server::api::packets::client_bound::configuration::keep_alive"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::keep_alive>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ping_request_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ping_request_id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::ping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::ping>().ping_request_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::ping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::ping>().ping_request_id)>("ping_request_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ping_request_id, "ping_request_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ping_request_id, "ping_request_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::ping>() { return "copper_server::api::packets::client_bound::configuration::ping"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::ping>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::reset_chat& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::reset_chat& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::reset_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::reset_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::reset_chat& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::reset_chat& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::reset_chat>() { return "copper_server::api::packets::client_bound::configuration::reset_chat"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::reset_chat>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::registry_data::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entry_id);
  fn(obj.data);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::registry_data::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entry_id);
  fn(obj.data);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::registry_data::entry> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::registry_data::entry>().entry_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::registry_data::entry>().data)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::registry_data::entry> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::registry_data::entry>().entry_id)>("entry_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::registry_data::entry>().data)>("data");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::registry_data::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entry_id, "entry_id");
  fn(obj.data, "data");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::registry_data::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entry_id, "entry_id");
  fn(obj.data, "data");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::registry_data::entry>() { return "copper_server::api::packets::client_bound::configuration::registry_data::entry"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::registry_data::entry>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::registry_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id);
  fn(obj.entries);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::registry_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id);
  fn(obj.entries);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::registry_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::registry_data>().registry_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::registry_data>().entries)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::registry_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::registry_data>().registry_id)>("registry_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::registry_data>().entries)>("entries");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::registry_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id, "registry_id");
  fn(obj.entries, "entries");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::registry_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id, "registry_id");
  fn(obj.entries, "entries");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::registry_data>() { return "copper_server::api::packets::client_bound::configuration::registry_data"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::registry_data>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::resource_pack_pop& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::resource_pack_pop& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::resource_pack_pop> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_pop>().uuid)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::resource_pack_pop> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_pop>().uuid)>("uuid");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::resource_pack_pop& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::resource_pack_pop& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::resource_pack_pop>() { return "copper_server::api::packets::client_bound::configuration::resource_pack_pop"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::resource_pack_pop>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::resource_pack_push& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.url);
  fn(obj.hash);
  fn(obj.forced);
  fn(obj.prompt_message);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::resource_pack_push& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.url);
  fn(obj.hash);
  fn(obj.forced);
  fn(obj.prompt_message);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::resource_pack_push> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().uuid)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().url)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().hash)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().forced)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().prompt_message)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::resource_pack_push> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().uuid)>("uuid");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().url)>("url");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().hash)>("hash");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().forced)>("forced");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::resource_pack_push>().prompt_message)>("prompt_message");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::resource_pack_push& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.url, "url");
  fn(obj.hash, "hash");
  fn(obj.forced, "forced");
  fn(obj.prompt_message, "prompt_message");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::resource_pack_push& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.url, "url");
  fn(obj.hash, "hash");
  fn(obj.forced, "forced");
  fn(obj.prompt_message, "prompt_message");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::resource_pack_push>() { return "copper_server::api::packets::client_bound::configuration::resource_pack_push"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::resource_pack_push>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::store_cookie& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::store_cookie& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::store_cookie> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::store_cookie>().key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::store_cookie>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::store_cookie> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::store_cookie>().key)>("key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::store_cookie>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::store_cookie& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::store_cookie& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::store_cookie>() { return "copper_server::api::packets::client_bound::configuration::store_cookie"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::store_cookie>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::transfer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.host);
  fn(obj.port);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::transfer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.host);
  fn(obj.port);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::transfer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::transfer>().host)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::transfer>().port)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::transfer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::transfer>().host)>("host");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::transfer>().port)>("port");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::transfer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.host, "host");
  fn(obj.port, "port");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::transfer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.host, "host");
  fn(obj.port, "port");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::transfer>() { return "copper_server::api::packets::client_bound::configuration::transfer"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::transfer>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::update_enabled_features& obj, [[maybe_unused]] FN&& fn){
  fn(obj.features);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::update_enabled_features& obj, [[maybe_unused]] FN&& fn){
  fn(obj.features);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::update_enabled_features> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_enabled_features>().features)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::update_enabled_features> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_enabled_features>().features)>("features");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::update_enabled_features& obj, [[maybe_unused]] FN&& fn){
  fn(obj.features, "features");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::update_enabled_features& obj, [[maybe_unused]] FN&& fn){
  fn(obj.features, "features");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::update_enabled_features>() { return "copper_server::api::packets::client_bound::configuration::update_enabled_features"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::update_enabled_features>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::update_tags::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_name);
  fn(obj.values);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::update_tags::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_name);
  fn(obj.values);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::update_tags::tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags::tag>().tag_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags::tag>().values)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::update_tags::tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags::tag>().tag_name)>("tag_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags::tag>().values)>("values");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::update_tags::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_name, "tag_name");
  fn(obj.values, "values");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::update_tags::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_name, "tag_name");
  fn(obj.values, "values");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::update_tags::tag>() { return "copper_server::api::packets::client_bound::configuration::update_tags::tag"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::update_tags::tag>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::update_tags::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id);
  fn(obj.tags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::update_tags::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id);
  fn(obj.tags);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::update_tags::entry> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags::entry>().registry_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags::entry>().tags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::update_tags::entry> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags::entry>().registry_id)>("registry_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags::entry>().tags)>("tags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::update_tags::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id, "registry_id");
  fn(obj.tags, "tags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::update_tags::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id, "registry_id");
  fn(obj.tags, "tags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::update_tags::entry>() { return "copper_server::api::packets::client_bound::configuration::update_tags::entry"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::update_tags::entry>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::update_tags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::update_tags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::update_tags> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags>().entries)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::update_tags> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::update_tags>().entries)>("entries");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::update_tags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries, "entries");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::update_tags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries, "entries");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::update_tags>() { return "copper_server::api::packets::client_bound::configuration::update_tags"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::update_tags>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::select_known_packs::pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.pack_namespace);
  fn(obj.id);
  fn(obj.version);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::select_known_packs::pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.pack_namespace);
  fn(obj.id);
  fn(obj.version);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::select_known_packs::pack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::select_known_packs::pack>().pack_namespace)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::select_known_packs::pack>().id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::select_known_packs::pack>().version)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::select_known_packs::pack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::select_known_packs::pack>().pack_namespace)>("pack_namespace");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::select_known_packs::pack>().id)>("id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::select_known_packs::pack>().version)>("version");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::select_known_packs::pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.pack_namespace, "pack_namespace");
  fn(obj.id, "id");
  fn(obj.version, "version");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::select_known_packs::pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.pack_namespace, "pack_namespace");
  fn(obj.id, "id");
  fn(obj.version, "version");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::select_known_packs::pack>() { return "copper_server::api::packets::client_bound::configuration::select_known_packs::pack"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::select_known_packs::pack>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::select_known_packs& obj, [[maybe_unused]] FN&& fn){
  fn(obj.packs);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::select_known_packs& obj, [[maybe_unused]] FN&& fn){
  fn(obj.packs);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::select_known_packs> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::select_known_packs>().packs)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::select_known_packs> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::select_known_packs>().packs)>("packs");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::select_known_packs& obj, [[maybe_unused]] FN&& fn){
  fn(obj.packs, "packs");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::select_known_packs& obj, [[maybe_unused]] FN&& fn){
  fn(obj.packs, "packs");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::select_known_packs>() { return "copper_server::api::packets::client_bound::configuration::select_known_packs"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::select_known_packs>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::custom_report_details::detail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
  fn(obj.description);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::custom_report_details::detail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
  fn(obj.description);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::custom_report_details::detail> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_report_details::detail>().title)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_report_details::detail>().description)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::custom_report_details::detail> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_report_details::detail>().title)>("title");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_report_details::detail>().description)>("description");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::custom_report_details::detail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
  fn(obj.description, "description");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::custom_report_details::detail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
  fn(obj.description, "description");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::custom_report_details::detail>() { return "copper_server::api::packets::client_bound::configuration::custom_report_details::detail"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::custom_report_details::detail>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::custom_report_details& obj, [[maybe_unused]] FN&& fn){
  fn(obj.details);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::custom_report_details& obj, [[maybe_unused]] FN&& fn){
  fn(obj.details);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::custom_report_details> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_report_details>().details)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::custom_report_details> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::custom_report_details>().details)>("details");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::custom_report_details& obj, [[maybe_unused]] FN&& fn){
  fn(obj.details, "details");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::custom_report_details& obj, [[maybe_unused]] FN&& fn){
  fn(obj.details, "details");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::custom_report_details>() { return "copper_server::api::packets::client_bound::configuration::custom_report_details"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::custom_report_details>() { return 1; }
template<>struct enum_data<copper_server::api::packets::client_bound::configuration::server_links::link_type> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::configuration::server_links::link_type>;
static constexpr inline std::array<item, 10> values = {item{"bug_report", copper_server::api::packets::client_bound::configuration::server_links::link_type::bug_report}, item{"community_guidelines", copper_server::api::packets::client_bound::configuration::server_links::link_type::community_guidelines}, item{"support", copper_server::api::packets::client_bound::configuration::server_links::link_type::support}, item{"status", copper_server::api::packets::client_bound::configuration::server_links::link_type::status}, item{"feedback", copper_server::api::packets::client_bound::configuration::server_links::link_type::feedback}, item{"community", copper_server::api::packets::client_bound::configuration::server_links::link_type::community}, item{"website", copper_server::api::packets::client_bound::configuration::server_links::link_type::website}, item{"forums", copper_server::api::packets::client_bound::configuration::server_links::link_type::forums}, item{"news", copper_server::api::packets::client_bound::configuration::server_links::link_type::news}, item{"announcements", copper_server::api::packets::client_bound::configuration::server_links::link_type::announcements}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::server_links::link_type>() { return "copper_server::api::packets::client_bound::configuration::server_links::link_type"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::server_links::link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.label);
  fn(obj.url);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::server_links::link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.label);
  fn(obj.url);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::server_links::link> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::server_links::link>().label)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::server_links::link>().url)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::server_links::link> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::server_links::link>().label)>("label");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::server_links::link>().url)>("url");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::server_links::link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.label, "label");
  fn(obj.url, "url");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::server_links::link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.label, "label");
  fn(obj.url, "url");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::server_links::link>() { return "copper_server::api::packets::client_bound::configuration::server_links::link"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::server_links::link>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::server_links& obj, [[maybe_unused]] FN&& fn){
  fn(obj.links);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::server_links& obj, [[maybe_unused]] FN&& fn){
  fn(obj.links);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::server_links> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::server_links>().links)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::server_links> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::server_links>().links)>("links");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::server_links& obj, [[maybe_unused]] FN&& fn){
  fn(obj.links, "links");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::server_links& obj, [[maybe_unused]] FN&& fn){
  fn(obj.links, "links");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::server_links>() { return "copper_server::api::packets::client_bound::configuration::server_links"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::server_links>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::clear_dialog& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::clear_dialog& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::clear_dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::clear_dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::clear_dialog& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::clear_dialog& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::clear_dialog>() { return "copper_server::api::packets::client_bound::configuration::clear_dialog"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::clear_dialog>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::configuration::show_dialog& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dialog);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::show_dialog& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dialog);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::configuration::show_dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::show_dialog>().dialog)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::configuration::show_dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::configuration::show_dialog>().dialog)>("dialog");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::configuration::show_dialog& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dialog, "dialog");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::configuration::show_dialog& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dialog, "dialog");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::configuration::show_dialog>() { return "copper_server::api::packets::client_bound::configuration::show_dialog"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::configuration::show_dialog>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::bundle_delimiter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin);
  fn(obj.packets);
  fn(obj.end);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::bundle_delimiter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin);
  fn(obj.packets);
  fn(obj.end);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::bundle_delimiter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::bundle_delimiter>().begin)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::bundle_delimiter>().packets)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::bundle_delimiter>().end)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::bundle_delimiter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::bundle_delimiter>().begin)>("begin");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::bundle_delimiter>().packets)>("packets");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::bundle_delimiter>().end)>("end");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::bundle_delimiter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin, "begin");
  fn(obj.packets, "packets");
  fn(obj.end, "end");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::bundle_delimiter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin, "begin");
  fn(obj.packets, "packets");
  fn(obj.end, "end");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::bundle_delimiter>() { return "copper_server::api::packets::client_bound::play::bundle_delimiter"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::bundle_delimiter>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::add_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.uuid);
  fn(obj.type);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.pitch);
  fn(obj.yaw);
  fn(obj.head_yaw);
  fn(obj.data);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::add_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.uuid);
  fn(obj.type);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.pitch);
  fn(obj.yaw);
  fn(obj.head_yaw);
  fn(obj.data);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::add_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().uuid)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().head_yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().data)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().velocity_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().velocity_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().velocity_z)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::add_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().uuid)>("uuid");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().head_yaw)>("head_yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().data)>("data");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().velocity_x)>("velocity_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().velocity_y)>("velocity_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::add_entity>().velocity_z)>("velocity_z");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::add_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.uuid, "uuid");
  fn(obj.type, "type");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.pitch, "pitch");
  fn(obj.yaw, "yaw");
  fn(obj.head_yaw, "head_yaw");
  fn(obj.data, "data");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::add_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.uuid, "uuid");
  fn(obj.type, "type");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.pitch, "pitch");
  fn(obj.yaw, "yaw");
  fn(obj.head_yaw, "head_yaw");
  fn(obj.data, "data");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::add_entity>() { return "copper_server::api::packets::client_bound::play::add_entity"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::add_entity>() { return 13; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::animate::animation_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::animate::animation_e>;
static constexpr inline std::array<item, 6> values = {item{"swing_main_arm", copper_server::api::packets::client_bound::play::animate::animation_e::swing_main_arm}, item{"unrecognized", copper_server::api::packets::client_bound::play::animate::animation_e::unrecognized}, item{"leave_bed", copper_server::api::packets::client_bound::play::animate::animation_e::leave_bed}, item{"swing_offhand", copper_server::api::packets::client_bound::play::animate::animation_e::swing_offhand}, item{"critical_hit", copper_server::api::packets::client_bound::play::animate::animation_e::critical_hit}, item{"enchanted_hit", copper_server::api::packets::client_bound::play::animate::animation_e::enchanted_hit}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::animate::animation_e>() { return "copper_server::api::packets::client_bound::play::animate::animation_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::animate& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.animation);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::animate& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.animation);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::animate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::animate>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::animate>().animation)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::animate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::animate>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::animate>().animation)>("animation");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::animate& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.animation, "animation");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::animate& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.animation, "animation");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::animate>() { return "copper_server::api::packets::client_bound::play::animate"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::animate>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::award_stats::statistic& obj, [[maybe_unused]] FN&& fn){
  fn(obj.category_id);
  fn(obj.statistic_id);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::award_stats::statistic& obj, [[maybe_unused]] FN&& fn){
  fn(obj.category_id);
  fn(obj.statistic_id);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::award_stats::statistic> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::award_stats::statistic>().category_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::award_stats::statistic>().statistic_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::award_stats::statistic>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::award_stats::statistic> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::award_stats::statistic>().category_id)>("category_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::award_stats::statistic>().statistic_id)>("statistic_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::award_stats::statistic>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::award_stats::statistic& obj, [[maybe_unused]] FN&& fn){
  fn(obj.category_id, "category_id");
  fn(obj.statistic_id, "statistic_id");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::award_stats::statistic& obj, [[maybe_unused]] FN&& fn){
  fn(obj.category_id, "category_id");
  fn(obj.statistic_id, "statistic_id");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::award_stats::statistic>() { return "copper_server::api::packets::client_bound::play::award_stats::statistic"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::award_stats::statistic>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::award_stats& obj, [[maybe_unused]] FN&& fn){
  fn(obj.statistics);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::award_stats& obj, [[maybe_unused]] FN&& fn){
  fn(obj.statistics);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::award_stats> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::award_stats>().statistics)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::award_stats> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::award_stats>().statistics)>("statistics");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::award_stats& obj, [[maybe_unused]] FN&& fn){
  fn(obj.statistics, "statistics");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::award_stats& obj, [[maybe_unused]] FN&& fn){
  fn(obj.statistics, "statistics");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::award_stats>() { return "copper_server::api::packets::client_bound::play::award_stats"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::award_stats>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::block_changed_ack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_sequence_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_changed_ack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_sequence_id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::block_changed_ack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_changed_ack>().block_sequence_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::block_changed_ack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_changed_ack>().block_sequence_id)>("block_sequence_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::block_changed_ack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_sequence_id, "block_sequence_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_changed_ack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_sequence_id, "block_sequence_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::block_changed_ack>() { return "copper_server::api::packets::client_bound::play::block_changed_ack"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::block_changed_ack>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::block_destruction& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.location);
  fn(obj.destroy_stage);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_destruction& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.location);
  fn(obj.destroy_stage);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::block_destruction> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_destruction>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_destruction>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_destruction>().destroy_stage)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::block_destruction> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_destruction>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_destruction>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_destruction>().destroy_stage)>("destroy_stage");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::block_destruction& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.location, "location");
  fn(obj.destroy_stage, "destroy_stage");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_destruction& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.location, "location");
  fn(obj.destroy_stage, "destroy_stage");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::block_destruction>() { return "copper_server::api::packets::client_bound::play::block_destruction"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::block_destruction>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::block_entity_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.type);
  fn(obj.data);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_entity_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.type);
  fn(obj.data);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::block_entity_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_entity_data>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_entity_data>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_entity_data>().data)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::block_entity_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_entity_data>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_entity_data>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_entity_data>().data)>("data");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::block_entity_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.type, "type");
  fn(obj.data, "data");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_entity_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.type, "type");
  fn(obj.data, "data");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::block_entity_data>() { return "copper_server::api::packets::client_bound::play::block_entity_data"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::block_entity_data>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::block_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.action_id);
  fn(obj.action_param);
  fn(obj.block);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.action_id);
  fn(obj.action_param);
  fn(obj.block);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::block_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_event>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_event>().action_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_event>().action_param)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_event>().block)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::block_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_event>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_event>().action_id)>("action_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_event>().action_param)>("action_param");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_event>().block)>("block");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::block_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.action_id, "action_id");
  fn(obj.action_param, "action_param");
  fn(obj.block, "block");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.action_id, "action_id");
  fn(obj.action_param, "action_param");
  fn(obj.block, "block");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::block_event>() { return "copper_server::api::packets::client_bound::play::block_event"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::block_event>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::block_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.block);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.block);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::block_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_update>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_update>().block)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::block_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_update>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::block_update>().block)>("block");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::block_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.block, "block");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::block_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.block, "block");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::block_update>() { return "copper_server::api::packets::client_bound::play::block_update"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::block_update>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::add& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
  fn(obj.health);
  fn(obj.color);
  fn(obj.division);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::add& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
  fn(obj.health);
  fn(obj.color);
  fn(obj.division);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::boss_event::add> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().title)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().health)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().color)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().division)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::boss_event::add> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().title)>("title");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().health)>("health");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().color)>("color");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().division)>("division");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::add>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::add& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
  fn(obj.health, "health");
  fn(obj.color, "color");
  fn(obj.division, "division");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::add& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
  fn(obj.health, "health");
  fn(obj.color, "color");
  fn(obj.division, "division");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::boss_event::add>() { return "copper_server::api::packets::client_bound::play::boss_event::add"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::boss_event::add>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::remove& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::remove& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::boss_event::remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::boss_event::remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::remove& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::remove& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::boss_event::remove>() { return "copper_server::api::packets::client_bound::play::boss_event::remove"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::boss_event::remove>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::update_health& obj, [[maybe_unused]] FN&& fn){
  fn(obj.health);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::update_health& obj, [[maybe_unused]] FN&& fn){
  fn(obj.health);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::boss_event::update_health> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_health>().health)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::boss_event::update_health> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_health>().health)>("health");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::update_health& obj, [[maybe_unused]] FN&& fn){
  fn(obj.health, "health");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::update_health& obj, [[maybe_unused]] FN&& fn){
  fn(obj.health, "health");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::boss_event::update_health>() { return "copper_server::api::packets::client_bound::play::boss_event::update_health"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::boss_event::update_health>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::update_title& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::update_title& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::boss_event::update_title> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_title>().title)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::boss_event::update_title> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_title>().title)>("title");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::update_title& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::update_title& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::boss_event::update_title>() { return "copper_server::api::packets::client_bound::play::boss_event::update_title"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::boss_event::update_title>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::update_style& obj, [[maybe_unused]] FN&& fn){
  fn(obj.color);
  fn(obj.division);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::update_style& obj, [[maybe_unused]] FN&& fn){
  fn(obj.color);
  fn(obj.division);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::boss_event::update_style> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_style>().color)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_style>().division)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::boss_event::update_style> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_style>().color)>("color");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_style>().division)>("division");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::update_style& obj, [[maybe_unused]] FN&& fn){
  fn(obj.color, "color");
  fn(obj.division, "division");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::update_style& obj, [[maybe_unused]] FN&& fn){
  fn(obj.color, "color");
  fn(obj.division, "division");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::boss_event::update_style>() { return "copper_server::api::packets::client_bound::play::boss_event::update_style"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::boss_event::update_style>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::update_flags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::update_flags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::boss_event::update_flags> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_flags>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::boss_event::update_flags> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event::update_flags>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event::update_flags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event::update_flags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::boss_event::update_flags>() { return "copper_server::api::packets::client_bound::play::boss_event::update_flags"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::boss_event::update_flags>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.action);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.action);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::boss_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event>().uuid)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event>().action)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::boss_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event>().uuid)>("uuid");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::boss_event>().action)>("action");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::boss_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.action, "action");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::boss_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.action, "action");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::boss_event>() { return "copper_server::api::packets::client_bound::play::boss_event"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::boss_event>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::change_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.difficulty);
  fn(obj.is_locked);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::change_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.difficulty);
  fn(obj.is_locked);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::change_difficulty> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::change_difficulty>().difficulty)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::change_difficulty>().is_locked)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::change_difficulty> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::change_difficulty>().difficulty)>("difficulty");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::change_difficulty>().is_locked)>("is_locked");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::change_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.difficulty, "difficulty");
  fn(obj.is_locked, "is_locked");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::change_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.difficulty, "difficulty");
  fn(obj.is_locked, "is_locked");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::change_difficulty>() { return "copper_server::api::packets::client_bound::play::change_difficulty"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::change_difficulty>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::chunk_batch_finished& obj, [[maybe_unused]] FN&& fn){
  fn(obj.batch_size);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::chunk_batch_finished& obj, [[maybe_unused]] FN&& fn){
  fn(obj.batch_size);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::chunk_batch_finished> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::chunk_batch_finished>().batch_size)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::chunk_batch_finished> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::chunk_batch_finished>().batch_size)>("batch_size");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::chunk_batch_finished& obj, [[maybe_unused]] FN&& fn){
  fn(obj.batch_size, "batch_size");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::chunk_batch_finished& obj, [[maybe_unused]] FN&& fn){
  fn(obj.batch_size, "batch_size");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::chunk_batch_finished>() { return "copper_server::api::packets::client_bound::play::chunk_batch_finished"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::chunk_batch_finished>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::chunk_batch_start& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::chunk_batch_start& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::chunk_batch_start> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::chunk_batch_start> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::chunk_batch_start& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::chunk_batch_start& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::chunk_batch_start>() { return "copper_server::api::packets::client_bound::play::chunk_batch_start"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::chunk_batch_start>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::chunks_biomes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.z);
  fn(obj.x);
  fn(obj.sections_of_biomes);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::chunks_biomes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.z);
  fn(obj.x);
  fn(obj.sections_of_biomes);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::chunks_biomes> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::chunks_biomes>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::chunks_biomes>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::chunks_biomes>().sections_of_biomes)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::chunks_biomes> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::chunks_biomes>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::chunks_biomes>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::chunks_biomes>().sections_of_biomes)>("sections_of_biomes");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::chunks_biomes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.z, "z");
  fn(obj.x, "x");
  fn(obj.sections_of_biomes, "sections_of_biomes");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::chunks_biomes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.z, "z");
  fn(obj.x, "x");
  fn(obj.sections_of_biomes, "sections_of_biomes");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::chunks_biomes>() { return "copper_server::api::packets::client_bound::play::chunks_biomes"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::chunks_biomes>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::clear_titles& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reset);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::clear_titles& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reset);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::clear_titles> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::clear_titles>().reset)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::clear_titles> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::clear_titles>().reset)>("reset");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::clear_titles& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reset, "reset");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::clear_titles& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reset, "reset");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::clear_titles>() { return "copper_server::api::packets::client_bound::play::clear_titles"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::clear_titles>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::command_suggestions::match& obj, [[maybe_unused]] FN&& fn){
  fn(obj.set);
  fn(obj.tooltip);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::command_suggestions::match& obj, [[maybe_unused]] FN&& fn){
  fn(obj.set);
  fn(obj.tooltip);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::command_suggestions::match> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions::match>().set)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions::match>().tooltip)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::command_suggestions::match> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions::match>().set)>("set");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions::match>().tooltip)>("tooltip");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::command_suggestions::match& obj, [[maybe_unused]] FN&& fn){
  fn(obj.set, "set");
  fn(obj.tooltip, "tooltip");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::command_suggestions::match& obj, [[maybe_unused]] FN&& fn){
  fn(obj.set, "set");
  fn(obj.tooltip, "tooltip");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::command_suggestions::match>() { return "copper_server::api::packets::client_bound::play::command_suggestions::match"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::command_suggestions::match>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::command_suggestions& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_transaction_id);
  fn(obj.start);
  fn(obj.length);
  fn(obj.matches);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::command_suggestions& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_transaction_id);
  fn(obj.start);
  fn(obj.length);
  fn(obj.matches);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::command_suggestions> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions>().suggestion_transaction_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions>().start)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions>().length)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions>().matches)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::command_suggestions> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions>().suggestion_transaction_id)>("suggestion_transaction_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions>().start)>("start");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions>().length)>("length");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::command_suggestions>().matches)>("matches");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::command_suggestions& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_transaction_id, "suggestion_transaction_id");
  fn(obj.start, "start");
  fn(obj.length, "length");
  fn(obj.matches, "matches");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::command_suggestions& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_transaction_id, "suggestion_transaction_id");
  fn(obj.start, "start");
  fn(obj.length, "length");
  fn(obj.matches, "matches");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::command_suggestions>() { return "copper_server::api::packets::client_bound::play::command_suggestions"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::command_suggestions>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::root_node& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::root_node& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::commands::node::root_node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::commands::node::root_node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::root_node& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::root_node& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::commands::node::root_node>() { return "copper_server::api::packets::client_bound::play::commands::node::root_node"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::commands::node::root_node>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::literal_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::literal_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::commands::node::literal_node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::literal_node>().name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::commands::node::literal_node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::literal_node>().name)>("name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::literal_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::literal_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::commands::node::literal_node>() { return "copper_server::api::packets::client_bound::play::commands::node::literal_node"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::commands::node::literal_node>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::argument_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.type);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::argument_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.type);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::commands::node::argument_node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::argument_node>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::argument_node>().type)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::commands::node::argument_node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::argument_node>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::argument_node>().type)>("type");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::argument_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.type, "type");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::argument_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.type, "type");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::commands::node::argument_node>() { return "copper_server::api::packets::client_bound::play::commands::node::argument_node"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::commands::node::argument_node>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::is_executable& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::is_executable& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::commands::node::is_executable> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::commands::node::is_executable> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::is_executable& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::is_executable& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::commands::node::is_executable>() { return "copper_server::api::packets::client_bound::play::commands::node::is_executable"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::commands::node::is_executable>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::redirect_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.node);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::redirect_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.node);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::commands::node::redirect_node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::redirect_node>().node)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::commands::node::redirect_node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::redirect_node>().node)>("node");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::redirect_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.node, "node");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::redirect_node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.node, "node");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::commands::node::redirect_node>() { return "copper_server::api::packets::client_bound::play::commands::node::redirect_node"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::commands::node::redirect_node>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::suggestions_type& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::suggestions_type& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::commands::node::suggestions_type> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::suggestions_type>().name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::commands::node::suggestions_type> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node::suggestions_type>().name)>("name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::suggestions_type& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::suggestions_type& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::commands::node::suggestions_type>() { return "copper_server::api::packets::client_bound::play::commands::node::suggestions_type"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::commands::node::suggestions_type>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::is_restricted& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::is_restricted& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::commands::node::is_restricted> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::commands::node::is_restricted> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node::is_restricted& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node::is_restricted& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::commands::node::is_restricted>() { return "copper_server::api::packets::client_bound::play::commands::node::is_restricted"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::commands::node::is_restricted>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
  fn(obj.children);
  fn(obj.flags_values);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
  fn(obj.children);
  fn(obj.flags_values);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::commands::node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node>().flags)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node>().children)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node>().flags_values)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::commands::node> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node>().flags)>("flags");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node>().children)>("children");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands::node>().flags_values)>("flags_values");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::commands::node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
  fn(obj.children, "children");
  fn(obj.flags_values, "flags_values");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands::node& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
  fn(obj.children, "children");
  fn(obj.flags_values, "flags_values");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::commands::node>() { return "copper_server::api::packets::client_bound::play::commands::node"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::commands::node>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::commands& obj, [[maybe_unused]] FN&& fn){
  fn(obj.nodes);
  fn(obj.root_index);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands& obj, [[maybe_unused]] FN&& fn){
  fn(obj.nodes);
  fn(obj.root_index);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::commands> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands>().nodes)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands>().root_index)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::commands> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands>().nodes)>("nodes");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::commands>().root_index)>("root_index");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::commands& obj, [[maybe_unused]] FN&& fn){
  fn(obj.nodes, "nodes");
  fn(obj.root_index, "root_index");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::commands& obj, [[maybe_unused]] FN&& fn){
  fn(obj.nodes, "nodes");
  fn(obj.root_index, "root_index");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::commands>() { return "copper_server::api::packets::client_bound::play::commands"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::commands>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_close& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_close& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_close> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_close>().windows_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_close> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_close>().windows_id)>("windows_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_close& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_close& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_close>() { return "copper_server::api::packets::client_bound::play::container_close"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_close>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_content& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
  fn(obj.state_id);
  fn(obj.inventory_data);
  fn(obj.carried_item);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_content& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
  fn(obj.state_id);
  fn(obj.inventory_data);
  fn(obj.carried_item);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_content> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_content>().windows_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_content>().state_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_content>().inventory_data)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_content>().carried_item)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_content> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_content>().windows_id)>("windows_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_content>().state_id)>("state_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_content>().inventory_data)>("inventory_data");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_content>().carried_item)>("carried_item");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_content& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
  fn(obj.state_id, "state_id");
  fn(obj.inventory_data, "inventory_data");
  fn(obj.carried_item, "carried_item");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_content& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
  fn(obj.state_id, "state_id");
  fn(obj.inventory_data, "inventory_data");
  fn(obj.carried_item, "carried_item");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_content>() { return "copper_server::api::packets::client_bound::play::container_set_content"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_content>() { return 4; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::container_set_data::furnace::property_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::container_set_data::furnace::property_e>;
static constexpr inline std::array<item, 4> values = {item{"fuel_left", copper_server::api::packets::client_bound::play::container_set_data::furnace::property_e::fuel_left}, item{"max_fuel", copper_server::api::packets::client_bound::play::container_set_data::furnace::property_e::max_fuel}, item{"progress", copper_server::api::packets::client_bound::play::container_set_data::furnace::property_e::progress}, item{"max_progress", copper_server::api::packets::client_bound::play::container_set_data::furnace::property_e::max_progress}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::furnace::property_e>() { return "copper_server::api::packets::client_bound::play::container_set_data::furnace::property_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::furnace& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::furnace& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::furnace> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::furnace>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::furnace>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::furnace> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::furnace>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::furnace>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::furnace& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::furnace& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::furnace>() { return "copper_server::api::packets::client_bound::play::container_set_data::furnace"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::furnace>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e>;
static constexpr inline std::array<item, 10> values = {item{"level_requirement_top", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::level_requirement_top}, item{"level_requirement_middle", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::level_requirement_middle}, item{"level_requirement_bottom", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::level_requirement_bottom}, item{"enchantment_seed", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::enchantment_seed}, item{"enchantment_id_top", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::enchantment_id_top}, item{"enchantment_id_middle", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::enchantment_id_middle}, item{"enchantment_id_bottom", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::enchantment_id_bottom}, item{"enchantment_lvl_top", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::enchantment_lvl_top}, item{"enchantment_lvl_middle", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::enchantment_lvl_middle}, item{"enchantment_lvl_bottom", copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e::enchantment_lvl_bottom}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e>() { return "copper_server::api::packets::client_bound::play::container_set_data::enchantment_table::property_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::enchantment_table& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::enchantment_table& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::enchantment_table& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::enchantment_table& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table>() { return "copper_server::api::packets::client_bound::play::container_set_data::enchantment_table"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::enchantment_table>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::container_set_data::beacon::property_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::container_set_data::beacon::property_e>;
static constexpr inline std::array<item, 3> values = {item{"power_level", copper_server::api::packets::client_bound::play::container_set_data::beacon::property_e::power_level}, item{"first_potion", copper_server::api::packets::client_bound::play::container_set_data::beacon::property_e::first_potion}, item{"second_potion", copper_server::api::packets::client_bound::play::container_set_data::beacon::property_e::second_potion}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::beacon::property_e>() { return "copper_server::api::packets::client_bound::play::container_set_data::beacon::property_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::beacon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::beacon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::beacon> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::beacon>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::beacon>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::beacon> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::beacon>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::beacon>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::beacon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::beacon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::beacon>() { return "copper_server::api::packets::client_bound::play::container_set_data::beacon"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::beacon>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::container_set_data::anvil::property_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::container_set_data::anvil::property_e>;
static constexpr inline std::array<item, 1> values = {item{"repair_cost", copper_server::api::packets::client_bound::play::container_set_data::anvil::property_e::repair_cost}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::anvil::property_e>() { return "copper_server::api::packets::client_bound::play::container_set_data::anvil::property_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::anvil& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::anvil& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::anvil> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::anvil>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::anvil>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::anvil> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::anvil>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::anvil>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::anvil& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::anvil& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::anvil>() { return "copper_server::api::packets::client_bound::play::container_set_data::anvil"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::anvil>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand::property_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::container_set_data::brewing_stand::property_e>;
static constexpr inline std::array<item, 2> values = {item{"brew_time", copper_server::api::packets::client_bound::play::container_set_data::brewing_stand::property_e::brew_time}, item{"fuel_left", copper_server::api::packets::client_bound::play::container_set_data::brewing_stand::property_e::fuel_left}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand::property_e>() { return "copper_server::api::packets::client_bound::play::container_set_data::brewing_stand::property_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::brewing_stand& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::brewing_stand& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::brewing_stand& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::brewing_stand& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand>() { return "copper_server::api::packets::client_bound::play::container_set_data::brewing_stand"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::brewing_stand>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::container_set_data::stonecutter::property_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::container_set_data::stonecutter::property_e>;
static constexpr inline std::array<item, 1> values = {item{"selected_recipe", copper_server::api::packets::client_bound::play::container_set_data::stonecutter::property_e::selected_recipe}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::stonecutter::property_e>() { return "copper_server::api::packets::client_bound::play::container_set_data::stonecutter::property_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::stonecutter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::stonecutter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::stonecutter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::stonecutter>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::stonecutter>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::stonecutter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::stonecutter>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::stonecutter>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::stonecutter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::stonecutter& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::stonecutter>() { return "copper_server::api::packets::client_bound::play::container_set_data::stonecutter"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::stonecutter>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::container_set_data::loom::property_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::container_set_data::loom::property_e>;
static constexpr inline std::array<item, 1> values = {item{"selected_pattern", copper_server::api::packets::client_bound::play::container_set_data::loom::property_e::selected_pattern}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::loom::property_e>() { return "copper_server::api::packets::client_bound::play::container_set_data::loom::property_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::loom& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::loom& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::loom> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::loom>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::loom>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::loom> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::loom>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::loom>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::loom& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::loom& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::loom>() { return "copper_server::api::packets::client_bound::play::container_set_data::loom"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::loom>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::container_set_data::lectern::property_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::container_set_data::lectern::property_e>;
static constexpr inline std::array<item, 1> values = {item{"page_number", copper_server::api::packets::client_bound::play::container_set_data::lectern::property_e::page_number}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::lectern::property_e>() { return "copper_server::api::packets::client_bound::play::container_set_data::lectern::property_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::lectern& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::lectern& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::lectern> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::lectern>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::lectern>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::lectern> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::lectern>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::lectern>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::lectern& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::lectern& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::lectern>() { return "copper_server::api::packets::client_bound::play::container_set_data::lectern"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::lectern>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::container_set_data::smithing_table::property_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::container_set_data::smithing_table::property_e>;
static constexpr inline std::array<item, 1> values = {item{"has_recipe_error", copper_server::api::packets::client_bound::play::container_set_data::smithing_table::property_e::has_recipe_error}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::smithing_table::property_e>() { return "copper_server::api::packets::client_bound::play::container_set_data::smithing_table::property_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::smithing_table& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::smithing_table& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::smithing_table> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::smithing_table>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::smithing_table>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::smithing_table> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::smithing_table>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::smithing_table>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::smithing_table& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::smithing_table& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::smithing_table>() { return "copper_server::api::packets::client_bound::play::container_set_data::smithing_table"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::smithing_table>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::other& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::other& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data::other> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::other>().property)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::other>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data::other> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::other>().property)>("property");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data::other>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data::other& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data::other& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property, "property");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data::other>() { return "copper_server::api::packets::client_bound::play::container_set_data::other"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data::other>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data>().windows_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data>().windows_id)>("windows_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_data>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_data>() { return "copper_server::api::packets::client_bound::play::container_set_data"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_data>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
  fn(obj.state_id);
  fn(obj.slot);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
  fn(obj.state_id);
  fn(obj.slot);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::container_set_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_slot>().windows_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_slot>().state_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_slot>().slot)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::container_set_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_slot>().windows_id)>("windows_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_slot>().state_id)>("state_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::container_set_slot>().slot)>("slot");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::container_set_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
  fn(obj.state_id, "state_id");
  fn(obj.slot, "slot");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::container_set_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
  fn(obj.state_id, "state_id");
  fn(obj.slot, "slot");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::container_set_slot>() { return "copper_server::api::packets::client_bound::play::container_set_slot"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::container_set_slot>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::cookie_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::cookie_request>().key)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::cookie_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::cookie_request>().key)>("key");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::cookie_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::cookie_request>() { return "copper_server::api::packets::client_bound::play::cookie_request"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::cookie_request>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::cooldown& obj, [[maybe_unused]] FN&& fn){
  fn(obj.group);
  fn(obj.ticks);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::cooldown& obj, [[maybe_unused]] FN&& fn){
  fn(obj.group);
  fn(obj.ticks);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::cooldown> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::cooldown>().group)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::cooldown>().ticks)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::cooldown> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::cooldown>().group)>("group");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::cooldown>().ticks)>("ticks");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::cooldown& obj, [[maybe_unused]] FN&& fn){
  fn(obj.group, "group");
  fn(obj.ticks, "ticks");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::cooldown& obj, [[maybe_unused]] FN&& fn){
  fn(obj.group, "group");
  fn(obj.ticks, "ticks");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::cooldown>() { return "copper_server::api::packets::client_bound::play::cooldown"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::cooldown>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::custom_chat_completions::suggestion_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::custom_chat_completions::suggestion_e>;
static constexpr inline std::array<item, 3> values = {item{"add", copper_server::api::packets::client_bound::play::custom_chat_completions::suggestion_e::add}, item{"remove", copper_server::api::packets::client_bound::play::custom_chat_completions::suggestion_e::remove}, item{"set", copper_server::api::packets::client_bound::play::custom_chat_completions::suggestion_e::set}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::custom_chat_completions::suggestion_e>() { return "copper_server::api::packets::client_bound::play::custom_chat_completions::suggestion_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::custom_chat_completions& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion);
  fn(obj.entries);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::custom_chat_completions& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion);
  fn(obj.entries);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::custom_chat_completions> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_chat_completions>().suggestion)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_chat_completions>().entries)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::custom_chat_completions> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_chat_completions>().suggestion)>("suggestion");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_chat_completions>().entries)>("entries");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::custom_chat_completions& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion, "suggestion");
  fn(obj.entries, "entries");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::custom_chat_completions& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion, "suggestion");
  fn(obj.entries, "entries");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::custom_chat_completions>() { return "copper_server::api::packets::client_bound::play::custom_chat_completions"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::custom_chat_completions>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::custom_payload> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_payload>().channel)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_payload>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::custom_payload> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_payload>().channel)>("channel");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_payload>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::custom_payload>() { return "copper_server::api::packets::client_bound::play::custom_payload"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::custom_payload>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::damage_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.source_damage_type_id);
  fn(obj.source_entity_id);
  fn(obj.source_direct_entity_id);
  fn(obj.source_pos);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::damage_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.source_damage_type_id);
  fn(obj.source_entity_id);
  fn(obj.source_direct_entity_id);
  fn(obj.source_pos);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::damage_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().source_damage_type_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().source_entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().source_direct_entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().source_pos)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::damage_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().source_damage_type_id)>("source_damage_type_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().source_entity_id)>("source_entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().source_direct_entity_id)>("source_direct_entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::damage_event>().source_pos)>("source_pos");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::damage_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.source_damage_type_id, "source_damage_type_id");
  fn(obj.source_entity_id, "source_entity_id");
  fn(obj.source_direct_entity_id, "source_direct_entity_id");
  fn(obj.source_pos, "source_pos");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::damage_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.source_damage_type_id, "source_damage_type_id");
  fn(obj.source_entity_id, "source_entity_id");
  fn(obj.source_direct_entity_id, "source_direct_entity_id");
  fn(obj.source_pos, "source_pos");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::damage_event>() { return "copper_server::api::packets::client_bound::play::damage_event"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::damage_event>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::debug_sample& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sample);
  fn(obj.sample_type);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::debug_sample& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sample);
  fn(obj.sample_type);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::debug_sample> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::debug_sample>().sample)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::debug_sample>().sample_type)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::debug_sample> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::debug_sample>().sample)>("sample");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::debug_sample>().sample_type)>("sample_type");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::debug_sample& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sample, "sample");
  fn(obj.sample_type, "sample_type");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::debug_sample& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sample, "sample");
  fn(obj.sample_type, "sample_type");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::debug_sample>() { return "copper_server::api::packets::client_bound::play::debug_sample"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::debug_sample>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::delete_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message_id);
  fn(obj.signature);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::delete_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message_id);
  fn(obj.signature);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::delete_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::delete_chat>().message_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::delete_chat>().signature)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::delete_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::delete_chat>().message_id)>("message_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::delete_chat>().signature)>("signature");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::delete_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message_id, "message_id");
  fn(obj.signature, "signature");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::delete_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message_id, "message_id");
  fn(obj.signature, "signature");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::delete_chat>() { return "copper_server::api::packets::client_bound::play::delete_chat"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::delete_chat>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::disconnect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disconnect>().reason)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::disconnect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disconnect>().reason)>("reason");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason, "reason");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::disconnect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.reason, "reason");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::disconnect>() { return "copper_server::api::packets::client_bound::play::disconnect"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::disconnect>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::disguised_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message);
  fn(obj.type);
  fn(obj.sender);
  fn(obj.target_name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::disguised_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message);
  fn(obj.type);
  fn(obj.sender);
  fn(obj.target_name);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::disguised_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disguised_chat>().message)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disguised_chat>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disguised_chat>().sender)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disguised_chat>().target_name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::disguised_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disguised_chat>().message)>("message");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disguised_chat>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disguised_chat>().sender)>("sender");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::disguised_chat>().target_name)>("target_name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::disguised_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message, "message");
  fn(obj.type, "type");
  fn(obj.sender, "sender");
  fn(obj.target_name, "target_name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::disguised_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message, "message");
  fn(obj.type, "type");
  fn(obj.sender, "sender");
  fn(obj.target_name, "target_name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::disguised_chat>() { return "copper_server::api::packets::client_bound::play::disguised_chat"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::disguised_chat>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::entity_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.status);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::entity_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.status);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::entity_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_event>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_event>().status)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::entity_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_event>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_event>().status)>("status");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::entity_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.status, "status");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::entity_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.status, "status");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::entity_event>() { return "copper_server::api::packets::client_bound::play::entity_event"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::entity_event>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::entity_position_sync& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.on_ground);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::entity_position_sync& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.on_ground);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::entity_position_sync> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().velocity_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().velocity_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().velocity_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().on_ground)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::entity_position_sync> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().velocity_x)>("velocity_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().velocity_y)>("velocity_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().velocity_z)>("velocity_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::entity_position_sync>().on_ground)>("on_ground");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::entity_position_sync& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.on_ground, "on_ground");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::entity_position_sync& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.on_ground, "on_ground");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::entity_position_sync>() { return "copper_server::api::packets::client_bound::play::entity_position_sync"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::entity_position_sync>() { return 10; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t>().z)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t>().z)>("z");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t>() { return "copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::explode::player_delta_velocity_t>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::explode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.player_delta_velocity);
  fn(obj.particle);
  fn(obj.sound);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::explode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.player_delta_velocity);
  fn(obj.particle);
  fn(obj.sound);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::explode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().player_delta_velocity)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().particle)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().sound)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::explode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().player_delta_velocity)>("player_delta_velocity");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().particle)>("particle");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::explode>().sound)>("sound");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::explode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.player_delta_velocity, "player_delta_velocity");
  fn(obj.particle, "particle");
  fn(obj.sound, "sound");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::explode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.player_delta_velocity, "player_delta_velocity");
  fn(obj.particle, "particle");
  fn(obj.sound, "sound");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::explode>() { return "copper_server::api::packets::client_bound::play::explode"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::explode>() { return 6; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::forget_level_chunk& obj, [[maybe_unused]] FN&& fn){
  fn(obj.z);
  fn(obj.x);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::forget_level_chunk& obj, [[maybe_unused]] FN&& fn){
  fn(obj.z);
  fn(obj.x);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::forget_level_chunk> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::forget_level_chunk>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::forget_level_chunk>().x)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::forget_level_chunk> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::forget_level_chunk>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::forget_level_chunk>().x)>("x");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::forget_level_chunk& obj, [[maybe_unused]] FN&& fn){
  fn(obj.z, "z");
  fn(obj.x, "x");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::forget_level_chunk& obj, [[maybe_unused]] FN&& fn){
  fn(obj.z, "z");
  fn(obj.x, "x");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::forget_level_chunk>() { return "copper_server::api::packets::client_bound::play::forget_level_chunk"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::forget_level_chunk>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available>()._ignored)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available>()._ignored)>("_ignored");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available>() { return "copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::no_respawn_block_available>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::raining_begin& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::raining_begin& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::raining_begin> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::raining_begin>()._ignored)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::raining_begin> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::raining_begin>()._ignored)>("_ignored");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::raining_begin& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::raining_begin& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::raining_begin>() { return "copper_server::api::packets::client_bound::play::game_event::raining_begin"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::raining_begin>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::raining_end& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::raining_end& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::raining_end> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::raining_end>()._ignored)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::raining_end> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::raining_end>()._ignored)>("_ignored");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::raining_end& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::raining_end& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::raining_end>() { return "copper_server::api::packets::client_bound::play::game_event::raining_end"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::raining_end>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::gamemode_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::gamemode_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::gamemode_change> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::gamemode_change>().gamemode)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::gamemode_change> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::gamemode_change>().gamemode)>("gamemode");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::gamemode_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode, "gamemode");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::gamemode_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode, "gamemode");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::gamemode_change>() { return "copper_server::api::packets::client_bound::play::game_event::gamemode_change"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::gamemode_change>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::win_game& obj, [[maybe_unused]] FN&& fn){
  fn(obj.roll_credits);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::win_game& obj, [[maybe_unused]] FN&& fn){
  fn(obj.roll_credits);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::win_game> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::win_game>().roll_credits)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::win_game> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::win_game>().roll_credits)>("roll_credits");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::win_game& obj, [[maybe_unused]] FN&& fn){
  fn(obj.roll_credits, "roll_credits");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::win_game& obj, [[maybe_unused]] FN&& fn){
  fn(obj.roll_credits, "roll_credits");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::win_game>() { return "copper_server::api::packets::client_bound::play::game_event::win_game"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::win_game>() { return 1; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::game_event::demo_event::event_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::game_event::demo_event::event_e>;
static constexpr inline std::array<item, 5> values = {item{"welcome", copper_server::api::packets::client_bound::play::game_event::demo_event::event_e::welcome}, item{"movement_controls", copper_server::api::packets::client_bound::play::game_event::demo_event::event_e::movement_controls}, item{"jump_controls", copper_server::api::packets::client_bound::play::game_event::demo_event::event_e::jump_controls}, item{"inventory_controls", copper_server::api::packets::client_bound::play::game_event::demo_event::event_e::inventory_controls}, item{"demo_over", copper_server::api::packets::client_bound::play::game_event::demo_event::event_e::demo_over}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::demo_event::event_e>() { return "copper_server::api::packets::client_bound::play::game_event::demo_event::event_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::demo_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::demo_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::demo_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::demo_event>().event)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::demo_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::demo_event>().event)>("event");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::demo_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event, "event");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::demo_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event, "event");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::demo_event>() { return "copper_server::api::packets::client_bound::play::game_event::demo_event"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::demo_event>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::arrow_hit_player& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::arrow_hit_player& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::arrow_hit_player> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::arrow_hit_player>()._ignored)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::arrow_hit_player> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::arrow_hit_player>()._ignored)>("_ignored");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::arrow_hit_player& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::arrow_hit_player& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::arrow_hit_player>() { return "copper_server::api::packets::client_bound::play::game_event::arrow_hit_player"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::arrow_hit_player>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::rain_level_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::rain_level_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::rain_level_change> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::rain_level_change>().level)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::rain_level_change> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::rain_level_change>().level)>("level");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::rain_level_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level, "level");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::rain_level_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level, "level");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::rain_level_change>() { return "copper_server::api::packets::client_bound::play::game_event::rain_level_change"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::rain_level_change>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::thunder_level_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::thunder_level_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::thunder_level_change> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::thunder_level_change>().level)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::thunder_level_change> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::thunder_level_change>().level)>("level");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::thunder_level_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level, "level");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::thunder_level_change& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level, "level");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::thunder_level_change>() { return "copper_server::api::packets::client_bound::play::game_event::thunder_level_change"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::thunder_level_change>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound>()._ignored)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound>()._ignored)>("_ignored");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound>() { return "copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::puffer_fish_sting_sound>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation>()._ignored)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation>()._ignored)>("_ignored");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation>() { return "copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::guardian_appear_animation>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.enabled);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.enabled);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode>().enabled)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode>().enabled)>("enabled");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.enabled, "enabled");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.enabled, "enabled");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode>() { return "copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::respawn_screen_mode>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.enabled);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.enabled);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode>().enabled)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode>().enabled)>("enabled");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.enabled, "enabled");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.enabled, "enabled");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode>() { return "copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::limited_crafting_mode>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks>()._ignored)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks>()._ignored)>("_ignored");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks& obj, [[maybe_unused]] FN&& fn){
  fn(obj._ignored, "_ignored");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks>() { return "copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event::wait_for_level_chunks>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::game_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event>().event)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::game_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::game_event>().event)>("event");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::game_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event, "event");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::game_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event, "event");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::game_event>() { return "copper_server::api::packets::client_bound::play::game_event"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::game_event>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::horse_screen_open& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.columns_count);
  fn(obj.entity_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::horse_screen_open& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.columns_count);
  fn(obj.entity_id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::horse_screen_open> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::horse_screen_open>().window_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::horse_screen_open>().columns_count)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::horse_screen_open>().entity_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::horse_screen_open> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::horse_screen_open>().window_id)>("window_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::horse_screen_open>().columns_count)>("columns_count");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::horse_screen_open>().entity_id)>("entity_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::horse_screen_open& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.columns_count, "columns_count");
  fn(obj.entity_id, "entity_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::horse_screen_open& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.columns_count, "columns_count");
  fn(obj.entity_id, "entity_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::horse_screen_open>() { return "copper_server::api::packets::client_bound::play::horse_screen_open"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::horse_screen_open>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::hurt_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.yaw);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::hurt_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.yaw);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::hurt_animation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::hurt_animation>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::hurt_animation>().yaw)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::hurt_animation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::hurt_animation>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::hurt_animation>().yaw)>("yaw");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::hurt_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.yaw, "yaw");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::hurt_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.yaw, "yaw");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::hurt_animation>() { return "copper_server::api::packets::client_bound::play::hurt_animation"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::hurt_animation>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::initialize_border& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.old_diameter);
  fn(obj.new_diameter);
  fn(obj.speed_ms);
  fn(obj.portal_teleport_boundary);
  fn(obj.warning_blocks);
  fn(obj.warning_time);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::initialize_border& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.old_diameter);
  fn(obj.new_diameter);
  fn(obj.speed_ms);
  fn(obj.portal_teleport_boundary);
  fn(obj.warning_blocks);
  fn(obj.warning_time);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::initialize_border> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().old_diameter)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().new_diameter)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().speed_ms)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().portal_teleport_boundary)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().warning_blocks)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().warning_time)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::initialize_border> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().old_diameter)>("old_diameter");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().new_diameter)>("new_diameter");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().speed_ms)>("speed_ms");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().portal_teleport_boundary)>("portal_teleport_boundary");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().warning_blocks)>("warning_blocks");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::initialize_border>().warning_time)>("warning_time");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::initialize_border& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.old_diameter, "old_diameter");
  fn(obj.new_diameter, "new_diameter");
  fn(obj.speed_ms, "speed_ms");
  fn(obj.portal_teleport_boundary, "portal_teleport_boundary");
  fn(obj.warning_blocks, "warning_blocks");
  fn(obj.warning_time, "warning_time");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::initialize_border& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.old_diameter, "old_diameter");
  fn(obj.new_diameter, "new_diameter");
  fn(obj.speed_ms, "speed_ms");
  fn(obj.portal_teleport_boundary, "portal_teleport_boundary");
  fn(obj.warning_blocks, "warning_blocks");
  fn(obj.warning_time, "warning_time");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::initialize_border>() { return "copper_server::api::packets::client_bound::play::initialize_border"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::initialize_border>() { return 8; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::keep_alive> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::keep_alive>().keep_alive_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::keep_alive> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::keep_alive>().keep_alive_id)>("keep_alive_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id, "keep_alive_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id, "keep_alive_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::keep_alive>() { return "copper_server::api::packets::client_bound::play::keep_alive"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::keep_alive>() { return 1; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map::type_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map::type_e>;
static constexpr inline std::array<item, 4> values = {item{"world_surface", copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map::type_e::world_surface}, item{"ocean_floor", copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map::type_e::ocean_floor}, item{"motion_blocking", copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map::type_e::motion_blocking}, item{"motion_blocking_no_leaves", copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map::type_e::motion_blocking_no_leaves}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map::type_e>() { return "copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map::type_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
  fn(obj.pallete_data);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
  fn(obj.pallete_data);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map>().pallete_data)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map>().pallete_data)>("pallete_data");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
  fn(obj.pallete_data, "pallete_data");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
  fn(obj.pallete_data, "pallete_data");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map>() { return "copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::level_chunk_with_light::height_map>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::level_chunk_with_light::section& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_count);
  fn(obj.block_states);
  fn(obj.biomes);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_chunk_with_light::section& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_count);
  fn(obj.block_states);
  fn(obj.biomes);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::level_chunk_with_light::section> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::section>().block_count)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::section>().block_states)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::section>().biomes)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::level_chunk_with_light::section> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::section>().block_count)>("block_count");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::section>().block_states)>("block_states");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::section>().biomes)>("biomes");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::level_chunk_with_light::section& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_count, "block_count");
  fn(obj.block_states, "block_states");
  fn(obj.biomes, "biomes");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_chunk_with_light::section& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_count, "block_count");
  fn(obj.block_states, "block_states");
  fn(obj.biomes, "biomes");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::level_chunk_with_light::section>() { return "copper_server::api::packets::client_bound::play::level_chunk_with_light::section"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::level_chunk_with_light::section>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.xz);
  fn(obj.y);
  fn(obj.type);
  fn(obj.data);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.xz);
  fn(obj.y);
  fn(obj.type);
  fn(obj.data);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>().xz)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>().data)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>().xz)>("xz");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>().data)>("data");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.xz, "xz");
  fn(obj.y, "y");
  fn(obj.type, "type");
  fn(obj.data, "data");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.xz, "xz");
  fn(obj.y, "y");
  fn(obj.type, "type");
  fn(obj.data, "data");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>() { return "copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::level_chunk_with_light::block_entity>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::level_chunk_with_light& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.height_maps);
  fn(obj.sections);
  fn(obj.block_entities);
  fn(obj.sky_light_mask);
  fn(obj.block_light_mask);
  fn(obj.empty_sky_light_mask);
  fn(obj.empty_block_light_mask);
  fn(obj.sky_light);
  fn(obj.block_light);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_chunk_with_light& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.height_maps);
  fn(obj.sections);
  fn(obj.block_entities);
  fn(obj.sky_light_mask);
  fn(obj.block_light_mask);
  fn(obj.empty_sky_light_mask);
  fn(obj.empty_block_light_mask);
  fn(obj.sky_light);
  fn(obj.block_light);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::level_chunk_with_light> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().height_maps)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().sections)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().block_entities)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().sky_light_mask)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().block_light_mask)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().empty_sky_light_mask)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().empty_block_light_mask)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().sky_light)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().block_light)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::level_chunk_with_light> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().height_maps)>("height_maps");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().sections)>("sections");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().block_entities)>("block_entities");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().sky_light_mask)>("sky_light_mask");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().block_light_mask)>("block_light_mask");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().empty_sky_light_mask)>("empty_sky_light_mask");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().empty_block_light_mask)>("empty_block_light_mask");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().sky_light)>("sky_light");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_chunk_with_light>().block_light)>("block_light");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::level_chunk_with_light& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.height_maps, "height_maps");
  fn(obj.sections, "sections");
  fn(obj.block_entities, "block_entities");
  fn(obj.sky_light_mask, "sky_light_mask");
  fn(obj.block_light_mask, "block_light_mask");
  fn(obj.empty_sky_light_mask, "empty_sky_light_mask");
  fn(obj.empty_block_light_mask, "empty_block_light_mask");
  fn(obj.sky_light, "sky_light");
  fn(obj.block_light, "block_light");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_chunk_with_light& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.height_maps, "height_maps");
  fn(obj.sections, "sections");
  fn(obj.block_entities, "block_entities");
  fn(obj.sky_light_mask, "sky_light_mask");
  fn(obj.block_light_mask, "block_light_mask");
  fn(obj.empty_sky_light_mask, "empty_sky_light_mask");
  fn(obj.empty_block_light_mask, "empty_block_light_mask");
  fn(obj.sky_light, "sky_light");
  fn(obj.block_light, "block_light");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::level_chunk_with_light>() { return "copper_server::api::packets::client_bound::play::level_chunk_with_light"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::level_chunk_with_light>() { return 11; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::level_event::event_id> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::level_event::event_id>;
static constexpr inline std::array<item, 81> values = {item{"dispenser_dispenses", copper_server::api::packets::client_bound::play::level_event::event_id::dispenser_dispenses}, item{"dispenser_dispense_fail", copper_server::api::packets::client_bound::play::level_event::event_id::dispenser_dispense_fail}, item{"dispenser_shoots", copper_server::api::packets::client_bound::play::level_event::event_id::dispenser_shoots}, item{"firework_shot", copper_server::api::packets::client_bound::play::level_event::event_id::firework_shot}, item{"fire_extinguished", copper_server::api::packets::client_bound::play::level_event::event_id::fire_extinguished}, item{"play_record", copper_server::api::packets::client_bound::play::level_event::event_id::play_record}, item{"stop_record", copper_server::api::packets::client_bound::play::level_event::event_id::stop_record}, item{"ghast_warn", copper_server::api::packets::client_bound::play::level_event::event_id::ghast_warn}, item{"ghast_shoots", copper_server::api::packets::client_bound::play::level_event::event_id::ghast_shoots}, item{"ender_dragon_shoots", copper_server::api::packets::client_bound::play::level_event::event_id::ender_dragon_shoots}, item{"blaze_shoots", copper_server::api::packets::client_bound::play::level_event::event_id::blaze_shoots}, item{"zombie_attacks_wooden_door", copper_server::api::packets::client_bound::play::level_event::event_id::zombie_attacks_wooden_door}, item{"zombie_attacks_iron_door", copper_server::api::packets::client_bound::play::level_event::event_id::zombie_attacks_iron_door}, item{"zombie_breaks_wooden_door", copper_server::api::packets::client_bound::play::level_event::event_id::zombie_breaks_wooden_door}, item{"wither_breaks_block", copper_server::api::packets::client_bound::play::level_event::event_id::wither_breaks_block}, item{"wither_spawned", copper_server::api::packets::client_bound::play::level_event::event_id::wither_spawned}, item{"wither_shoots", copper_server::api::packets::client_bound::play::level_event::event_id::wither_shoots}, item{"bat_takes_of", copper_server::api::packets::client_bound::play::level_event::event_id::bat_takes_of}, item{"zombie_infects", copper_server::api::packets::client_bound::play::level_event::event_id::zombie_infects}, item{"zombie_villager_converted", copper_server::api::packets::client_bound::play::level_event::event_id::zombie_villager_converted}, item{"ender_dragon_dies", copper_server::api::packets::client_bound::play::level_event::event_id::ender_dragon_dies}, item{"anvil_destroyed", copper_server::api::packets::client_bound::play::level_event::event_id::anvil_destroyed}, item{"anvil_used", copper_server::api::packets::client_bound::play::level_event::event_id::anvil_used}, item{"anvil_lands", copper_server::api::packets::client_bound::play::level_event::event_id::anvil_lands}, item{"portal_travel", copper_server::api::packets::client_bound::play::level_event::event_id::portal_travel}, item{"chorus_flower_grows", copper_server::api::packets::client_bound::play::level_event::event_id::chorus_flower_grows}, item{"chorus_flower_dies", copper_server::api::packets::client_bound::play::level_event::event_id::chorus_flower_dies}, item{"brewing_stand_brews", copper_server::api::packets::client_bound::play::level_event::event_id::brewing_stand_brews}, item{"end_portal_created", copper_server::api::packets::client_bound::play::level_event::event_id::end_portal_created}, item{"phantom_bites", copper_server::api::packets::client_bound::play::level_event::event_id::phantom_bites}, item{"zombie_converts_to_drowned", copper_server::api::packets::client_bound::play::level_event::event_id::zombie_converts_to_drowned}, item{"husk_converts_to_zombie", copper_server::api::packets::client_bound::play::level_event::event_id::husk_converts_to_zombie}, item{"grindstone_used", copper_server::api::packets::client_bound::play::level_event::event_id::grindstone_used}, item{"book_page_turned", copper_server::api::packets::client_bound::play::level_event::event_id::book_page_turned}, item{"smithing_table_used", copper_server::api::packets::client_bound::play::level_event::event_id::smithing_table_used}, item{"pointed_dripstone_landing", copper_server::api::packets::client_bound::play::level_event::event_id::pointed_dripstone_landing}, item{"lava_dripping_on_cauldron_from_dripstone", copper_server::api::packets::client_bound::play::level_event::event_id::lava_dripping_on_cauldron_from_dripstone}, item{"water_dripping_on_cauldron_from_dripstone", copper_server::api::packets::client_bound::play::level_event::event_id::water_dripping_on_cauldron_from_dripstone}, item{"skeleton_converts_to_stray", copper_server::api::packets::client_bound::play::level_event::event_id::skeleton_converts_to_stray}, item{"crafter_successfully_crafts_item", copper_server::api::packets::client_bound::play::level_event::event_id::crafter_successfully_crafts_item}, item{"crafter_fails_to_craft_item", copper_server::api::packets::client_bound::play::level_event::event_id::crafter_fails_to_craft_item}, item{"composter_composts", copper_server::api::packets::client_bound::play::level_event::event_id::composter_composts}, item{"lava_converts_block", copper_server::api::packets::client_bound::play::level_event::event_id::lava_converts_block}, item{"redstone_torch_burns_out", copper_server::api::packets::client_bound::play::level_event::event_id::redstone_torch_burns_out}, item{"ender_eye_placed_in_end_portal_frame", copper_server::api::packets::client_bound::play::level_event::event_id::ender_eye_placed_in_end_portal_frame}, item{"fluid_drips_from_dripstone", copper_server::api::packets::client_bound::play::level_event::event_id::fluid_drips_from_dripstone}, item{"bone_meal_particles_and_sound", copper_server::api::packets::client_bound::play::level_event::event_id::bone_meal_particles_and_sound}, item{"dispenser_activation_smoke", copper_server::api::packets::client_bound::play::level_event::event_id::dispenser_activation_smoke}, item{"block_break_and_sound", copper_server::api::packets::client_bound::play::level_event::event_id::block_break_and_sound}, item{"splash_potion_particle_effect", copper_server::api::packets::client_bound::play::level_event::event_id::splash_potion_particle_effect}, item{"eye_of_ender_entity_break_animation", copper_server::api::packets::client_bound::play::level_event::event_id::eye_of_ender_entity_break_animation}, item{"spawner_spawns_mob", copper_server::api::packets::client_bound::play::level_event::event_id::spawner_spawns_mob}, item{"dragon_breath", copper_server::api::packets::client_bound::play::level_event::event_id::dragon_breath}, item{"instant_splash_potion", copper_server::api::packets::client_bound::play::level_event::event_id::instant_splash_potion}, item{"ender_dragon_destroys_block", copper_server::api::packets::client_bound::play::level_event::event_id::ender_dragon_destroys_block}, item{"wet_sponge_vaporizes", copper_server::api::packets::client_bound::play::level_event::event_id::wet_sponge_vaporizes}, item{"crafter_activation_smoke", copper_server::api::packets::client_bound::play::level_event::event_id::crafter_activation_smoke}, item{"bee_fertilizes_plant", copper_server::api::packets::client_bound::play::level_event::event_id::bee_fertilizes_plant}, item{"turtle_egg_placed", copper_server::api::packets::client_bound::play::level_event::event_id::turtle_egg_placed}, item{"smash_attack_mace", copper_server::api::packets::client_bound::play::level_event::event_id::smash_attack_mace}, item{"end_gateway_spawns", copper_server::api::packets::client_bound::play::level_event::event_id::end_gateway_spawns}, item{"ender_dragon_resurrected", copper_server::api::packets::client_bound::play::level_event::event_id::ender_dragon_resurrected}, item{"electric_spark", copper_server::api::packets::client_bound::play::level_event::event_id::electric_spark}, item{"copper_apply_wax", copper_server::api::packets::client_bound::play::level_event::event_id::copper_apply_wax}, item{"copper_remove_wax", copper_server::api::packets::client_bound::play::level_event::event_id::copper_remove_wax}, item{"copper_scrape_oxidation", copper_server::api::packets::client_bound::play::level_event::event_id::copper_scrape_oxidation}, item{"sculk_charge", copper_server::api::packets::client_bound::play::level_event::event_id::sculk_charge}, item{"sculk_shrieker_shriek", copper_server::api::packets::client_bound::play::level_event::event_id::sculk_shrieker_shriek}, item{"block_finished_brushing", copper_server::api::packets::client_bound::play::level_event::event_id::block_finished_brushing}, item{"sniffer_egg_cracks", copper_server::api::packets::client_bound::play::level_event::event_id::sniffer_egg_cracks}, item{"trial_spawner_spawns_mob_at_spawner", copper_server::api::packets::client_bound::play::level_event::event_id::trial_spawner_spawns_mob_at_spawner}, item{"trial_spawner_spawns_mob_at_spawn_location", copper_server::api::packets::client_bound::play::level_event::event_id::trial_spawner_spawns_mob_at_spawn_location}, item{"trial_spawner_detects_player", copper_server::api::packets::client_bound::play::level_event::event_id::trial_spawner_detects_player}, item{"trial_spawner_ejects_item", copper_server::api::packets::client_bound::play::level_event::event_id::trial_spawner_ejects_item}, item{"vault_activates", copper_server::api::packets::client_bound::play::level_event::event_id::vault_activates}, item{"vault_deactivates", copper_server::api::packets::client_bound::play::level_event::event_id::vault_deactivates}, item{"vault_ejects_item", copper_server::api::packets::client_bound::play::level_event::event_id::vault_ejects_item}, item{"cobweb_weaved", copper_server::api::packets::client_bound::play::level_event::event_id::cobweb_weaved}, item{"ominous_trial_spawner_detects_player", copper_server::api::packets::client_bound::play::level_event::event_id::ominous_trial_spawner_detects_player}, item{"trial_spawner_turns_ominous", copper_server::api::packets::client_bound::play::level_event::event_id::trial_spawner_turns_ominous}, item{"ominous_item_spawner_spawns_item", copper_server::api::packets::client_bound::play::level_event::event_id::ominous_item_spawner_spawns_item}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::level_event::event_id>() { return "copper_server::api::packets::client_bound::play::level_event::event_id"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::level_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event);
  fn(obj.location);
  fn(obj.data);
  fn(obj.disable_volume);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event);
  fn(obj.location);
  fn(obj.data);
  fn(obj.disable_volume);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::level_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_event>().event)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_event>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_event>().data)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_event>().disable_volume)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::level_event> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_event>().event)>("event");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_event>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_event>().data)>("data");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_event>().disable_volume)>("disable_volume");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::level_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event, "event");
  fn(obj.location, "location");
  fn(obj.data, "data");
  fn(obj.disable_volume, "disable_volume");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_event& obj, [[maybe_unused]] FN&& fn){
  fn(obj.event, "event");
  fn(obj.location, "location");
  fn(obj.data, "data");
  fn(obj.disable_volume, "disable_volume");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::level_event>() { return "copper_server::api::packets::client_bound::play::level_event"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::level_event>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::level_particles& obj, [[maybe_unused]] FN&& fn){
  fn(obj.long_distance);
  fn(obj.always_visible);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.offset_x);
  fn(obj.offset_y);
  fn(obj.offset_z);
  fn(obj.max_speed);
  fn(obj.particle_count);
  fn(obj.particle);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_particles& obj, [[maybe_unused]] FN&& fn){
  fn(obj.long_distance);
  fn(obj.always_visible);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.offset_x);
  fn(obj.offset_y);
  fn(obj.offset_z);
  fn(obj.max_speed);
  fn(obj.particle_count);
  fn(obj.particle);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::level_particles> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().long_distance)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().always_visible)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().offset_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().offset_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().offset_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().max_speed)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().particle_count)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().particle)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::level_particles> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().long_distance)>("long_distance");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().always_visible)>("always_visible");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().offset_x)>("offset_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().offset_y)>("offset_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().offset_z)>("offset_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().max_speed)>("max_speed");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().particle_count)>("particle_count");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::level_particles>().particle)>("particle");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::level_particles& obj, [[maybe_unused]] FN&& fn){
  fn(obj.long_distance, "long_distance");
  fn(obj.always_visible, "always_visible");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.offset_x, "offset_x");
  fn(obj.offset_y, "offset_y");
  fn(obj.offset_z, "offset_z");
  fn(obj.max_speed, "max_speed");
  fn(obj.particle_count, "particle_count");
  fn(obj.particle, "particle");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::level_particles& obj, [[maybe_unused]] FN&& fn){
  fn(obj.long_distance, "long_distance");
  fn(obj.always_visible, "always_visible");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.offset_x, "offset_x");
  fn(obj.offset_y, "offset_y");
  fn(obj.offset_z, "offset_z");
  fn(obj.max_speed, "max_speed");
  fn(obj.particle_count, "particle_count");
  fn(obj.particle, "particle");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::level_particles>() { return "copper_server::api::packets::client_bound::play::level_particles"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::level_particles>() { return 11; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::light_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.sky_light_mask);
  fn(obj.block_light_mask);
  fn(obj.empty_sky_light_mask);
  fn(obj.empty_block_light_mask);
  fn(obj.sky_light);
  fn(obj.block_light);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::light_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.sky_light_mask);
  fn(obj.block_light_mask);
  fn(obj.empty_sky_light_mask);
  fn(obj.empty_block_light_mask);
  fn(obj.sky_light);
  fn(obj.block_light);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::light_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().sky_light_mask)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().block_light_mask)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().empty_sky_light_mask)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().empty_block_light_mask)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().sky_light)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().block_light)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::light_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().sky_light_mask)>("sky_light_mask");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().block_light_mask)>("block_light_mask");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().empty_sky_light_mask)>("empty_sky_light_mask");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().empty_block_light_mask)>("empty_block_light_mask");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().sky_light)>("sky_light");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::light_update>().block_light)>("block_light");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::light_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.sky_light_mask, "sky_light_mask");
  fn(obj.block_light_mask, "block_light_mask");
  fn(obj.empty_sky_light_mask, "empty_sky_light_mask");
  fn(obj.empty_block_light_mask, "empty_block_light_mask");
  fn(obj.sky_light, "sky_light");
  fn(obj.block_light, "block_light");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::light_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.sky_light_mask, "sky_light_mask");
  fn(obj.block_light_mask, "block_light_mask");
  fn(obj.empty_sky_light_mask, "empty_sky_light_mask");
  fn(obj.empty_block_light_mask, "empty_block_light_mask");
  fn(obj.sky_light, "sky_light");
  fn(obj.block_light, "block_light");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::light_update>() { return "copper_server::api::packets::client_bound::play::light_update"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::light_update>() { return 8; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::login::death_location_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.world);
  fn(obj.location);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::login::death_location_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.world);
  fn(obj.location);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::login::death_location_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login::death_location_t>().world)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login::death_location_t>().location)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::login::death_location_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login::death_location_t>().world)>("world");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login::death_location_t>().location)>("location");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::login::death_location_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.world, "world");
  fn(obj.location, "location");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::login::death_location_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.world, "world");
  fn(obj.location, "location");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::login::death_location_t>() { return "copper_server::api::packets::client_bound::play::login::death_location_t"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::login::death_location_t>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::login& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.is_hardcore);
  fn(obj.dimension_names);
  fn(obj.max_players);
  fn(obj.view_distance);
  fn(obj.simulation_distance);
  fn(obj.reduced_debug_info);
  fn(obj.respawn_screen);
  fn(obj.limited_crafting_enabled);
  fn(obj.dimension_type);
  fn(obj.dimension_name);
  fn(obj.seed_hashed);
  fn(obj.gamemode);
  fn(obj.prev_gamemode);
  fn(obj.world_is_debug);
  fn(obj.world_is_flat);
  fn(obj.death_location);
  fn(obj.portal_cooldown);
  fn(obj.sea_level);
  fn(obj.enforce_secure_chat);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::login& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.is_hardcore);
  fn(obj.dimension_names);
  fn(obj.max_players);
  fn(obj.view_distance);
  fn(obj.simulation_distance);
  fn(obj.reduced_debug_info);
  fn(obj.respawn_screen);
  fn(obj.limited_crafting_enabled);
  fn(obj.dimension_type);
  fn(obj.dimension_name);
  fn(obj.seed_hashed);
  fn(obj.gamemode);
  fn(obj.prev_gamemode);
  fn(obj.world_is_debug);
  fn(obj.world_is_flat);
  fn(obj.death_location);
  fn(obj.portal_cooldown);
  fn(obj.sea_level);
  fn(obj.enforce_secure_chat);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::login> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().is_hardcore)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().dimension_names)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().max_players)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().view_distance)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().simulation_distance)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().reduced_debug_info)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().respawn_screen)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().limited_crafting_enabled)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().dimension_type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().dimension_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().seed_hashed)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().gamemode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().prev_gamemode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().world_is_debug)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().world_is_flat)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().death_location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().portal_cooldown)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().sea_level)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().enforce_secure_chat)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::login> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().is_hardcore)>("is_hardcore");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().dimension_names)>("dimension_names");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().max_players)>("max_players");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().view_distance)>("view_distance");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().simulation_distance)>("simulation_distance");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().reduced_debug_info)>("reduced_debug_info");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().respawn_screen)>("respawn_screen");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().limited_crafting_enabled)>("limited_crafting_enabled");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().dimension_type)>("dimension_type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().dimension_name)>("dimension_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().seed_hashed)>("seed_hashed");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().gamemode)>("gamemode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().prev_gamemode)>("prev_gamemode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().world_is_debug)>("world_is_debug");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().world_is_flat)>("world_is_flat");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().death_location)>("death_location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().portal_cooldown)>("portal_cooldown");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().sea_level)>("sea_level");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::login>().enforce_secure_chat)>("enforce_secure_chat");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::login& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.is_hardcore, "is_hardcore");
  fn(obj.dimension_names, "dimension_names");
  fn(obj.max_players, "max_players");
  fn(obj.view_distance, "view_distance");
  fn(obj.simulation_distance, "simulation_distance");
  fn(obj.reduced_debug_info, "reduced_debug_info");
  fn(obj.respawn_screen, "respawn_screen");
  fn(obj.limited_crafting_enabled, "limited_crafting_enabled");
  fn(obj.dimension_type, "dimension_type");
  fn(obj.dimension_name, "dimension_name");
  fn(obj.seed_hashed, "seed_hashed");
  fn(obj.gamemode, "gamemode");
  fn(obj.prev_gamemode, "prev_gamemode");
  fn(obj.world_is_debug, "world_is_debug");
  fn(obj.world_is_flat, "world_is_flat");
  fn(obj.death_location, "death_location");
  fn(obj.portal_cooldown, "portal_cooldown");
  fn(obj.sea_level, "sea_level");
  fn(obj.enforce_secure_chat, "enforce_secure_chat");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::login& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.is_hardcore, "is_hardcore");
  fn(obj.dimension_names, "dimension_names");
  fn(obj.max_players, "max_players");
  fn(obj.view_distance, "view_distance");
  fn(obj.simulation_distance, "simulation_distance");
  fn(obj.reduced_debug_info, "reduced_debug_info");
  fn(obj.respawn_screen, "respawn_screen");
  fn(obj.limited_crafting_enabled, "limited_crafting_enabled");
  fn(obj.dimension_type, "dimension_type");
  fn(obj.dimension_name, "dimension_name");
  fn(obj.seed_hashed, "seed_hashed");
  fn(obj.gamemode, "gamemode");
  fn(obj.prev_gamemode, "prev_gamemode");
  fn(obj.world_is_debug, "world_is_debug");
  fn(obj.world_is_flat, "world_is_flat");
  fn(obj.death_location, "death_location");
  fn(obj.portal_cooldown, "portal_cooldown");
  fn(obj.sea_level, "sea_level");
  fn(obj.enforce_secure_chat, "enforce_secure_chat");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::login>() { return "copper_server::api::packets::client_bound::play::login"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::login>() { return 20; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::map_item_data::icon::type_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::map_item_data::icon::type_e>;
static constexpr inline std::array<item, 35> values = {item{"white_arrow", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::white_arrow}, item{"green_arrow", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::green_arrow}, item{"red_arrow", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::red_arrow}, item{"blue_arrow", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::blue_arrow}, item{"white_cross", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::white_cross}, item{"red_pointer", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::red_pointer}, item{"white_circle", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::white_circle}, item{"small_white_circle", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::small_white_circle}, item{"mansion", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::mansion}, item{"monument", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::monument}, item{"white_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::white_banner}, item{"orange_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::orange_banner}, item{"magenta_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::magenta_banner}, item{"light_blue_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::light_blue_banner}, item{"yellow_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::yellow_banner}, item{"lime_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::lime_banner}, item{"pink_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::pink_banner}, item{"gray_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::gray_banner}, item{"light_gray_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::light_gray_banner}, item{"cyan_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::cyan_banner}, item{"purple_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::purple_banner}, item{"blue_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::blue_banner}, item{"brown_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::brown_banner}, item{"green_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::green_banner}, item{"red_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::red_banner}, item{"black_banner", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::black_banner}, item{"treasure_marker", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::treasure_marker}, item{"desert_village", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::desert_village}, item{"plains_village", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::plains_village}, item{"savanna_village", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::savanna_village}, item{"snowy_village", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::snowy_village}, item{"taiga_village", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::taiga_village}, item{"jungle_temple", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::jungle_temple}, item{"swamp_hut", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::swamp_hut}, item{"trial_chambers", copper_server::api::packets::client_bound::play::map_item_data::icon::type_e::trial_chambers}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::map_item_data::icon::type_e>() { return "copper_server::api::packets::client_bound::play::map_item_data::icon::type_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::map_item_data::icon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
  fn(obj.x);
  fn(obj.z);
  fn(obj.dir);
  fn(obj.name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::map_item_data::icon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
  fn(obj.x);
  fn(obj.z);
  fn(obj.dir);
  fn(obj.name);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::map_item_data::icon> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().dir)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::map_item_data::icon> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().dir)>("dir");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::icon>().name)>("name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::map_item_data::icon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.dir, "dir");
  fn(obj.name, "name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::map_item_data::icon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.dir, "dir");
  fn(obj.name, "name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::map_item_data::icon>() { return "copper_server::api::packets::client_bound::play::map_item_data::icon"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::map_item_data::icon>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::map_item_data::color_patch& obj, [[maybe_unused]] FN&& fn){
  fn(obj.columns);
  fn(obj.rows);
  fn(obj.x);
  fn(obj.z);
  fn(obj.data);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::map_item_data::color_patch& obj, [[maybe_unused]] FN&& fn){
  fn(obj.columns);
  fn(obj.rows);
  fn(obj.x);
  fn(obj.z);
  fn(obj.data);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::map_item_data::color_patch> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().columns)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().rows)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().data)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::map_item_data::color_patch> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().columns)>("columns");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().rows)>("rows");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data::color_patch>().data)>("data");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::map_item_data::color_patch& obj, [[maybe_unused]] FN&& fn){
  fn(obj.columns, "columns");
  fn(obj.rows, "rows");
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.data, "data");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::map_item_data::color_patch& obj, [[maybe_unused]] FN&& fn){
  fn(obj.columns, "columns");
  fn(obj.rows, "rows");
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.data, "data");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::map_item_data::color_patch>() { return "copper_server::api::packets::client_bound::play::map_item_data::color_patch"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::map_item_data::color_patch>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::map_item_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.map_id);
  fn(obj.scale);
  fn(obj.is_locked);
  fn(obj.icons);
  fn(obj.patch);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::map_item_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.map_id);
  fn(obj.scale);
  fn(obj.is_locked);
  fn(obj.icons);
  fn(obj.patch);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::map_item_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().map_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().scale)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().is_locked)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().icons)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().patch)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::map_item_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().map_id)>("map_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().scale)>("scale");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().is_locked)>("is_locked");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().icons)>("icons");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::map_item_data>().patch)>("patch");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::map_item_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.map_id, "map_id");
  fn(obj.scale, "scale");
  fn(obj.is_locked, "is_locked");
  fn(obj.icons, "icons");
  fn(obj.patch, "patch");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::map_item_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.map_id, "map_id");
  fn(obj.scale, "scale");
  fn(obj.is_locked, "is_locked");
  fn(obj.icons, "icons");
  fn(obj.patch, "patch");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::map_item_data>() { return "copper_server::api::packets::client_bound::play::map_item_data"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::map_item_data>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id);
  fn(obj.item_count);
  fn(obj.components);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id);
  fn(obj.item_count);
  fn(obj.components);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item>().item_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item>().item_count)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item>().components)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item>().item_id)>("item_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item>().item_count)>("item_count");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item>().components)>("components");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id, "item_id");
  fn(obj.item_count, "item_count");
  fn(obj.components, "components");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id, "item_id");
  fn(obj.item_count, "item_count");
  fn(obj.components, "components");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item>() { return "copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::merchant_offers::trade::trade_item>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::merchant_offers::trade& obj, [[maybe_unused]] FN&& fn){
  fn(obj.input_0);
  fn(obj.output);
  fn(obj.input_1);
  fn(obj.trade_disabled);
  fn(obj.trade_uses);
  fn(obj.max_trade_uses);
  fn(obj.xp);
  fn(obj.special_price);
  fn(obj.price_multiplier);
  fn(obj.demand);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::merchant_offers::trade& obj, [[maybe_unused]] FN&& fn){
  fn(obj.input_0);
  fn(obj.output);
  fn(obj.input_1);
  fn(obj.trade_disabled);
  fn(obj.trade_uses);
  fn(obj.max_trade_uses);
  fn(obj.xp);
  fn(obj.special_price);
  fn(obj.price_multiplier);
  fn(obj.demand);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::merchant_offers::trade> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().input_0)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().output)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().input_1)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().trade_disabled)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().trade_uses)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().max_trade_uses)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().xp)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().special_price)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().price_multiplier)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().demand)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::merchant_offers::trade> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().input_0)>("input_0");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().output)>("output");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().input_1)>("input_1");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().trade_disabled)>("trade_disabled");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().trade_uses)>("trade_uses");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().max_trade_uses)>("max_trade_uses");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().xp)>("xp");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().special_price)>("special_price");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().price_multiplier)>("price_multiplier");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers::trade>().demand)>("demand");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::merchant_offers::trade& obj, [[maybe_unused]] FN&& fn){
  fn(obj.input_0, "input_0");
  fn(obj.output, "output");
  fn(obj.input_1, "input_1");
  fn(obj.trade_disabled, "trade_disabled");
  fn(obj.trade_uses, "trade_uses");
  fn(obj.max_trade_uses, "max_trade_uses");
  fn(obj.xp, "xp");
  fn(obj.special_price, "special_price");
  fn(obj.price_multiplier, "price_multiplier");
  fn(obj.demand, "demand");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::merchant_offers::trade& obj, [[maybe_unused]] FN&& fn){
  fn(obj.input_0, "input_0");
  fn(obj.output, "output");
  fn(obj.input_1, "input_1");
  fn(obj.trade_disabled, "trade_disabled");
  fn(obj.trade_uses, "trade_uses");
  fn(obj.max_trade_uses, "max_trade_uses");
  fn(obj.xp, "xp");
  fn(obj.special_price, "special_price");
  fn(obj.price_multiplier, "price_multiplier");
  fn(obj.demand, "demand");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::merchant_offers::trade>() { return "copper_server::api::packets::client_bound::play::merchant_offers::trade"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::merchant_offers::trade>() { return 10; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::merchant_offers& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.trades);
  fn(obj.villager_level);
  fn(obj.experience);
  fn(obj.is_regular_villager);
  fn(obj.can_restock);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::merchant_offers& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.trades);
  fn(obj.villager_level);
  fn(obj.experience);
  fn(obj.is_regular_villager);
  fn(obj.can_restock);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::merchant_offers> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().window_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().trades)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().villager_level)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().experience)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().is_regular_villager)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().can_restock)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::merchant_offers> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().window_id)>("window_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().trades)>("trades");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().villager_level)>("villager_level");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().experience)>("experience");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().is_regular_villager)>("is_regular_villager");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::merchant_offers>().can_restock)>("can_restock");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::merchant_offers& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.trades, "trades");
  fn(obj.villager_level, "villager_level");
  fn(obj.experience, "experience");
  fn(obj.is_regular_villager, "is_regular_villager");
  fn(obj.can_restock, "can_restock");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::merchant_offers& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.trades, "trades");
  fn(obj.villager_level, "villager_level");
  fn(obj.experience, "experience");
  fn(obj.is_regular_villager, "is_regular_villager");
  fn(obj.can_restock, "can_restock");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::merchant_offers>() { return "copper_server::api::packets::client_bound::play::merchant_offers"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::merchant_offers>() { return 6; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::move_entity_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.delta_x);
  fn(obj.delta_y);
  fn(obj.delta_z);
  fn(obj.on_ground);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_entity_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.delta_x);
  fn(obj.delta_y);
  fn(obj.delta_z);
  fn(obj.on_ground);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::move_entity_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().delta_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().delta_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().delta_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().on_ground)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::move_entity_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().delta_x)>("delta_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().delta_y)>("delta_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().delta_z)>("delta_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos>().on_ground)>("on_ground");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::move_entity_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.delta_x, "delta_x");
  fn(obj.delta_y, "delta_y");
  fn(obj.delta_z, "delta_z");
  fn(obj.on_ground, "on_ground");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_entity_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.delta_x, "delta_x");
  fn(obj.delta_y, "delta_y");
  fn(obj.delta_z, "delta_z");
  fn(obj.on_ground, "on_ground");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::move_entity_pos>() { return "copper_server::api::packets::client_bound::play::move_entity_pos"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::move_entity_pos>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::move_entity_pos_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.delta_x);
  fn(obj.delta_y);
  fn(obj.delta_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.on_ground);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_entity_pos_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.delta_x);
  fn(obj.delta_y);
  fn(obj.delta_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.on_ground);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::move_entity_pos_rot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().delta_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().delta_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().delta_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().on_ground)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::move_entity_pos_rot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().delta_x)>("delta_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().delta_y)>("delta_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().delta_z)>("delta_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_pos_rot>().on_ground)>("on_ground");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::move_entity_pos_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.delta_x, "delta_x");
  fn(obj.delta_y, "delta_y");
  fn(obj.delta_z, "delta_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.on_ground, "on_ground");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_entity_pos_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.delta_x, "delta_x");
  fn(obj.delta_y, "delta_y");
  fn(obj.delta_z, "delta_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.on_ground, "on_ground");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::move_entity_pos_rot>() { return "copper_server::api::packets::client_bound::play::move_entity_pos_rot"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::move_entity_pos_rot>() { return 7; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::move_minecart_along_track::step& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.weight);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_minecart_along_track::step& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.weight);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::move_minecart_along_track::step> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().velocity_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().velocity_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().velocity_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().weight)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::move_minecart_along_track::step> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().velocity_x)>("velocity_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().velocity_y)>("velocity_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().velocity_z)>("velocity_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>().weight)>("weight");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::move_minecart_along_track::step& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.weight, "weight");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_minecart_along_track::step& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.weight, "weight");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>() { return "copper_server::api::packets::client_bound::play::move_minecart_along_track::step"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::move_minecart_along_track::step>() { return 9; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::move_minecart_along_track& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.steps);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_minecart_along_track& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.steps);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::move_minecart_along_track> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track>().steps)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::move_minecart_along_track> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_minecart_along_track>().steps)>("steps");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::move_minecart_along_track& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.steps, "steps");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_minecart_along_track& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.steps, "steps");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::move_minecart_along_track>() { return "copper_server::api::packets::client_bound::play::move_minecart_along_track"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::move_minecart_along_track>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::move_entity_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.on_ground);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_entity_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.on_ground);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::move_entity_rot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_rot>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_rot>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_rot>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_rot>().on_ground)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::move_entity_rot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_rot>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_rot>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_rot>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_entity_rot>().on_ground)>("on_ground");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::move_entity_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.on_ground, "on_ground");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_entity_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.on_ground, "on_ground");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::move_entity_rot>() { return "copper_server::api::packets::client_bound::play::move_entity_rot"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::move_entity_rot>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::move_vehicle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.yaw);
  fn(obj.pitch);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_vehicle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.yaw);
  fn(obj.pitch);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::move_vehicle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().pitch)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::move_vehicle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::move_vehicle>().pitch)>("pitch");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::move_vehicle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::move_vehicle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::move_vehicle>() { return "copper_server::api::packets::client_bound::play::move_vehicle"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::move_vehicle>() { return 5; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::open_book::hand_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::open_book::hand_e>;
static constexpr inline std::array<item, 2> values = {item{"main", copper_server::api::packets::client_bound::play::open_book::hand_e::main}, item{"off", copper_server::api::packets::client_bound::play::open_book::hand_e::off}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::open_book::hand_e>() { return "copper_server::api::packets::client_bound::play::open_book::hand_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::open_book& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::open_book& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::open_book> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_book>().hand)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::open_book> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_book>().hand)>("hand");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::open_book& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::open_book& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::open_book>() { return "copper_server::api::packets::client_bound::play::open_book"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::open_book>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::open_screen& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.window_type);
  fn(obj.window_title);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::open_screen& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.window_type);
  fn(obj.window_title);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::open_screen> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_screen>().window_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_screen>().window_type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_screen>().window_title)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::open_screen> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_screen>().window_id)>("window_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_screen>().window_type)>("window_type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_screen>().window_title)>("window_title");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::open_screen& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.window_type, "window_type");
  fn(obj.window_title, "window_title");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::open_screen& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.window_type, "window_type");
  fn(obj.window_title, "window_title");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::open_screen>() { return "copper_server::api::packets::client_bound::play::open_screen"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::open_screen>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::open_sign_editor& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.is_front_text);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::open_sign_editor& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.is_front_text);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::open_sign_editor> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_sign_editor>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_sign_editor>().is_front_text)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::open_sign_editor> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_sign_editor>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::open_sign_editor>().is_front_text)>("is_front_text");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::open_sign_editor& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.is_front_text, "is_front_text");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::open_sign_editor& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.is_front_text, "is_front_text");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::open_sign_editor>() { return "copper_server::api::packets::client_bound::play::open_sign_editor"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::open_sign_editor>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::ping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::ping>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::ping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::ping>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::ping>() { return "copper_server::api::packets::client_bound::play::ping"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::ping>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::pong_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::pong_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::pong_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::pong_response>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::pong_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::pong_response>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::pong_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::pong_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::pong_response>() { return "copper_server::api::packets::client_bound::play::pong_response"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::pong_response>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::place_ghost_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.display);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::place_ghost_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.display);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::place_ghost_recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::place_ghost_recipe>().window_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::place_ghost_recipe>().display)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::place_ghost_recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::place_ghost_recipe>().window_id)>("window_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::place_ghost_recipe>().display)>("display");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::place_ghost_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.display, "display");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::place_ghost_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.display, "display");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::place_ghost_recipe>() { return "copper_server::api::packets::client_bound::play::place_ghost_recipe"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::place_ghost_recipe>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::player_abilities::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::player_abilities::flags_f>;
static constexpr inline std::array<item, 4> values = {item{"invulnerable", copper_server::api::packets::client_bound::play::player_abilities::flags_f::invulnerable}, item{"flying", copper_server::api::packets::client_bound::play::player_abilities::flags_f::flying}, item{"allow_flying", copper_server::api::packets::client_bound::play::player_abilities::flags_f::allow_flying}, item{"creative_mode", copper_server::api::packets::client_bound::play::player_abilities::flags_f::creative_mode}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_abilities::flags_f>() { return "copper_server::api::packets::client_bound::play::player_abilities::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_abilities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
  fn(obj.flying_speed);
  fn(obj.fov_modifier);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_abilities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
  fn(obj.flying_speed);
  fn(obj.fov_modifier);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_abilities> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_abilities>().flags)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_abilities>().flying_speed)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_abilities>().fov_modifier)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_abilities> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_abilities>().flags)>("flags");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_abilities>().flying_speed)>("flying_speed");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_abilities>().fov_modifier)>("fov_modifier");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_abilities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
  fn(obj.flying_speed, "flying_speed");
  fn(obj.fov_modifier, "fov_modifier");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_abilities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
  fn(obj.flying_speed, "flying_speed");
  fn(obj.fov_modifier, "fov_modifier");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_abilities>() { return "copper_server::api::packets::client_bound::play::player_abilities"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_abilities>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat::previous_message& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message_id_or_signature);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat::previous_message& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message_id_or_signature);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_chat::previous_message> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat::previous_message>().message_id_or_signature)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_chat::previous_message> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat::previous_message>().message_id_or_signature)>("message_id_or_signature");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat::previous_message& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message_id_or_signature, "message_id_or_signature");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat::previous_message& obj, [[maybe_unused]] FN&& fn){
  fn(obj.message_id_or_signature, "message_id_or_signature");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_chat::previous_message>() { return "copper_server::api::packets::client_bound::play::player_chat::previous_message"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_chat::previous_message>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat::no_filter& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat::no_filter& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_chat::no_filter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_chat::no_filter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat::no_filter& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat::no_filter& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_chat::no_filter>() { return "copper_server::api::packets::client_bound::play::player_chat::no_filter"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_chat::no_filter>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat::fully_filtered& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat::fully_filtered& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_chat::fully_filtered> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_chat::fully_filtered> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat::fully_filtered& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat::fully_filtered& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_chat::fully_filtered>() { return "copper_server::api::packets::client_bound::play::player_chat::fully_filtered"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_chat::fully_filtered>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat::partially_filtered& obj, [[maybe_unused]] FN&& fn){
  fn(obj.filtered_characters);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat::partially_filtered& obj, [[maybe_unused]] FN&& fn){
  fn(obj.filtered_characters);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_chat::partially_filtered> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat::partially_filtered>().filtered_characters)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_chat::partially_filtered> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat::partially_filtered>().filtered_characters)>("filtered_characters");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat::partially_filtered& obj, [[maybe_unused]] FN&& fn){
  fn(obj.filtered_characters, "filtered_characters");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat::partially_filtered& obj, [[maybe_unused]] FN&& fn){
  fn(obj.filtered_characters, "filtered_characters");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_chat::partially_filtered>() { return "copper_server::api::packets::client_bound::play::player_chat::partially_filtered"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_chat::partially_filtered>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.global_index);
  fn(obj.sender);
  fn(obj.index);
  fn(obj.signature);
  fn(obj.message);
  fn(obj.timestamp);
  fn(obj.salt);
  fn(obj.previous_messages);
  fn(obj.unsigned_content);
  fn(obj.filter);
  fn(obj.sender_name);
  fn(obj.target_name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.global_index);
  fn(obj.sender);
  fn(obj.index);
  fn(obj.signature);
  fn(obj.message);
  fn(obj.timestamp);
  fn(obj.salt);
  fn(obj.previous_messages);
  fn(obj.unsigned_content);
  fn(obj.filter);
  fn(obj.sender_name);
  fn(obj.target_name);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().global_index)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().sender)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().index)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().signature)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().message)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().timestamp)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().salt)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().previous_messages)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().unsigned_content)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().filter)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().sender_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().target_name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().global_index)>("global_index");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().sender)>("sender");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().index)>("index");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().signature)>("signature");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().message)>("message");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().timestamp)>("timestamp");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().salt)>("salt");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().previous_messages)>("previous_messages");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().unsigned_content)>("unsigned_content");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().filter)>("filter");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().sender_name)>("sender_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_chat>().target_name)>("target_name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.global_index, "global_index");
  fn(obj.sender, "sender");
  fn(obj.index, "index");
  fn(obj.signature, "signature");
  fn(obj.message, "message");
  fn(obj.timestamp, "timestamp");
  fn(obj.salt, "salt");
  fn(obj.previous_messages, "previous_messages");
  fn(obj.unsigned_content, "unsigned_content");
  fn(obj.filter, "filter");
  fn(obj.sender_name, "sender_name");
  fn(obj.target_name, "target_name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.global_index, "global_index");
  fn(obj.sender, "sender");
  fn(obj.index, "index");
  fn(obj.signature, "signature");
  fn(obj.message, "message");
  fn(obj.timestamp, "timestamp");
  fn(obj.salt, "salt");
  fn(obj.previous_messages, "previous_messages");
  fn(obj.unsigned_content, "unsigned_content");
  fn(obj.filter, "filter");
  fn(obj.sender_name, "sender_name");
  fn(obj.target_name, "target_name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_chat>() { return "copper_server::api::packets::client_bound::play::player_chat"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_chat>() { return 12; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_combat_end& obj, [[maybe_unused]] FN&& fn){
  fn(obj.duration);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_combat_end& obj, [[maybe_unused]] FN&& fn){
  fn(obj.duration);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_combat_end> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_combat_end>().duration)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_combat_end> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_combat_end>().duration)>("duration");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_combat_end& obj, [[maybe_unused]] FN&& fn){
  fn(obj.duration, "duration");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_combat_end& obj, [[maybe_unused]] FN&& fn){
  fn(obj.duration, "duration");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_combat_end>() { return "copper_server::api::packets::client_bound::play::player_combat_end"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_combat_end>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_combat_enter& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_combat_enter& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_combat_enter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_combat_enter> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_combat_enter& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_combat_enter& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_combat_enter>() { return "copper_server::api::packets::client_bound::play::player_combat_enter"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_combat_enter>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_combat_kill& obj, [[maybe_unused]] FN&& fn){
  fn(obj.player_id);
  fn(obj.message);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_combat_kill& obj, [[maybe_unused]] FN&& fn){
  fn(obj.player_id);
  fn(obj.message);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_combat_kill> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_combat_kill>().player_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_combat_kill>().message)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_combat_kill> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_combat_kill>().player_id)>("player_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_combat_kill>().message)>("message");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_combat_kill& obj, [[maybe_unused]] FN&& fn){
  fn(obj.player_id, "player_id");
  fn(obj.message, "message");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_combat_kill& obj, [[maybe_unused]] FN&& fn){
  fn(obj.player_id, "player_id");
  fn(obj.message, "message");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_combat_kill>() { return "copper_server::api::packets::client_bound::play::player_combat_kill"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_combat_kill>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_remove& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuids);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_remove& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuids);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_remove>().uuids)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_remove>().uuids)>("uuids");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_remove& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuids, "uuids");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_remove& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuids, "uuids");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_remove>() { return "copper_server::api::packets::client_bound::play::player_info_remove"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_remove>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::add_player::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.value);
  fn(obj.signature);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::add_player::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.value);
  fn(obj.signature);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update::add_player::property> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player::property>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player::property>().value)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player::property>().signature)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update::add_player::property> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player::property>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player::property>().value)>("value");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player::property>().signature)>("signature");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::add_player::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.value, "value");
  fn(obj.signature, "signature");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::add_player::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.value, "value");
  fn(obj.signature, "signature");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update::add_player::property>() { return "copper_server::api::packets::client_bound::play::player_info_update::add_player::property"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update::add_player::property>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::add_player& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.properties);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::add_player& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.properties);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update::add_player> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player>().properties)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update::add_player> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::add_player>().properties)>("properties");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::add_player& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.properties, "properties");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::add_player& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.properties, "properties");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update::add_player>() { return "copper_server::api::packets::client_bound::play::player_info_update::add_player"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update::add_player>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::initialize_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chat_session_id);
  fn(obj.pub_key_expiries_timestamp);
  fn(obj.public_key);
  fn(obj.public_signature);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::initialize_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chat_session_id);
  fn(obj.pub_key_expiries_timestamp);
  fn(obj.public_key);
  fn(obj.public_signature);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>().chat_session_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>().pub_key_expiries_timestamp)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>().public_key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>().public_signature)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>().chat_session_id)>("chat_session_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>().pub_key_expiries_timestamp)>("pub_key_expiries_timestamp");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>().public_key)>("public_key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>().public_signature)>("public_signature");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::initialize_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chat_session_id, "chat_session_id");
  fn(obj.pub_key_expiries_timestamp, "pub_key_expiries_timestamp");
  fn(obj.public_key, "public_key");
  fn(obj.public_signature, "public_signature");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::initialize_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chat_session_id, "chat_session_id");
  fn(obj.pub_key_expiries_timestamp, "pub_key_expiries_timestamp");
  fn(obj.public_key, "public_key");
  fn(obj.public_signature, "public_signature");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>() { return "copper_server::api::packets::client_bound::play::player_info_update::initialize_chat"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update::initialize_chat>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_gamemode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_gamemode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update::set_gamemode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_gamemode>().gamemode)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update::set_gamemode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_gamemode>().gamemode)>("gamemode");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_gamemode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode, "gamemode");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_gamemode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode, "gamemode");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update::set_gamemode>() { return "copper_server::api::packets::client_bound::play::player_info_update::set_gamemode"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update::set_gamemode>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::listed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.should);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::listed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.should);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update::listed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::listed>().should)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update::listed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::listed>().should)>("should");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::listed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.should, "should");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::listed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.should, "should");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update::listed>() { return "copper_server::api::packets::client_bound::play::player_info_update::listed"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update::listed>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.milliseconds);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.milliseconds);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update::set_ping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_ping>().milliseconds)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update::set_ping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_ping>().milliseconds)>("milliseconds");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.milliseconds, "milliseconds");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_ping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.milliseconds, "milliseconds");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update::set_ping>() { return "copper_server::api::packets::client_bound::play::player_info_update::set_ping"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update::set_ping>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_display_name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_display_name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update::set_display_name> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_display_name>().name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update::set_display_name> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_display_name>().name)>("name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_display_name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_display_name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update::set_display_name>() { return "copper_server::api::packets::client_bound::play::player_info_update::set_display_name"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update::set_display_name>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_list_priority& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_list_priority& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update::set_list_priority> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_list_priority>().level)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update::set_list_priority> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_list_priority>().level)>("level");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_list_priority& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level, "level");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_list_priority& obj, [[maybe_unused]] FN&& fn){
  fn(obj.level, "level");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update::set_list_priority>() { return "copper_server::api::packets::client_bound::play::player_info_update::set_list_priority"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update::set_list_priority>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible& obj, [[maybe_unused]] FN&& fn){
  fn(obj.visible);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible& obj, [[maybe_unused]] FN&& fn){
  fn(obj.visible);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible>().visible)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible>().visible)>("visible");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible& obj, [[maybe_unused]] FN&& fn){
  fn(obj.visible, "visible");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible& obj, [[maybe_unused]] FN&& fn){
  fn(obj.visible, "visible");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible>() { return "copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update::set_hat_visible>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.actions);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.actions);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_info_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update>().actions)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_info_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_info_update>().actions)>("actions");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_info_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.actions, "actions");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_info_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.actions, "actions");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_info_update>() { return "copper_server::api::packets::client_bound::play::player_info_update"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_info_update>() { return 1; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::player_look_at::using_position_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::player_look_at::using_position_e>;
static constexpr inline std::array<item, 2> values = {item{"feet", copper_server::api::packets::client_bound::play::player_look_at::using_position_e::feet}, item{"eyes", copper_server::api::packets::client_bound::play::player_look_at::using_position_e::eyes}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_look_at::using_position_e>() { return "copper_server::api::packets::client_bound::play::player_look_at::using_position_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_look_at::entity_target& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.using_position);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_look_at::entity_target& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.using_position);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_look_at::entity_target> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at::entity_target>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at::entity_target>().using_position)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_look_at::entity_target> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at::entity_target>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at::entity_target>().using_position)>("using_position");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_look_at::entity_target& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.using_position, "using_position");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_look_at::entity_target& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.using_position, "using_position");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_look_at::entity_target>() { return "copper_server::api::packets::client_bound::play::player_look_at::entity_target"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_look_at::entity_target>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_look_at& obj, [[maybe_unused]] FN&& fn){
  fn(obj.using_position);
  fn(obj.target_x);
  fn(obj.target_y);
  fn(obj.target_z);
  fn(obj.entity);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_look_at& obj, [[maybe_unused]] FN&& fn){
  fn(obj.using_position);
  fn(obj.target_x);
  fn(obj.target_y);
  fn(obj.target_z);
  fn(obj.entity);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_look_at> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().using_position)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().target_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().target_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().target_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().entity)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_look_at> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().using_position)>("using_position");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().target_x)>("target_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().target_y)>("target_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().target_z)>("target_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_look_at>().entity)>("entity");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_look_at& obj, [[maybe_unused]] FN&& fn){
  fn(obj.using_position, "using_position");
  fn(obj.target_x, "target_x");
  fn(obj.target_y, "target_y");
  fn(obj.target_z, "target_z");
  fn(obj.entity, "entity");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_look_at& obj, [[maybe_unused]] FN&& fn){
  fn(obj.using_position, "using_position");
  fn(obj.target_x, "target_x");
  fn(obj.target_y, "target_y");
  fn(obj.target_z, "target_z");
  fn(obj.entity, "entity");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_look_at>() { return "copper_server::api::packets::client_bound::play::player_look_at"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_look_at>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_position& obj, [[maybe_unused]] FN&& fn){
  fn(obj.teleport_id);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_position& obj, [[maybe_unused]] FN&& fn){
  fn(obj.teleport_id);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_position> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().teleport_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().velocity_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().velocity_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().velocity_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_position> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().teleport_id)>("teleport_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().velocity_x)>("velocity_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().velocity_y)>("velocity_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().velocity_z)>("velocity_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_position>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_position& obj, [[maybe_unused]] FN&& fn){
  fn(obj.teleport_id, "teleport_id");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_position& obj, [[maybe_unused]] FN&& fn){
  fn(obj.teleport_id, "teleport_id");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_position>() { return "copper_server::api::packets::client_bound::play::player_position"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_position>() { return 10; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::player_rotation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw);
  fn(obj.pitch);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_rotation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw);
  fn(obj.pitch);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::player_rotation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_rotation>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_rotation>().pitch)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::player_rotation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_rotation>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::player_rotation>().pitch)>("pitch");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::player_rotation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::player_rotation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::player_rotation>() { return "copper_server::api::packets::client_bound::play::player_rotation"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::player_rotation>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::recipe_book_add::recipe::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::recipe_book_add::recipe::flags_f>;
static constexpr inline std::array<item, 2> values = {item{"show_notification", copper_server::api::packets::client_bound::play::recipe_book_add::recipe::flags_f::show_notification}, item{"highlight_as_new", copper_server::api::packets::client_bound::play::recipe_book_add::recipe::flags_f::highlight_as_new}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::recipe_book_add::recipe::flags_f>() { return "copper_server::api::packets::client_bound::play::recipe_book_add::recipe::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::recipe_book_add::recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_id);
  fn(obj.display);
  fn(obj.group_id);
  fn(obj.category_id);
  fn(obj.ingredients);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::recipe_book_add::recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_id);
  fn(obj.display);
  fn(obj.group_id);
  fn(obj.category_id);
  fn(obj.ingredients);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::recipe_book_add::recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().recipe_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().display)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().group_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().category_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().ingredients)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::recipe_book_add::recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().recipe_id)>("recipe_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().display)>("display");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().group_id)>("group_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().category_id)>("category_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().ingredients)>("ingredients");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::recipe_book_add::recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_id, "recipe_id");
  fn(obj.display, "display");
  fn(obj.group_id, "group_id");
  fn(obj.category_id, "category_id");
  fn(obj.ingredients, "ingredients");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::recipe_book_add::recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_id, "recipe_id");
  fn(obj.display, "display");
  fn(obj.group_id, "group_id");
  fn(obj.category_id, "category_id");
  fn(obj.ingredients, "ingredients");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>() { return "copper_server::api::packets::client_bound::play::recipe_book_add::recipe"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::recipe_book_add::recipe>() { return 6; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::recipe_book_add& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipes);
  fn(obj.replace);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::recipe_book_add& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipes);
  fn(obj.replace);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::recipe_book_add> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add>().recipes)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add>().replace)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::recipe_book_add> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add>().recipes)>("recipes");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_add>().replace)>("replace");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::recipe_book_add& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipes, "recipes");
  fn(obj.replace, "replace");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::recipe_book_add& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipes, "recipes");
  fn(obj.replace, "replace");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::recipe_book_add>() { return "copper_server::api::packets::client_bound::play::recipe_book_add"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::recipe_book_add>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::recipe_book_remove& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_ids);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::recipe_book_remove& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_ids);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::recipe_book_remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_remove>().recipe_ids)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::recipe_book_remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_remove>().recipe_ids)>("recipe_ids");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::recipe_book_remove& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_ids, "recipe_ids");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::recipe_book_remove& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_ids, "recipe_ids");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::recipe_book_remove>() { return "copper_server::api::packets::client_bound::play::recipe_book_remove"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::recipe_book_remove>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::recipe_book_settings& obj, [[maybe_unused]] FN&& fn){
  fn(obj.crafting_recipe_open);
  fn(obj.crafting_recipe_filter_active);
  fn(obj.smelting_recipe_open);
  fn(obj.smelting_recipe_filter_active);
  fn(obj.blast_recipe_open);
  fn(obj.blast_recipe_filter_active);
  fn(obj.smoker_recipe_open);
  fn(obj.smoker_recipe_filter_active);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::recipe_book_settings& obj, [[maybe_unused]] FN&& fn){
  fn(obj.crafting_recipe_open);
  fn(obj.crafting_recipe_filter_active);
  fn(obj.smelting_recipe_open);
  fn(obj.smelting_recipe_filter_active);
  fn(obj.blast_recipe_open);
  fn(obj.blast_recipe_filter_active);
  fn(obj.smoker_recipe_open);
  fn(obj.smoker_recipe_filter_active);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::recipe_book_settings> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().crafting_recipe_open)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().crafting_recipe_filter_active)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().smelting_recipe_open)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().smelting_recipe_filter_active)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().blast_recipe_open)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().blast_recipe_filter_active)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().smoker_recipe_open)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().smoker_recipe_filter_active)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::recipe_book_settings> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().crafting_recipe_open)>("crafting_recipe_open");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().crafting_recipe_filter_active)>("crafting_recipe_filter_active");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().smelting_recipe_open)>("smelting_recipe_open");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().smelting_recipe_filter_active)>("smelting_recipe_filter_active");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().blast_recipe_open)>("blast_recipe_open");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().blast_recipe_filter_active)>("blast_recipe_filter_active");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().smoker_recipe_open)>("smoker_recipe_open");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::recipe_book_settings>().smoker_recipe_filter_active)>("smoker_recipe_filter_active");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::recipe_book_settings& obj, [[maybe_unused]] FN&& fn){
  fn(obj.crafting_recipe_open, "crafting_recipe_open");
  fn(obj.crafting_recipe_filter_active, "crafting_recipe_filter_active");
  fn(obj.smelting_recipe_open, "smelting_recipe_open");
  fn(obj.smelting_recipe_filter_active, "smelting_recipe_filter_active");
  fn(obj.blast_recipe_open, "blast_recipe_open");
  fn(obj.blast_recipe_filter_active, "blast_recipe_filter_active");
  fn(obj.smoker_recipe_open, "smoker_recipe_open");
  fn(obj.smoker_recipe_filter_active, "smoker_recipe_filter_active");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::recipe_book_settings& obj, [[maybe_unused]] FN&& fn){
  fn(obj.crafting_recipe_open, "crafting_recipe_open");
  fn(obj.crafting_recipe_filter_active, "crafting_recipe_filter_active");
  fn(obj.smelting_recipe_open, "smelting_recipe_open");
  fn(obj.smelting_recipe_filter_active, "smelting_recipe_filter_active");
  fn(obj.blast_recipe_open, "blast_recipe_open");
  fn(obj.blast_recipe_filter_active, "blast_recipe_filter_active");
  fn(obj.smoker_recipe_open, "smoker_recipe_open");
  fn(obj.smoker_recipe_filter_active, "smoker_recipe_filter_active");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::recipe_book_settings>() { return "copper_server::api::packets::client_bound::play::recipe_book_settings"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::recipe_book_settings>() { return 8; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::remove_entities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_ids);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::remove_entities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_ids);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::remove_entities> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::remove_entities>().entity_ids)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::remove_entities> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::remove_entities>().entity_ids)>("entity_ids");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::remove_entities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_ids, "entity_ids");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::remove_entities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_ids, "entity_ids");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::remove_entities>() { return "copper_server::api::packets::client_bound::play::remove_entities"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::remove_entities>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::remove_mob_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.effect_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::remove_mob_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.effect_id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::remove_mob_effect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::remove_mob_effect>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::remove_mob_effect>().effect_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::remove_mob_effect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::remove_mob_effect>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::remove_mob_effect>().effect_id)>("effect_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::remove_mob_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.effect_id, "effect_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::remove_mob_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.effect_id, "effect_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::remove_mob_effect>() { return "copper_server::api::packets::client_bound::play::remove_mob_effect"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::remove_mob_effect>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::reset_score& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_name);
  fn(obj.objective_name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::reset_score& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_name);
  fn(obj.objective_name);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::reset_score> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::reset_score>().entity_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::reset_score>().objective_name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::reset_score> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::reset_score>().entity_name)>("entity_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::reset_score>().objective_name)>("objective_name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::reset_score& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_name, "entity_name");
  fn(obj.objective_name, "objective_name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::reset_score& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_name, "entity_name");
  fn(obj.objective_name, "objective_name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::reset_score>() { return "copper_server::api::packets::client_bound::play::reset_score"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::reset_score>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::resource_pack_pop& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::resource_pack_pop& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::resource_pack_pop> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_pop>().uuid)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::resource_pack_pop> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_pop>().uuid)>("uuid");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::resource_pack_pop& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::resource_pack_pop& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::resource_pack_pop>() { return "copper_server::api::packets::client_bound::play::resource_pack_pop"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::resource_pack_pop>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::resource_pack_push& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.url);
  fn(obj.hash);
  fn(obj.forced);
  fn(obj.prompt_message);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::resource_pack_push& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.url);
  fn(obj.hash);
  fn(obj.forced);
  fn(obj.prompt_message);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::resource_pack_push> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().uuid)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().url)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().hash)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().forced)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().prompt_message)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::resource_pack_push> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().uuid)>("uuid");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().url)>("url");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().hash)>("hash");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().forced)>("forced");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::resource_pack_push>().prompt_message)>("prompt_message");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::resource_pack_push& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.url, "url");
  fn(obj.hash, "hash");
  fn(obj.forced, "forced");
  fn(obj.prompt_message, "prompt_message");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::resource_pack_push& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.url, "url");
  fn(obj.hash, "hash");
  fn(obj.forced, "forced");
  fn(obj.prompt_message, "prompt_message");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::resource_pack_push>() { return "copper_server::api::packets::client_bound::play::resource_pack_push"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::resource_pack_push>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::respawn::death_location_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dimension_name);
  fn(obj.location);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::respawn::death_location_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dimension_name);
  fn(obj.location);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::respawn::death_location_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn::death_location_t>().dimension_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn::death_location_t>().location)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::respawn::death_location_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn::death_location_t>().dimension_name)>("dimension_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn::death_location_t>().location)>("location");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::respawn::death_location_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dimension_name, "dimension_name");
  fn(obj.location, "location");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::respawn::death_location_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dimension_name, "dimension_name");
  fn(obj.location, "location");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::respawn::death_location_t>() { return "copper_server::api::packets::client_bound::play::respawn::death_location_t"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::respawn::death_location_t>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::respawn::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::respawn::flags_f>;
static constexpr inline std::array<item, 2> values = {item{"keep_attributes", copper_server::api::packets::client_bound::play::respawn::flags_f::keep_attributes}, item{"keep_metadata", copper_server::api::packets::client_bound::play::respawn::flags_f::keep_metadata}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::respawn::flags_f>() { return "copper_server::api::packets::client_bound::play::respawn::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::respawn& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dimension_type);
  fn(obj.dimension_name);
  fn(obj.seed_hashed);
  fn(obj.gamemode);
  fn(obj.previous_gamemode);
  fn(obj.is_debug);
  fn(obj.is_flat);
  fn(obj.death_location);
  fn(obj.portal_cooldown);
  fn(obj.sea_level);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::respawn& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dimension_type);
  fn(obj.dimension_name);
  fn(obj.seed_hashed);
  fn(obj.gamemode);
  fn(obj.previous_gamemode);
  fn(obj.is_debug);
  fn(obj.is_flat);
  fn(obj.death_location);
  fn(obj.portal_cooldown);
  fn(obj.sea_level);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::respawn> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().dimension_type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().dimension_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().seed_hashed)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().gamemode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().previous_gamemode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().is_debug)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().is_flat)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().death_location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().portal_cooldown)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().sea_level)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::respawn> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().dimension_type)>("dimension_type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().dimension_name)>("dimension_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().seed_hashed)>("seed_hashed");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().gamemode)>("gamemode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().previous_gamemode)>("previous_gamemode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().is_debug)>("is_debug");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().is_flat)>("is_flat");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().death_location)>("death_location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().portal_cooldown)>("portal_cooldown");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().sea_level)>("sea_level");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::respawn>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::respawn& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dimension_type, "dimension_type");
  fn(obj.dimension_name, "dimension_name");
  fn(obj.seed_hashed, "seed_hashed");
  fn(obj.gamemode, "gamemode");
  fn(obj.previous_gamemode, "previous_gamemode");
  fn(obj.is_debug, "is_debug");
  fn(obj.is_flat, "is_flat");
  fn(obj.death_location, "death_location");
  fn(obj.portal_cooldown, "portal_cooldown");
  fn(obj.sea_level, "sea_level");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::respawn& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dimension_type, "dimension_type");
  fn(obj.dimension_name, "dimension_name");
  fn(obj.seed_hashed, "seed_hashed");
  fn(obj.gamemode, "gamemode");
  fn(obj.previous_gamemode, "previous_gamemode");
  fn(obj.is_debug, "is_debug");
  fn(obj.is_flat, "is_flat");
  fn(obj.death_location, "death_location");
  fn(obj.portal_cooldown, "portal_cooldown");
  fn(obj.sea_level, "sea_level");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::respawn>() { return "copper_server::api::packets::client_bound::play::respawn"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::respawn>() { return 11; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::rotate_head& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.head_yaw);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::rotate_head& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.head_yaw);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::rotate_head> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::rotate_head>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::rotate_head>().head_yaw)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::rotate_head> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::rotate_head>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::rotate_head>().head_yaw)>("head_yaw");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::rotate_head& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.head_yaw, "head_yaw");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::rotate_head& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.head_yaw, "head_yaw");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::rotate_head>() { return "copper_server::api::packets::client_bound::play::rotate_head"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::rotate_head>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::section_blocks_update::position_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.y);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::section_blocks_update::position_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.y);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::section_blocks_update::position_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::position_t>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::position_t>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::position_t>().y)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::section_blocks_update::position_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::position_t>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::position_t>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::position_t>().y)>("y");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::section_blocks_update::position_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.y, "y");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::section_blocks_update::position_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.y, "y");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::section_blocks_update::position_t>() { return "copper_server::api::packets::client_bound::play::section_blocks_update::position_t"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::section_blocks_update::position_t>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::section_blocks_update::block_entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_state);
  fn(obj.local_x);
  fn(obj.local_z);
  fn(obj.local_y);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::section_blocks_update::block_entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_state);
  fn(obj.local_x);
  fn(obj.local_z);
  fn(obj.local_y);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>().block_state)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>().local_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>().local_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>().local_y)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>().block_state)>("block_state");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>().local_x)>("local_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>().local_z)>("local_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>().local_y)>("local_y");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::section_blocks_update::block_entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_state, "block_state");
  fn(obj.local_x, "local_x");
  fn(obj.local_z, "local_z");
  fn(obj.local_y, "local_y");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::section_blocks_update::block_entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_state, "block_state");
  fn(obj.local_x, "local_x");
  fn(obj.local_z, "local_z");
  fn(obj.local_y, "local_y");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>() { return "copper_server::api::packets::client_bound::play::section_blocks_update::block_entry"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::section_blocks_update::block_entry>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::section_blocks_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.position);
  fn(obj.block);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::section_blocks_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.position);
  fn(obj.block);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::section_blocks_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update>().position)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update>().block)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::section_blocks_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update>().position)>("position");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::section_blocks_update>().block)>("block");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::section_blocks_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.position, "position");
  fn(obj.block, "block");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::section_blocks_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.position, "position");
  fn(obj.block, "block");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::section_blocks_update>() { return "copper_server::api::packets::client_bound::play::section_blocks_update"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::section_blocks_update>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::select_advancements_tab& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::select_advancements_tab& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::select_advancements_tab> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::select_advancements_tab>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::select_advancements_tab> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::select_advancements_tab>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::select_advancements_tab& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::select_advancements_tab& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::select_advancements_tab>() { return "copper_server::api::packets::client_bound::play::select_advancements_tab"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::select_advancements_tab>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::server_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.motd);
  fn(obj.icon_png);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::server_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.motd);
  fn(obj.icon_png);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::server_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_data>().motd)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_data>().icon_png)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::server_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_data>().motd)>("motd");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_data>().icon_png)>("icon_png");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::server_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.motd, "motd");
  fn(obj.icon_png, "icon_png");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::server_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.motd, "motd");
  fn(obj.icon_png, "icon_png");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::server_data>() { return "copper_server::api::packets::client_bound::play::server_data"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::server_data>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_action_bar_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_action_bar_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_action_bar_text> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_action_bar_text>().text)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_action_bar_text> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_action_bar_text>().text)>("text");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_action_bar_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text, "text");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_action_bar_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text, "text");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_action_bar_text>() { return "copper_server::api::packets::client_bound::play::set_action_bar_text"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_action_bar_text>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_center& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_center& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_border_center> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_center>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_center>().z)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_border_center> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_center>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_center>().z)>("z");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_center& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_center& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_border_center>() { return "copper_server::api::packets::client_bound::play::set_border_center"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_border_center>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_lerp_size& obj, [[maybe_unused]] FN&& fn){
  fn(obj.old_diameter);
  fn(obj.new_diameter);
  fn(obj.speed_milliseconds);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_lerp_size& obj, [[maybe_unused]] FN&& fn){
  fn(obj.old_diameter);
  fn(obj.new_diameter);
  fn(obj.speed_milliseconds);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_border_lerp_size> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_lerp_size>().old_diameter)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_lerp_size>().new_diameter)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_lerp_size>().speed_milliseconds)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_border_lerp_size> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_lerp_size>().old_diameter)>("old_diameter");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_lerp_size>().new_diameter)>("new_diameter");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_lerp_size>().speed_milliseconds)>("speed_milliseconds");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_lerp_size& obj, [[maybe_unused]] FN&& fn){
  fn(obj.old_diameter, "old_diameter");
  fn(obj.new_diameter, "new_diameter");
  fn(obj.speed_milliseconds, "speed_milliseconds");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_lerp_size& obj, [[maybe_unused]] FN&& fn){
  fn(obj.old_diameter, "old_diameter");
  fn(obj.new_diameter, "new_diameter");
  fn(obj.speed_milliseconds, "speed_milliseconds");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_border_lerp_size>() { return "copper_server::api::packets::client_bound::play::set_border_lerp_size"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_border_lerp_size>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_size& obj, [[maybe_unused]] FN&& fn){
  fn(obj.diameter);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_size& obj, [[maybe_unused]] FN&& fn){
  fn(obj.diameter);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_border_size> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_size>().diameter)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_border_size> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_size>().diameter)>("diameter");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_size& obj, [[maybe_unused]] FN&& fn){
  fn(obj.diameter, "diameter");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_size& obj, [[maybe_unused]] FN&& fn){
  fn(obj.diameter, "diameter");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_border_size>() { return "copper_server::api::packets::client_bound::play::set_border_size"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_border_size>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_warning_delay& obj, [[maybe_unused]] FN&& fn){
  fn(obj.warn_time);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_warning_delay& obj, [[maybe_unused]] FN&& fn){
  fn(obj.warn_time);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_border_warning_delay> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_warning_delay>().warn_time)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_border_warning_delay> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_warning_delay>().warn_time)>("warn_time");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_warning_delay& obj, [[maybe_unused]] FN&& fn){
  fn(obj.warn_time, "warn_time");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_warning_delay& obj, [[maybe_unused]] FN&& fn){
  fn(obj.warn_time, "warn_time");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_border_warning_delay>() { return "copper_server::api::packets::client_bound::play::set_border_warning_delay"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_border_warning_delay>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_warning_distance& obj, [[maybe_unused]] FN&& fn){
  fn(obj.meters);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_warning_distance& obj, [[maybe_unused]] FN&& fn){
  fn(obj.meters);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_border_warning_distance> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_warning_distance>().meters)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_border_warning_distance> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_border_warning_distance>().meters)>("meters");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_border_warning_distance& obj, [[maybe_unused]] FN&& fn){
  fn(obj.meters, "meters");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_border_warning_distance& obj, [[maybe_unused]] FN&& fn){
  fn(obj.meters, "meters");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_border_warning_distance>() { return "copper_server::api::packets::client_bound::play::set_border_warning_distance"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_border_warning_distance>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_camera& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_camera& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_camera> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_camera>().entity_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_camera> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_camera>().entity_id)>("entity_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_camera& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_camera& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_camera>() { return "copper_server::api::packets::client_bound::play::set_camera"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_camera>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_chunk_cache_center& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_chunk_cache_center& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_chunk_cache_center> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_chunk_cache_center>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_chunk_cache_center>().z)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_chunk_cache_center> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_chunk_cache_center>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_chunk_cache_center>().z)>("z");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_chunk_cache_center& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_chunk_cache_center& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_chunk_cache_center>() { return "copper_server::api::packets::client_bound::play::set_chunk_cache_center"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_chunk_cache_center>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_chunk_cache_radius& obj, [[maybe_unused]] FN&& fn){
  fn(obj.distance);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_chunk_cache_radius& obj, [[maybe_unused]] FN&& fn){
  fn(obj.distance);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_chunk_cache_radius> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_chunk_cache_radius>().distance)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_chunk_cache_radius> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_chunk_cache_radius>().distance)>("distance");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_chunk_cache_radius& obj, [[maybe_unused]] FN&& fn){
  fn(obj.distance, "distance");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_chunk_cache_radius& obj, [[maybe_unused]] FN&& fn){
  fn(obj.distance, "distance");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_chunk_cache_radius>() { return "copper_server::api::packets::client_bound::play::set_chunk_cache_radius"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_chunk_cache_radius>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_cursor_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_cursor_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_cursor_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_cursor_item>().item)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_cursor_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_cursor_item>().item)>("item");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_cursor_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item, "item");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_cursor_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item, "item");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_cursor_item>() { return "copper_server::api::packets::client_bound::play::set_cursor_item"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_cursor_item>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_default_spawn_position& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.angle);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_default_spawn_position& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.angle);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_default_spawn_position> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_default_spawn_position>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_default_spawn_position>().angle)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_default_spawn_position> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_default_spawn_position>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_default_spawn_position>().angle)>("angle");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_default_spawn_position& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.angle, "angle");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_default_spawn_position& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.angle, "angle");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_default_spawn_position>() { return "copper_server::api::packets::client_bound::play::set_default_spawn_position"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_default_spawn_position>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::set_display_objective::position_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::set_display_objective::position_e>;
static constexpr inline std::array<item, 19> values = {item{"list", copper_server::api::packets::client_bound::play::set_display_objective::position_e::list}, item{"sidebar", copper_server::api::packets::client_bound::play::set_display_objective::position_e::sidebar}, item{"below_name", copper_server::api::packets::client_bound::play::set_display_objective::position_e::below_name}, item{"team_white", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_white}, item{"team_orange", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_orange}, item{"team_magenta", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_magenta}, item{"team_light_blue", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_light_blue}, item{"team_yellow", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_yellow}, item{"team_lime", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_lime}, item{"team_pink", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_pink}, item{"team_gray", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_gray}, item{"team_light_gray", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_light_gray}, item{"team_cyan", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_cyan}, item{"team_purple", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_purple}, item{"team_blue", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_blue}, item{"team_brown", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_brown}, item{"team_green", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_green}, item{"team_red", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_red}, item{"team_black", copper_server::api::packets::client_bound::play::set_display_objective::position_e::team_black}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_display_objective::position_e>() { return "copper_server::api::packets::client_bound::play::set_display_objective::position_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_display_objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.position);
  fn(obj.name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_display_objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.position);
  fn(obj.name);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_display_objective> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_display_objective>().position)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_display_objective>().name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_display_objective> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_display_objective>().position)>("position");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_display_objective>().name)>("name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_display_objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.position, "position");
  fn(obj.name, "name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_display_objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.position, "position");
  fn(obj.name, "name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_display_objective>() { return "copper_server::api::packets::client_bound::play::set_display_objective"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_display_objective>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_entity_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.metadata);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_entity_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.metadata);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_entity_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_data>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_data>().metadata)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_entity_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_data>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_data>().metadata)>("metadata");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_entity_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.metadata, "metadata");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_entity_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.metadata, "metadata");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_entity_data>() { return "copper_server::api::packets::client_bound::play::set_entity_data"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_entity_data>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_entity_link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.attached_entity_id);
  fn(obj.holding_entity_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_entity_link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.attached_entity_id);
  fn(obj.holding_entity_id);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_entity_link> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_link>().attached_entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_link>().holding_entity_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_entity_link> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_link>().attached_entity_id)>("attached_entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_link>().holding_entity_id)>("holding_entity_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_entity_link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.attached_entity_id, "attached_entity_id");
  fn(obj.holding_entity_id, "holding_entity_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_entity_link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.attached_entity_id, "attached_entity_id");
  fn(obj.holding_entity_id, "holding_entity_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_entity_link>() { return "copper_server::api::packets::client_bound::play::set_entity_link"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_entity_link>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_entity_motion& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_entity_motion& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_entity_motion> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_motion>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_motion>().velocity_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_motion>().velocity_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_motion>().velocity_z)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_entity_motion> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_motion>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_motion>().velocity_x)>("velocity_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_motion>().velocity_y)>("velocity_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_entity_motion>().velocity_z)>("velocity_z");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_entity_motion& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_entity_motion& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_entity_motion>() { return "copper_server::api::packets::client_bound::play::set_entity_motion"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_entity_motion>() { return 4; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e>;
static constexpr inline std::array<item, 8> values = {item{"main_hand", copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e::main_hand}, item{"off_hand", copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e::off_hand}, item{"boots", copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e::boots}, item{"leggings", copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e::leggings}, item{"chestplate", copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e::chestplate}, item{"helmet", copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e::helmet}, item{"body", copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e::body}, item{"saddle", copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e::saddle}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e>() { return "copper_server::api::packets::client_bound::play::set_equipment::equipment::slot_place_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_equipment::equipment& obj, [[maybe_unused]] FN&& fn){
  fn(obj.has_next_item);
  fn(obj.slot_place);
  fn(obj.item);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_equipment::equipment& obj, [[maybe_unused]] FN&& fn){
  fn(obj.has_next_item);
  fn(obj.slot_place);
  fn(obj.item);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_equipment::equipment> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment::equipment>().has_next_item)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment::equipment>().slot_place)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment::equipment>().item)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_equipment::equipment> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment::equipment>().has_next_item)>("has_next_item");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment::equipment>().slot_place)>("slot_place");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment::equipment>().item)>("item");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_equipment::equipment& obj, [[maybe_unused]] FN&& fn){
  fn(obj.has_next_item, "has_next_item");
  fn(obj.slot_place, "slot_place");
  fn(obj.item, "item");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_equipment::equipment& obj, [[maybe_unused]] FN&& fn){
  fn(obj.has_next_item, "has_next_item");
  fn(obj.slot_place, "slot_place");
  fn(obj.item, "item");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_equipment::equipment>() { return "copper_server::api::packets::client_bound::play::set_equipment::equipment"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_equipment::equipment>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_equipment& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.equipments);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_equipment& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.equipments);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_equipment> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment>().equipments)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_equipment> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_equipment>().equipments)>("equipments");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_equipment& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.equipments, "equipments");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_equipment& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.equipments, "equipments");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_equipment>() { return "copper_server::api::packets::client_bound::play::set_equipment"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_equipment>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_experience& obj, [[maybe_unused]] FN&& fn){
  fn(obj.bar);
  fn(obj.level);
  fn(obj.total_experience);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_experience& obj, [[maybe_unused]] FN&& fn){
  fn(obj.bar);
  fn(obj.level);
  fn(obj.total_experience);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_experience> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_experience>().bar)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_experience>().level)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_experience>().total_experience)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_experience> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_experience>().bar)>("bar");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_experience>().level)>("level");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_experience>().total_experience)>("total_experience");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_experience& obj, [[maybe_unused]] FN&& fn){
  fn(obj.bar, "bar");
  fn(obj.level, "level");
  fn(obj.total_experience, "total_experience");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_experience& obj, [[maybe_unused]] FN&& fn){
  fn(obj.bar, "bar");
  fn(obj.level, "level");
  fn(obj.total_experience, "total_experience");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_experience>() { return "copper_server::api::packets::client_bound::play::set_experience"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_experience>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_health& obj, [[maybe_unused]] FN&& fn){
  fn(obj.health);
  fn(obj.food);
  fn(obj.saturation);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_health& obj, [[maybe_unused]] FN&& fn){
  fn(obj.health);
  fn(obj.food);
  fn(obj.saturation);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_health> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_health>().health)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_health>().food)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_health>().saturation)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_health> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_health>().health)>("health");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_health>().food)>("food");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_health>().saturation)>("saturation");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_health& obj, [[maybe_unused]] FN&& fn){
  fn(obj.health, "health");
  fn(obj.food, "food");
  fn(obj.saturation, "saturation");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_health& obj, [[maybe_unused]] FN&& fn){
  fn(obj.health, "health");
  fn(obj.food, "food");
  fn(obj.saturation, "saturation");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_health>() { return "copper_server::api::packets::client_bound::play::set_health"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_health>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_held_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_held_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_held_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_held_slot>().slot)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_held_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_held_slot>().slot)>("slot");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_held_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_held_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_held_slot>() { return "copper_server::api::packets::client_bound::play::set_held_slot"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_held_slot>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::blank& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::blank& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_objective::blank> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_objective::blank> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::blank& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::blank& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_objective::blank>() { return "copper_server::api::packets::client_bound::play::set_objective::blank"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_objective::blank>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::styled& obj, [[maybe_unused]] FN&& fn){
  fn(obj.styling);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::styled& obj, [[maybe_unused]] FN&& fn){
  fn(obj.styling);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_objective::styled> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::styled>().styling)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_objective::styled> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::styled>().styling)>("styling");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::styled& obj, [[maybe_unused]] FN&& fn){
  fn(obj.styling, "styling");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::styled& obj, [[maybe_unused]] FN&& fn){
  fn(obj.styling, "styling");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_objective::styled>() { return "copper_server::api::packets::client_bound::play::set_objective::styled"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_objective::styled>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::fixed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::fixed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_objective::fixed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::fixed>().content)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_objective::fixed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::fixed>().content)>("content");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::fixed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content, "content");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::fixed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content, "content");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_objective::fixed>() { return "copper_server::api::packets::client_bound::play::set_objective::fixed"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_objective::fixed>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::create& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.type);
  fn(obj.default_format);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::create& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.type);
  fn(obj.default_format);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_objective::create> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::create>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::create>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::create>().default_format)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_objective::create> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::create>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::create>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::create>().default_format)>("default_format");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::create& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.type, "type");
  fn(obj.default_format, "default_format");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::create& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.type, "type");
  fn(obj.default_format, "default_format");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_objective::create>() { return "copper_server::api::packets::client_bound::play::set_objective::create"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_objective::create>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::remove& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::remove& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_objective::remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_objective::remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::remove& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::remove& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_objective::remove>() { return "copper_server::api::packets::client_bound::play::set_objective::remove"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_objective::remove>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.type);
  fn(obj.default_format);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.type);
  fn(obj.default_format);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_objective::update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::update>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::update>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::update>().default_format)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_objective::update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::update>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::update>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective::update>().default_format)>("default_format");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective::update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.type, "type");
  fn(obj.default_format, "default_format");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective::update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.type, "type");
  fn(obj.default_format, "default_format");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_objective::update>() { return "copper_server::api::packets::client_bound::play::set_objective::update"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_objective::update>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.mode);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.mode);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_objective> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective>().mode)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_objective> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_objective>().mode)>("mode");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.mode, "mode");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.mode, "mode");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_objective>() { return "copper_server::api::packets::client_bound::play::set_objective"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_objective>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_passengers& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.passengers);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_passengers& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.passengers);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_passengers> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_passengers>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_passengers>().passengers)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_passengers> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_passengers>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_passengers>().passengers)>("passengers");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_passengers& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.passengers, "passengers");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_passengers& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.passengers, "passengers");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_passengers>() { return "copper_server::api::packets::client_bound::play::set_passengers"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_passengers>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_inventory& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_inventory& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_player_inventory> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_inventory>().slot)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_player_inventory> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_inventory>().slot)>("slot");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_inventory& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_inventory& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_inventory>() { return "copper_server::api::packets::client_bound::play::set_player_inventory"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_player_inventory>() { return 1; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::set_player_team::friendly_f> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::set_player_team::friendly_f>;
static constexpr inline std::array<item, 2> values = {item{"allow_friendly_fire", copper_server::api::packets::client_bound::play::set_player_team::friendly_f::allow_friendly_fire}, item{"can_see_invisible", copper_server::api::packets::client_bound::play::set_player_team::friendly_f::can_see_invisible}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_team::friendly_f>() { return "copper_server::api::packets::client_bound::play::set_player_team::friendly_f"; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::set_player_team::name_tag_visibility_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::set_player_team::name_tag_visibility_e>;
static constexpr inline std::array<item, 4> values = {item{"always", copper_server::api::packets::client_bound::play::set_player_team::name_tag_visibility_e::always}, item{"never", copper_server::api::packets::client_bound::play::set_player_team::name_tag_visibility_e::never}, item{"hide_for_others", copper_server::api::packets::client_bound::play::set_player_team::name_tag_visibility_e::hide_for_others}, item{"hide_for_own", copper_server::api::packets::client_bound::play::set_player_team::name_tag_visibility_e::hide_for_own}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_team::name_tag_visibility_e>() { return "copper_server::api::packets::client_bound::play::set_player_team::name_tag_visibility_e"; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::set_player_team::collision_rule_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::set_player_team::collision_rule_e>;
static constexpr inline std::array<item, 4> values = {item{"always", copper_server::api::packets::client_bound::play::set_player_team::collision_rule_e::always}, item{"never", copper_server::api::packets::client_bound::play::set_player_team::collision_rule_e::never}, item{"push_for_others", copper_server::api::packets::client_bound::play::set_player_team::collision_rule_e::push_for_others}, item{"push_for_own", copper_server::api::packets::client_bound::play::set_player_team::collision_rule_e::push_for_own}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_team::collision_rule_e>() { return "copper_server::api::packets::client_bound::play::set_player_team::collision_rule_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::create& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display_name);
  fn(obj.friendly);
  fn(obj.name_tag_visibility);
  fn(obj.collision_rule);
  fn(obj.team_color);
  fn(obj.prefix);
  fn(obj.suffix);
  fn(obj.entries);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::create& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display_name);
  fn(obj.friendly);
  fn(obj.name_tag_visibility);
  fn(obj.collision_rule);
  fn(obj.team_color);
  fn(obj.prefix);
  fn(obj.suffix);
  fn(obj.entries);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_player_team::create> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().display_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().friendly)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().name_tag_visibility)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().collision_rule)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().team_color)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().prefix)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().suffix)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().entries)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_player_team::create> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().display_name)>("display_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().friendly)>("friendly");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().name_tag_visibility)>("name_tag_visibility");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().collision_rule)>("collision_rule");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().team_color)>("team_color");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().prefix)>("prefix");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().suffix)>("suffix");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::create>().entries)>("entries");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::create& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display_name, "display_name");
  fn(obj.friendly, "friendly");
  fn(obj.name_tag_visibility, "name_tag_visibility");
  fn(obj.collision_rule, "collision_rule");
  fn(obj.team_color, "team_color");
  fn(obj.prefix, "prefix");
  fn(obj.suffix, "suffix");
  fn(obj.entries, "entries");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::create& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display_name, "display_name");
  fn(obj.friendly, "friendly");
  fn(obj.name_tag_visibility, "name_tag_visibility");
  fn(obj.collision_rule, "collision_rule");
  fn(obj.team_color, "team_color");
  fn(obj.prefix, "prefix");
  fn(obj.suffix, "suffix");
  fn(obj.entries, "entries");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_team::create>() { return "copper_server::api::packets::client_bound::play::set_player_team::create"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_player_team::create>() { return 8; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::remove& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::remove& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_player_team::remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_player_team::remove> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::remove& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::remove& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_team::remove>() { return "copper_server::api::packets::client_bound::play::set_player_team::remove"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_player_team::remove>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display_name);
  fn(obj.friendly);
  fn(obj.name_tag_visibility);
  fn(obj.collision_rule);
  fn(obj.team_color);
  fn(obj.prefix);
  fn(obj.suffix);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display_name);
  fn(obj.friendly);
  fn(obj.name_tag_visibility);
  fn(obj.collision_rule);
  fn(obj.team_color);
  fn(obj.prefix);
  fn(obj.suffix);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_player_team::update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().display_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().friendly)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().name_tag_visibility)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().collision_rule)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().team_color)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().prefix)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().suffix)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_player_team::update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().display_name)>("display_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().friendly)>("friendly");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().name_tag_visibility)>("name_tag_visibility");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().collision_rule)>("collision_rule");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().team_color)>("team_color");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().prefix)>("prefix");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::update>().suffix)>("suffix");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display_name, "display_name");
  fn(obj.friendly, "friendly");
  fn(obj.name_tag_visibility, "name_tag_visibility");
  fn(obj.collision_rule, "collision_rule");
  fn(obj.team_color, "team_color");
  fn(obj.prefix, "prefix");
  fn(obj.suffix, "suffix");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.display_name, "display_name");
  fn(obj.friendly, "friendly");
  fn(obj.name_tag_visibility, "name_tag_visibility");
  fn(obj.collision_rule, "collision_rule");
  fn(obj.team_color, "team_color");
  fn(obj.prefix, "prefix");
  fn(obj.suffix, "suffix");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_team::update>() { return "copper_server::api::packets::client_bound::play::set_player_team::update"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_player_team::update>() { return 7; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::add_entries& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::add_entries& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_player_team::add_entries> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::add_entries>().entries)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_player_team::add_entries> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::add_entries>().entries)>("entries");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::add_entries& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries, "entries");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::add_entries& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries, "entries");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_team::add_entries>() { return "copper_server::api::packets::client_bound::play::set_player_team::add_entries"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_player_team::add_entries>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::remove_entries& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::remove_entries& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_player_team::remove_entries> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::remove_entries>().entries)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_player_team::remove_entries> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team::remove_entries>().entries)>("entries");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team::remove_entries& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries, "entries");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team::remove_entries& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries, "entries");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_team::remove_entries>() { return "copper_server::api::packets::client_bound::play::set_player_team::remove_entries"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_player_team::remove_entries>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.mode);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.mode);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_player_team> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team>().mode)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_player_team> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_player_team>().mode)>("mode");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_player_team& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.mode, "mode");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_player_team& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.mode, "mode");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_player_team>() { return "copper_server::api::packets::client_bound::play::set_player_team"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_player_team>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_score::blank& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_score::blank& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_score::blank> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_score::blank> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_score::blank& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_score::blank& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_score::blank>() { return "copper_server::api::packets::client_bound::play::set_score::blank"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_score::blank>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_score::styled& obj, [[maybe_unused]] FN&& fn){
  fn(obj.styling);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_score::styled& obj, [[maybe_unused]] FN&& fn){
  fn(obj.styling);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_score::styled> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score::styled>().styling)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_score::styled> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score::styled>().styling)>("styling");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_score::styled& obj, [[maybe_unused]] FN&& fn){
  fn(obj.styling, "styling");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_score::styled& obj, [[maybe_unused]] FN&& fn){
  fn(obj.styling, "styling");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_score::styled>() { return "copper_server::api::packets::client_bound::play::set_score::styled"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_score::styled>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_score::fixed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_score::fixed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_score::fixed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score::fixed>().content)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_score::fixed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score::fixed>().content)>("content");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_score::fixed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content, "content");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_score::fixed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content, "content");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_score::fixed>() { return "copper_server::api::packets::client_bound::play::set_score::fixed"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_score::fixed>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_score& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entry_name);
  fn(obj.objective_name);
  fn(obj.value);
  fn(obj.name);
  fn(obj.default_format);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_score& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entry_name);
  fn(obj.objective_name);
  fn(obj.value);
  fn(obj.name);
  fn(obj.default_format);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_score> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().entry_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().objective_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().value)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().default_format)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_score> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().entry_name)>("entry_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().objective_name)>("objective_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().value)>("value");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_score>().default_format)>("default_format");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_score& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entry_name, "entry_name");
  fn(obj.objective_name, "objective_name");
  fn(obj.value, "value");
  fn(obj.name, "name");
  fn(obj.default_format, "default_format");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_score& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entry_name, "entry_name");
  fn(obj.objective_name, "objective_name");
  fn(obj.value, "value");
  fn(obj.name, "name");
  fn(obj.default_format, "default_format");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_score>() { return "copper_server::api::packets::client_bound::play::set_score"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_score>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_simulation_distance& obj, [[maybe_unused]] FN&& fn){
  fn(obj.distance);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_simulation_distance& obj, [[maybe_unused]] FN&& fn){
  fn(obj.distance);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_simulation_distance> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_simulation_distance>().distance)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_simulation_distance> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_simulation_distance>().distance)>("distance");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_simulation_distance& obj, [[maybe_unused]] FN&& fn){
  fn(obj.distance, "distance");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_simulation_distance& obj, [[maybe_unused]] FN&& fn){
  fn(obj.distance, "distance");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_simulation_distance>() { return "copper_server::api::packets::client_bound::play::set_simulation_distance"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_simulation_distance>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_subtitle_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_subtitle_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_subtitle_text> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_subtitle_text>().text)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_subtitle_text> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_subtitle_text>().text)>("text");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_subtitle_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text, "text");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_subtitle_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text, "text");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_subtitle_text>() { return "copper_server::api::packets::client_bound::play::set_subtitle_text"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_subtitle_text>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.world_age);
  fn(obj.time_of_day);
  fn(obj.time_of_day_increment);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.world_age);
  fn(obj.time_of_day);
  fn(obj.time_of_day_increment);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_time> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_time>().world_age)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_time>().time_of_day)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_time>().time_of_day_increment)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_time> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_time>().world_age)>("world_age");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_time>().time_of_day)>("time_of_day");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_time>().time_of_day_increment)>("time_of_day_increment");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.world_age, "world_age");
  fn(obj.time_of_day, "time_of_day");
  fn(obj.time_of_day_increment, "time_of_day_increment");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.world_age, "world_age");
  fn(obj.time_of_day, "time_of_day");
  fn(obj.time_of_day_increment, "time_of_day_increment");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_time>() { return "copper_server::api::packets::client_bound::play::set_time"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_time>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_title_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_title_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_title_text> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_title_text>().text)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_title_text> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_title_text>().text)>("text");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_title_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text, "text");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_title_text& obj, [[maybe_unused]] FN&& fn){
  fn(obj.text, "text");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_title_text>() { return "copper_server::api::packets::client_bound::play::set_title_text"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_title_text>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::set_titles_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.fade_in);
  fn(obj.stay);
  fn(obj.fadeout);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_titles_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.fade_in);
  fn(obj.stay);
  fn(obj.fadeout);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::set_titles_animation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_titles_animation>().fade_in)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_titles_animation>().stay)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_titles_animation>().fadeout)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::set_titles_animation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_titles_animation>().fade_in)>("fade_in");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_titles_animation>().stay)>("stay");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::set_titles_animation>().fadeout)>("fadeout");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::set_titles_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.fade_in, "fade_in");
  fn(obj.stay, "stay");
  fn(obj.fadeout, "fadeout");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::set_titles_animation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.fade_in, "fade_in");
  fn(obj.stay, "stay");
  fn(obj.fadeout, "fadeout");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::set_titles_animation>() { return "copper_server::api::packets::client_bound::play::set_titles_animation"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::set_titles_animation>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::sound_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sound);
  fn(obj.category);
  fn(obj.entity_id);
  fn(obj.volume);
  fn(obj.pitch);
  fn(obj.seed);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::sound_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sound);
  fn(obj.category);
  fn(obj.entity_id);
  fn(obj.volume);
  fn(obj.pitch);
  fn(obj.seed);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::sound_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().sound)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().category)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().volume)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().seed)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::sound_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().sound)>("sound");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().category)>("category");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().volume)>("volume");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound_entity>().seed)>("seed");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::sound_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sound, "sound");
  fn(obj.category, "category");
  fn(obj.entity_id, "entity_id");
  fn(obj.volume, "volume");
  fn(obj.pitch, "pitch");
  fn(obj.seed, "seed");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::sound_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sound, "sound");
  fn(obj.category, "category");
  fn(obj.entity_id, "entity_id");
  fn(obj.volume, "volume");
  fn(obj.pitch, "pitch");
  fn(obj.seed, "seed");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::sound_entity>() { return "copper_server::api::packets::client_bound::play::sound_entity"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::sound_entity>() { return 6; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sound);
  fn(obj.category);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.volume);
  fn(obj.pitch);
  fn(obj.seed);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sound);
  fn(obj.category);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.volume);
  fn(obj.pitch);
  fn(obj.seed);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::sound> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().sound)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().category)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().volume)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().seed)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::sound> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().sound)>("sound");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().category)>("category");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().volume)>("volume");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::sound>().seed)>("seed");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sound, "sound");
  fn(obj.category, "category");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.volume, "volume");
  fn(obj.pitch, "pitch");
  fn(obj.seed, "seed");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sound, "sound");
  fn(obj.category, "category");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.volume, "volume");
  fn(obj.pitch, "pitch");
  fn(obj.seed, "seed");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::sound>() { return "copper_server::api::packets::client_bound::play::sound"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::sound>() { return 8; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::start_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::start_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::start_configuration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::start_configuration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::start_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::start_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::start_configuration>() { return "copper_server::api::packets::client_bound::play::start_configuration"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::start_configuration>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::stop_sound::source& obj, [[maybe_unused]] FN&& fn){
  fn(obj.source);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::stop_sound::source& obj, [[maybe_unused]] FN&& fn){
  fn(obj.source);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::stop_sound::source> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::stop_sound::source>().source)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::stop_sound::source> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::stop_sound::source>().source)>("source");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::stop_sound::source& obj, [[maybe_unused]] FN&& fn){
  fn(obj.source, "source");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::stop_sound::source& obj, [[maybe_unused]] FN&& fn){
  fn(obj.source, "source");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::stop_sound::source>() { return "copper_server::api::packets::client_bound::play::stop_sound::source"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::stop_sound::source>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::stop_sound::sound_name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::stop_sound::sound_name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::stop_sound::sound_name> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::stop_sound::sound_name>().name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::stop_sound::sound_name> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::stop_sound::sound_name>().name)>("name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::stop_sound::sound_name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::stop_sound::sound_name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::stop_sound::sound_name>() { return "copper_server::api::packets::client_bound::play::stop_sound::sound_name"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::stop_sound::sound_name>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::stop_sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::stop_sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::stop_sound> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::stop_sound>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::stop_sound> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::stop_sound>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::stop_sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::stop_sound& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::stop_sound>() { return "copper_server::api::packets::client_bound::play::stop_sound"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::stop_sound>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::store_cookie& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::store_cookie& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::store_cookie> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::store_cookie>().key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::store_cookie>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::store_cookie> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::store_cookie>().key)>("key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::store_cookie>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::store_cookie& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::store_cookie& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::store_cookie>() { return "copper_server::api::packets::client_bound::play::store_cookie"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::store_cookie>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::system_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content);
  fn(obj.is_overlay);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::system_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content);
  fn(obj.is_overlay);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::system_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::system_chat>().content)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::system_chat>().is_overlay)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::system_chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::system_chat>().content)>("content");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::system_chat>().is_overlay)>("is_overlay");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::system_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content, "content");
  fn(obj.is_overlay, "is_overlay");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::system_chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.content, "content");
  fn(obj.is_overlay, "is_overlay");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::system_chat>() { return "copper_server::api::packets::client_bound::play::system_chat"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::system_chat>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::tab_list& obj, [[maybe_unused]] FN&& fn){
  fn(obj.header);
  fn(obj.footer);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::tab_list& obj, [[maybe_unused]] FN&& fn){
  fn(obj.header);
  fn(obj.footer);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::tab_list> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::tab_list>().header)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::tab_list>().footer)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::tab_list> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::tab_list>().header)>("header");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::tab_list>().footer)>("footer");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::tab_list& obj, [[maybe_unused]] FN&& fn){
  fn(obj.header, "header");
  fn(obj.footer, "footer");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::tab_list& obj, [[maybe_unused]] FN&& fn){
  fn(obj.header, "header");
  fn(obj.footer, "footer");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::tab_list>() { return "copper_server::api::packets::client_bound::play::tab_list"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::tab_list>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id);
  fn(obj.nbt);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id);
  fn(obj.nbt);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::tag_query> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::tag_query>().tag_query_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::tag_query>().nbt)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::tag_query> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::tag_query>().tag_query_id)>("tag_query_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::tag_query>().nbt)>("nbt");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id, "tag_query_id");
  fn(obj.nbt, "nbt");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id, "tag_query_id");
  fn(obj.nbt, "nbt");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::tag_query>() { return "copper_server::api::packets::client_bound::play::tag_query"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::tag_query>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::take_item_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.collected_entity_id);
  fn(obj.collectors_entity_id);
  fn(obj.items_count);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::take_item_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.collected_entity_id);
  fn(obj.collectors_entity_id);
  fn(obj.items_count);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::take_item_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::take_item_entity>().collected_entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::take_item_entity>().collectors_entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::take_item_entity>().items_count)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::take_item_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::take_item_entity>().collected_entity_id)>("collected_entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::take_item_entity>().collectors_entity_id)>("collectors_entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::take_item_entity>().items_count)>("items_count");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::take_item_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.collected_entity_id, "collected_entity_id");
  fn(obj.collectors_entity_id, "collectors_entity_id");
  fn(obj.items_count, "items_count");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::take_item_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.collected_entity_id, "collected_entity_id");
  fn(obj.collectors_entity_id, "collectors_entity_id");
  fn(obj.items_count, "items_count");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::take_item_entity>() { return "copper_server::api::packets::client_bound::play::take_item_entity"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::take_item_entity>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::teleport_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.flags);
  fn(obj.on_ground);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::teleport_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.velocity_x);
  fn(obj.velocity_y);
  fn(obj.velocity_z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.flags);
  fn(obj.on_ground);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::teleport_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().velocity_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().velocity_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().velocity_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().flags)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().on_ground)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::teleport_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().velocity_x)>("velocity_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().velocity_y)>("velocity_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().velocity_z)>("velocity_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().flags)>("flags");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::teleport_entity>().on_ground)>("on_ground");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::teleport_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.flags, "flags");
  fn(obj.on_ground, "on_ground");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::teleport_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.velocity_x, "velocity_x");
  fn(obj.velocity_y, "velocity_y");
  fn(obj.velocity_z, "velocity_z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.flags, "flags");
  fn(obj.on_ground, "on_ground");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::teleport_entity>() { return "copper_server::api::packets::client_bound::play::teleport_entity"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::teleport_entity>() { return 11; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t>().z)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t>().z)>("z");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t>() { return "copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::test_instance_block_status::volume_t>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::test_instance_block_status& obj, [[maybe_unused]] FN&& fn){
  fn(obj.status);
  fn(obj.volume);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::test_instance_block_status& obj, [[maybe_unused]] FN&& fn){
  fn(obj.status);
  fn(obj.volume);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::test_instance_block_status> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status>().status)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status>().volume)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::test_instance_block_status> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status>().status)>("status");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::test_instance_block_status>().volume)>("volume");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::test_instance_block_status& obj, [[maybe_unused]] FN&& fn){
  fn(obj.status, "status");
  fn(obj.volume, "volume");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::test_instance_block_status& obj, [[maybe_unused]] FN&& fn){
  fn(obj.status, "status");
  fn(obj.volume, "volume");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::test_instance_block_status>() { return "copper_server::api::packets::client_bound::play::test_instance_block_status"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::test_instance_block_status>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::ticking_state& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tick_rate);
  fn(obj.is_frozen);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::ticking_state& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tick_rate);
  fn(obj.is_frozen);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::ticking_state> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::ticking_state>().tick_rate)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::ticking_state>().is_frozen)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::ticking_state> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::ticking_state>().tick_rate)>("tick_rate");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::ticking_state>().is_frozen)>("is_frozen");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::ticking_state& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tick_rate, "tick_rate");
  fn(obj.is_frozen, "is_frozen");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::ticking_state& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tick_rate, "tick_rate");
  fn(obj.is_frozen, "is_frozen");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::ticking_state>() { return "copper_server::api::packets::client_bound::play::ticking_state"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::ticking_state>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::ticking_step& obj, [[maybe_unused]] FN&& fn){
  fn(obj.steps);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::ticking_step& obj, [[maybe_unused]] FN&& fn){
  fn(obj.steps);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::ticking_step> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::ticking_step>().steps)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::ticking_step> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::ticking_step>().steps)>("steps");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::ticking_step& obj, [[maybe_unused]] FN&& fn){
  fn(obj.steps, "steps");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::ticking_step& obj, [[maybe_unused]] FN&& fn){
  fn(obj.steps, "steps");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::ticking_step>() { return "copper_server::api::packets::client_bound::play::ticking_step"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::ticking_step>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::transfer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.host);
  fn(obj.port);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::transfer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.host);
  fn(obj.port);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::transfer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::transfer>().host)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::transfer>().port)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::transfer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::transfer>().host)>("host");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::transfer>().port)>("port");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::transfer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.host, "host");
  fn(obj.port, "port");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::transfer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.host, "host");
  fn(obj.port, "port");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::transfer>() { return "copper_server::api::packets::client_bound::play::transfer"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::transfer>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::display::background_texture& obj, [[maybe_unused]] FN&& fn){
  fn(obj.texture);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::display::background_texture& obj, [[maybe_unused]] FN&& fn){
  fn(obj.texture);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_advancements::display::background_texture> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display::background_texture>().texture)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_advancements::display::background_texture> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display::background_texture>().texture)>("texture");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::display::background_texture& obj, [[maybe_unused]] FN&& fn){
  fn(obj.texture, "texture");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::display::background_texture& obj, [[maybe_unused]] FN&& fn){
  fn(obj.texture, "texture");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_advancements::display::background_texture>() { return "copper_server::api::packets::client_bound::play::update_advancements::display::background_texture"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_advancements::display::background_texture>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::display::show_toast& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::display::show_toast& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_advancements::display::show_toast> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_advancements::display::show_toast> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::display::show_toast& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::display::show_toast& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_advancements::display::show_toast>() { return "copper_server::api::packets::client_bound::play::update_advancements::display::show_toast"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_advancements::display::show_toast>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::display::hidden& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::display::hidden& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_advancements::display::hidden> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_advancements::display::hidden> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::display::hidden& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::display::hidden& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_advancements::display::hidden>() { return "copper_server::api::packets::client_bound::play::update_advancements::display::hidden"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_advancements::display::hidden>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
  fn(obj.description);
  fn(obj.icon);
  fn(obj.frame_type);
  fn(obj.flags);
  fn(obj.x_cord);
  fn(obj.y_cord);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
  fn(obj.description);
  fn(obj.icon);
  fn(obj.frame_type);
  fn(obj.flags);
  fn(obj.x_cord);
  fn(obj.y_cord);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_advancements::display> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().title)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().description)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().icon)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().frame_type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().flags)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().x_cord)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().y_cord)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_advancements::display> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().title)>("title");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().description)>("description");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().icon)>("icon");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().frame_type)>("frame_type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().flags)>("flags");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().x_cord)>("x_cord");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::display>().y_cord)>("y_cord");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
  fn(obj.description, "description");
  fn(obj.icon, "icon");
  fn(obj.frame_type, "frame_type");
  fn(obj.flags, "flags");
  fn(obj.x_cord, "x_cord");
  fn(obj.y_cord, "y_cord");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::display& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
  fn(obj.description, "description");
  fn(obj.icon, "icon");
  fn(obj.frame_type, "frame_type");
  fn(obj.flags, "flags");
  fn(obj.x_cord, "x_cord");
  fn(obj.y_cord, "y_cord");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_advancements::display>() { return "copper_server::api::packets::client_bound::play::update_advancements::display"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_advancements::display>() { return 7; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::advancement& obj, [[maybe_unused]] FN&& fn){
  fn(obj.parent_id);
  fn(obj.display);
  fn(obj.nested_requirements);
  fn(obj.send_telemetry);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::advancement& obj, [[maybe_unused]] FN&& fn){
  fn(obj.parent_id);
  fn(obj.display);
  fn(obj.nested_requirements);
  fn(obj.send_telemetry);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_advancements::advancement> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement>().parent_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement>().display)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement>().nested_requirements)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement>().send_telemetry)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_advancements::advancement> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement>().parent_id)>("parent_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement>().display)>("display");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement>().nested_requirements)>("nested_requirements");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement>().send_telemetry)>("send_telemetry");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::advancement& obj, [[maybe_unused]] FN&& fn){
  fn(obj.parent_id, "parent_id");
  fn(obj.display, "display");
  fn(obj.nested_requirements, "nested_requirements");
  fn(obj.send_telemetry, "send_telemetry");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::advancement& obj, [[maybe_unused]] FN&& fn){
  fn(obj.parent_id, "parent_id");
  fn(obj.display, "display");
  fn(obj.nested_requirements, "nested_requirements");
  fn(obj.send_telemetry, "send_telemetry");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_advancements::advancement>() { return "copper_server::api::packets::client_bound::play::update_advancements::advancement"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_advancements::advancement>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::progress& obj, [[maybe_unused]] FN&& fn){
  fn(obj.criterion);
  fn(obj.date_of_archiving);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::progress& obj, [[maybe_unused]] FN&& fn){
  fn(obj.criterion);
  fn(obj.date_of_archiving);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_advancements::progress> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::progress>().criterion)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::progress>().date_of_archiving)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_advancements::progress> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::progress>().criterion)>("criterion");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::progress>().date_of_archiving)>("date_of_archiving");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::progress& obj, [[maybe_unused]] FN&& fn){
  fn(obj.criterion, "criterion");
  fn(obj.date_of_archiving, "date_of_archiving");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::progress& obj, [[maybe_unused]] FN&& fn){
  fn(obj.criterion, "criterion");
  fn(obj.date_of_archiving, "date_of_archiving");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_advancements::progress>() { return "copper_server::api::packets::client_bound::play::update_advancements::progress"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_advancements::progress>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping>().key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping>().key)>("key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping>() { return "copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_advancements::advancement_mapping>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::progress_mapping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::progress_mapping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_advancements::progress_mapping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::progress_mapping>().key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::progress_mapping>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_advancements::progress_mapping> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::progress_mapping>().key)>("key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements::progress_mapping>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements::progress_mapping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements::progress_mapping& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_advancements::progress_mapping>() { return "copper_server::api::packets::client_bound::play::update_advancements::progress_mapping"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_advancements::progress_mapping>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements& obj, [[maybe_unused]] FN&& fn){
  fn(obj.clear_prev);
  fn(obj.advancement_mappings);
  fn(obj.remove_advancements);
  fn(obj.progress_mappings);
  fn(obj.show);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements& obj, [[maybe_unused]] FN&& fn){
  fn(obj.clear_prev);
  fn(obj.advancement_mappings);
  fn(obj.remove_advancements);
  fn(obj.progress_mappings);
  fn(obj.show);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_advancements> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().clear_prev)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().advancement_mappings)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().remove_advancements)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().progress_mappings)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().show)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_advancements> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().clear_prev)>("clear_prev");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().advancement_mappings)>("advancement_mappings");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().remove_advancements)>("remove_advancements");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().progress_mappings)>("progress_mappings");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_advancements>().show)>("show");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_advancements& obj, [[maybe_unused]] FN&& fn){
  fn(obj.clear_prev, "clear_prev");
  fn(obj.advancement_mappings, "advancement_mappings");
  fn(obj.remove_advancements, "remove_advancements");
  fn(obj.progress_mappings, "progress_mappings");
  fn(obj.show, "show");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_advancements& obj, [[maybe_unused]] FN&& fn){
  fn(obj.clear_prev, "clear_prev");
  fn(obj.advancement_mappings, "advancement_mappings");
  fn(obj.remove_advancements, "remove_advancements");
  fn(obj.progress_mappings, "progress_mappings");
  fn(obj.show, "show");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_advancements>() { return "copper_server::api::packets::client_bound::play::update_advancements"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_advancements>() { return 5; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::update_attributes::operation_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::update_attributes::operation_e>;
static constexpr inline std::array<item, 3> values = {item{"add", copper_server::api::packets::client_bound::play::update_attributes::operation_e::add}, item{"add_percent", copper_server::api::packets::client_bound::play::update_attributes::operation_e::add_percent}, item{"multiply", copper_server::api::packets::client_bound::play::update_attributes::operation_e::multiply}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_attributes::operation_e>() { return "copper_server::api::packets::client_bound::play::update_attributes::operation_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_attributes::modifier& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.amount);
  fn(obj.operation);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_attributes::modifier& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.amount);
  fn(obj.operation);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_attributes::modifier> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::modifier>().id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::modifier>().amount)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::modifier>().operation)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_attributes::modifier> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::modifier>().id)>("id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::modifier>().amount)>("amount");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::modifier>().operation)>("operation");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_attributes::modifier& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.amount, "amount");
  fn(obj.operation, "operation");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_attributes::modifier& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.amount, "amount");
  fn(obj.operation, "operation");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_attributes::modifier>() { return "copper_server::api::packets::client_bound::play::update_attributes::modifier"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_attributes::modifier>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_attributes::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.value);
  fn(obj.modifiers);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_attributes::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.value);
  fn(obj.modifiers);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_attributes::property> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::property>().id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::property>().value)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::property>().modifiers)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_attributes::property> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::property>().id)>("id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::property>().value)>("value");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes::property>().modifiers)>("modifiers");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_attributes::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.value, "value");
  fn(obj.modifiers, "modifiers");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_attributes::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.value, "value");
  fn(obj.modifiers, "modifiers");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_attributes::property>() { return "copper_server::api::packets::client_bound::play::update_attributes::property"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_attributes::property>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_attributes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.properties);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_attributes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.properties);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_attributes> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes>().properties)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_attributes> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_attributes>().properties)>("properties");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_attributes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.properties, "properties");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_attributes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.properties, "properties");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_attributes>() { return "copper_server::api::packets::client_bound::play::update_attributes"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_attributes>() { return 2; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::update_mob_effect::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::update_mob_effect::flags_f>;
static constexpr inline std::array<item, 4> values = {item{"is_ambient", copper_server::api::packets::client_bound::play::update_mob_effect::flags_f::is_ambient}, item{"show_particles", copper_server::api::packets::client_bound::play::update_mob_effect::flags_f::show_particles}, item{"show_icon", copper_server::api::packets::client_bound::play::update_mob_effect::flags_f::show_icon}, item{"blend", copper_server::api::packets::client_bound::play::update_mob_effect::flags_f::blend}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_mob_effect::flags_f>() { return "copper_server::api::packets::client_bound::play::update_mob_effect::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_mob_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.effect);
  fn(obj.amplifier);
  fn(obj.duration);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_mob_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.effect);
  fn(obj.amplifier);
  fn(obj.duration);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_mob_effect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().effect)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().amplifier)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().duration)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_mob_effect> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().effect)>("effect");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().amplifier)>("amplifier");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().duration)>("duration");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_mob_effect>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_mob_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.effect, "effect");
  fn(obj.amplifier, "amplifier");
  fn(obj.duration, "duration");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_mob_effect& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.effect, "effect");
  fn(obj.amplifier, "amplifier");
  fn(obj.duration, "duration");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_mob_effect>() { return "copper_server::api::packets::client_bound::play::update_mob_effect"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_mob_effect>() { return 5; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_recipes::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.set_id);
  fn(obj.items);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_recipes::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.set_id);
  fn(obj.items);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_recipes::property> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes::property>().set_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes::property>().items)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_recipes::property> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes::property>().set_id)>("set_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes::property>().items)>("items");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_recipes::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.set_id, "set_id");
  fn(obj.items, "items");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_recipes::property& obj, [[maybe_unused]] FN&& fn){
  fn(obj.set_id, "set_id");
  fn(obj.items, "items");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_recipes::property>() { return "copper_server::api::packets::client_bound::play::update_recipes::property"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_recipes::property>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredients);
  fn(obj.item);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredients);
  fn(obj.item);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe>().ingredients)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe>().item)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe>().ingredients)>("ingredients");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe>().item)>("item");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredients, "ingredients");
  fn(obj.item, "item");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ingredients, "ingredients");
  fn(obj.item, "item");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe>() { return "copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_recipes::stonecuter_recipe>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_recipes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property_sets);
  fn(obj.stonecuter_recipes);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_recipes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property_sets);
  fn(obj.stonecuter_recipes);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_recipes> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes>().property_sets)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes>().stonecuter_recipes)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_recipes> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes>().property_sets)>("property_sets");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_recipes>().stonecuter_recipes)>("stonecuter_recipes");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_recipes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property_sets, "property_sets");
  fn(obj.stonecuter_recipes, "stonecuter_recipes");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_recipes& obj, [[maybe_unused]] FN&& fn){
  fn(obj.property_sets, "property_sets");
  fn(obj.stonecuter_recipes, "stonecuter_recipes");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_recipes>() { return "copper_server::api::packets::client_bound::play::update_recipes"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_recipes>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_tags::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_name);
  fn(obj.values);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_tags::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_name);
  fn(obj.values);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_tags::tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags::tag>().tag_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags::tag>().values)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_tags::tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags::tag>().tag_name)>("tag_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags::tag>().values)>("values");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_tags::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_name, "tag_name");
  fn(obj.values, "values");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_tags::tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_name, "tag_name");
  fn(obj.values, "values");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_tags::tag>() { return "copper_server::api::packets::client_bound::play::update_tags::tag"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_tags::tag>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_tags::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id);
  fn(obj.tags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_tags::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id);
  fn(obj.tags);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_tags::entry> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags::entry>().registry_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags::entry>().tags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_tags::entry> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags::entry>().registry_id)>("registry_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags::entry>().tags)>("tags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_tags::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id, "registry_id");
  fn(obj.tags, "tags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_tags::entry& obj, [[maybe_unused]] FN&& fn){
  fn(obj.registry_id, "registry_id");
  fn(obj.tags, "tags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_tags::entry>() { return "copper_server::api::packets::client_bound::play::update_tags::entry"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_tags::entry>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::update_tags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_tags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::update_tags> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags>().entries)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::update_tags> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::update_tags>().entries)>("entries");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::update_tags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries, "entries");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::update_tags& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entries, "entries");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::update_tags>() { return "copper_server::api::packets::client_bound::play::update_tags"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::update_tags>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::projectile_power& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.power);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::projectile_power& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.power);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::projectile_power> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::projectile_power>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::projectile_power>().power)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::projectile_power> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::projectile_power>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::projectile_power>().power)>("power");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::projectile_power& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.power, "power");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::projectile_power& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.power, "power");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::projectile_power>() { return "copper_server::api::packets::client_bound::play::projectile_power"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::projectile_power>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::custom_report_details::detail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
  fn(obj.description);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::custom_report_details::detail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title);
  fn(obj.description);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::custom_report_details::detail> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_report_details::detail>().title)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_report_details::detail>().description)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::custom_report_details::detail> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_report_details::detail>().title)>("title");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_report_details::detail>().description)>("description");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::custom_report_details::detail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
  fn(obj.description, "description");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::custom_report_details::detail& obj, [[maybe_unused]] FN&& fn){
  fn(obj.title, "title");
  fn(obj.description, "description");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::custom_report_details::detail>() { return "copper_server::api::packets::client_bound::play::custom_report_details::detail"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::custom_report_details::detail>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::custom_report_details& obj, [[maybe_unused]] FN&& fn){
  fn(obj.details);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::custom_report_details& obj, [[maybe_unused]] FN&& fn){
  fn(obj.details);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::custom_report_details> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_report_details>().details)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::custom_report_details> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::custom_report_details>().details)>("details");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::custom_report_details& obj, [[maybe_unused]] FN&& fn){
  fn(obj.details, "details");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::custom_report_details& obj, [[maybe_unused]] FN&& fn){
  fn(obj.details, "details");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::custom_report_details>() { return "copper_server::api::packets::client_bound::play::custom_report_details"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::custom_report_details>() { return 1; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::server_links::link_type> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::server_links::link_type>;
static constexpr inline std::array<item, 10> values = {item{"bug_report", copper_server::api::packets::client_bound::play::server_links::link_type::bug_report}, item{"community_guidelines", copper_server::api::packets::client_bound::play::server_links::link_type::community_guidelines}, item{"support", copper_server::api::packets::client_bound::play::server_links::link_type::support}, item{"status", copper_server::api::packets::client_bound::play::server_links::link_type::status}, item{"feedback", copper_server::api::packets::client_bound::play::server_links::link_type::feedback}, item{"community", copper_server::api::packets::client_bound::play::server_links::link_type::community}, item{"website", copper_server::api::packets::client_bound::play::server_links::link_type::website}, item{"forums", copper_server::api::packets::client_bound::play::server_links::link_type::forums}, item{"news", copper_server::api::packets::client_bound::play::server_links::link_type::news}, item{"announcements", copper_server::api::packets::client_bound::play::server_links::link_type::announcements}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::server_links::link_type>() { return "copper_server::api::packets::client_bound::play::server_links::link_type"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::server_links::link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.label);
  fn(obj.url);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::server_links::link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.label);
  fn(obj.url);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::server_links::link> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_links::link>().label)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_links::link>().url)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::server_links::link> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_links::link>().label)>("label");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_links::link>().url)>("url");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::server_links::link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.label, "label");
  fn(obj.url, "url");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::server_links::link& obj, [[maybe_unused]] FN&& fn){
  fn(obj.label, "label");
  fn(obj.url, "url");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::server_links::link>() { return "copper_server::api::packets::client_bound::play::server_links::link"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::server_links::link>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::server_links& obj, [[maybe_unused]] FN&& fn){
  fn(obj.links);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::server_links& obj, [[maybe_unused]] FN&& fn){
  fn(obj.links);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::server_links> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_links>().links)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::server_links> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::server_links>().links)>("links");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::server_links& obj, [[maybe_unused]] FN&& fn){
  fn(obj.links, "links");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::server_links& obj, [[maybe_unused]] FN&& fn){
  fn(obj.links, "links");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::server_links>() { return "copper_server::api::packets::client_bound::play::server_links"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::server_links>() { return 1; }
template<>struct enum_data<copper_server::api::packets::client_bound::play::waypoint::operation_e> {using item = std::pair<std::string_view, copper_server::api::packets::client_bound::play::waypoint::operation_e>;
static constexpr inline std::array<item, 3> values = {item{"track", copper_server::api::packets::client_bound::play::waypoint::operation_e::track}, item{"untrack", copper_server::api::packets::client_bound::play::waypoint::operation_e::untrack}, item{"update", copper_server::api::packets::client_bound::play::waypoint::operation_e::update}};};
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::waypoint::operation_e>() { return "copper_server::api::packets::client_bound::play::waypoint::operation_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::color_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.r);
  fn(obj.g);
  fn(obj.b);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::color_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.r);
  fn(obj.g);
  fn(obj.b);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::waypoint::color_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::color_t>().r)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::color_t>().g)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::color_t>().b)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::waypoint::color_t> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::color_t>().r)>("r");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::color_t>().g)>("g");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::color_t>().b)>("b");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::color_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.r, "r");
  fn(obj.g, "g");
  fn(obj.b, "b");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::color_t& obj, [[maybe_unused]] FN&& fn){
  fn(obj.r, "r");
  fn(obj.g, "g");
  fn(obj.b, "b");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::waypoint::color_t>() { return "copper_server::api::packets::client_bound::play::waypoint::color_t"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::waypoint::color_t>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::here& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::here& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::waypoint::here> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::waypoint::here> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::here& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::here& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::waypoint::here>() { return "copper_server::api::packets::client_bound::play::waypoint::here"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::waypoint::here>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::near& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::near& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::waypoint::near> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::near>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::near>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::near>().z)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::waypoint::near> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::near>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::near>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::near>().z)>("z");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::near& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::near& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::waypoint::near>() { return "copper_server::api::packets::client_bound::play::waypoint::near"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::waypoint::near>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::far& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::far& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::waypoint::far> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::far>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::far>().z)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::waypoint::far> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::far>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::far>().z)>("z");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::far& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::far& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::waypoint::far>() { return "copper_server::api::packets::client_bound::play::waypoint::far"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::waypoint::far>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::far_away& obj, [[maybe_unused]] FN&& fn){
  fn(obj.azimuth);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::far_away& obj, [[maybe_unused]] FN&& fn){
  fn(obj.azimuth);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::waypoint::far_away> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::far_away>().azimuth)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::waypoint::far_away> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint::far_away>().azimuth)>("azimuth");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint::far_away& obj, [[maybe_unused]] FN&& fn){
  fn(obj.azimuth, "azimuth");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint::far_away& obj, [[maybe_unused]] FN&& fn){
  fn(obj.azimuth, "azimuth");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::waypoint::far_away>() { return "copper_server::api::packets::client_bound::play::waypoint::far_away"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::waypoint::far_away>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.icon_style);
  fn(obj.color);
  fn(obj.type);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.icon_style);
  fn(obj.color);
  fn(obj.type);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::waypoint> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint>().id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint>().icon_style)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint>().color)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint>().type)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::waypoint> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint>().id)>("id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint>().icon_style)>("icon_style");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint>().color)>("color");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::waypoint>().type)>("type");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::waypoint& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.icon_style, "icon_style");
  fn(obj.color, "color");
  fn(obj.type, "type");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::waypoint& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.icon_style, "icon_style");
  fn(obj.color, "color");
  fn(obj.type, "type");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::waypoint>() { return "copper_server::api::packets::client_bound::play::waypoint"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::waypoint>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::clear_dialog& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::clear_dialog& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::clear_dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::clear_dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::clear_dialog& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::clear_dialog& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::clear_dialog>() { return "copper_server::api::packets::client_bound::play::clear_dialog"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::clear_dialog>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::client_bound::play::show_dialog& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dialog);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::client_bound::play::show_dialog& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dialog);
}
template<>struct for_each_type_s<copper_server::api::packets::client_bound::play::show_dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::show_dialog>().dialog)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::client_bound::play::show_dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::client_bound::play::show_dialog>().dialog)>("dialog");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::client_bound::play::show_dialog& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dialog, "dialog");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::client_bound::play::show_dialog& obj, [[maybe_unused]] FN&& fn){
  fn(obj.dialog, "dialog");
}
template<>consteval std::string_view type_name<copper_server::api::packets::client_bound::play::show_dialog>() { return "copper_server::api::packets::client_bound::play::show_dialog"; }
template<>consteval size_t fields_count<copper_server::api::packets::client_bound::play::show_dialog>() { return 1; }
template<>struct enum_data<copper_server::api::packets::server_bound::handshake::intention::intent_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::handshake::intention::intent_e>;
static constexpr inline std::array<item, 3> values = {item{"status", copper_server::api::packets::server_bound::handshake::intention::intent_e::status}, item{"login", copper_server::api::packets::server_bound::handshake::intention::intent_e::login}, item{"transfer", copper_server::api::packets::server_bound::handshake::intention::intent_e::transfer}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::handshake::intention::intent_e>() { return "copper_server::api::packets::server_bound::handshake::intention::intent_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::handshake::intention& obj, [[maybe_unused]] FN&& fn){
  fn(obj.protocol_version);
  fn(obj.server_address);
  fn(obj.server_port);
  fn(obj.intent);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::handshake::intention& obj, [[maybe_unused]] FN&& fn){
  fn(obj.protocol_version);
  fn(obj.server_address);
  fn(obj.server_port);
  fn(obj.intent);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::handshake::intention> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::handshake::intention>().protocol_version)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::handshake::intention>().server_address)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::handshake::intention>().server_port)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::handshake::intention>().intent)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::handshake::intention> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::handshake::intention>().protocol_version)>("protocol_version");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::handshake::intention>().server_address)>("server_address");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::handshake::intention>().server_port)>("server_port");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::handshake::intention>().intent)>("intent");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::handshake::intention& obj, [[maybe_unused]] FN&& fn){
  fn(obj.protocol_version, "protocol_version");
  fn(obj.server_address, "server_address");
  fn(obj.server_port, "server_port");
  fn(obj.intent, "intent");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::handshake::intention& obj, [[maybe_unused]] FN&& fn){
  fn(obj.protocol_version, "protocol_version");
  fn(obj.server_address, "server_address");
  fn(obj.server_port, "server_port");
  fn(obj.intent, "intent");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::handshake::intention>() { return "copper_server::api::packets::server_bound::handshake::intention"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::handshake::intention>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::status::status_request& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::status::status_request& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::status::status_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::status::status_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::status::status_request& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::status::status_request& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::status::status_request>() { return "copper_server::api::packets::server_bound::status::status_request"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::status::status_request>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::status::ping_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.timestamp);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::status::ping_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.timestamp);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::status::ping_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::status::ping_response>().timestamp)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::status::ping_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::status::ping_response>().timestamp)>("timestamp");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::status::ping_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.timestamp, "timestamp");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::status::ping_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.timestamp, "timestamp");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::status::ping_response>() { return "copper_server::api::packets::server_bound::status::ping_response"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::status::ping_response>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::login::hello& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.uuid);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::login::hello& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
  fn(obj.uuid);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::login::hello> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::hello>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::hello>().uuid)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::login::hello> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::hello>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::hello>().uuid)>("uuid");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::login::hello& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.uuid, "uuid");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::login::hello& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
  fn(obj.uuid, "uuid");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::login::hello>() { return "copper_server::api::packets::server_bound::login::hello"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::login::hello>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::login::key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.shared_secret);
  fn(obj.verify_token);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::login::key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.shared_secret);
  fn(obj.verify_token);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::login::key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::key>().shared_secret)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::key>().verify_token)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::login::key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::key>().shared_secret)>("shared_secret");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::key>().verify_token)>("verify_token");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::login::key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.shared_secret, "shared_secret");
  fn(obj.verify_token, "verify_token");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::login::key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.shared_secret, "shared_secret");
  fn(obj.verify_token, "verify_token");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::login::key>() { return "copper_server::api::packets::server_bound::login::key"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::login::key>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::login::custom_query_answer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.query_message_id);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::login::custom_query_answer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.query_message_id);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::login::custom_query_answer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::custom_query_answer>().query_message_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::custom_query_answer>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::login::custom_query_answer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::custom_query_answer>().query_message_id)>("query_message_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::custom_query_answer>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::login::custom_query_answer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.query_message_id, "query_message_id");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::login::custom_query_answer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.query_message_id, "query_message_id");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::login::custom_query_answer>() { return "copper_server::api::packets::server_bound::login::custom_query_answer"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::login::custom_query_answer>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::login::login_acknowledged& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::login::login_acknowledged& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::login::login_acknowledged> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::login::login_acknowledged> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::login::login_acknowledged& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::login::login_acknowledged& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::login::login_acknowledged>() { return "copper_server::api::packets::server_bound::login::login_acknowledged"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::login::login_acknowledged>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::login::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::login::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::login::cookie_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::cookie_response>().key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::cookie_response>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::login::cookie_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::cookie_response>().key)>("key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::login::cookie_response>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::login::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::login::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::login::cookie_response>() { return "copper_server::api::packets::server_bound::login::cookie_response"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::login::cookie_response>() { return 2; }
template<>struct enum_data<copper_server::api::packets::server_bound::configuration::client_information::chat_mode_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::configuration::client_information::chat_mode_e>;
static constexpr inline std::array<item, 3> values = {item{"disabled", copper_server::api::packets::server_bound::configuration::client_information::chat_mode_e::disabled}, item{"commands_only", copper_server::api::packets::server_bound::configuration::client_information::chat_mode_e::commands_only}, item{"hidden", copper_server::api::packets::server_bound::configuration::client_information::chat_mode_e::hidden}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::client_information::chat_mode_e>() { return "copper_server::api::packets::server_bound::configuration::client_information::chat_mode_e"; }
template<>struct enum_data<copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f>;
static constexpr inline std::array<item, 8> values = {item{"cape", copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f::cape}, item{"jacket", copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f::jacket}, item{"left_sleeve", copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f::left_sleeve}, item{"right_sleeve", copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f::right_sleeve}, item{"left_pants", copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f::left_pants}, item{"right_pants", copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f::right_pants}, item{"hat", copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f::hat}, item{"_unused", copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f::_unused}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f>() { return "copper_server::api::packets::server_bound::configuration::client_information::displayer_skin_parts_f"; }
template<>struct enum_data<copper_server::api::packets::server_bound::configuration::client_information::main_hand_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::configuration::client_information::main_hand_e>;
static constexpr inline std::array<item, 2> values = {item{"left", copper_server::api::packets::server_bound::configuration::client_information::main_hand_e::left}, item{"right", copper_server::api::packets::server_bound::configuration::client_information::main_hand_e::right}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::client_information::main_hand_e>() { return "copper_server::api::packets::server_bound::configuration::client_information::main_hand_e"; }
template<>struct enum_data<copper_server::api::packets::server_bound::configuration::client_information::particle_status_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::configuration::client_information::particle_status_e>;
static constexpr inline std::array<item, 3> values = {item{"all", copper_server::api::packets::server_bound::configuration::client_information::particle_status_e::all}, item{"decreased", copper_server::api::packets::server_bound::configuration::client_information::particle_status_e::decreased}, item{"minimal", copper_server::api::packets::server_bound::configuration::client_information::particle_status_e::minimal}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::client_information::particle_status_e>() { return "copper_server::api::packets::server_bound::configuration::client_information::particle_status_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::client_information& obj, [[maybe_unused]] FN&& fn){
  fn(obj.locale);
  fn(obj.view_distance);
  fn(obj.chat_mode);
  fn(obj.enable_chat_colors);
  fn(obj.displayed_skin_parts);
  fn(obj.main_hand);
  fn(obj.enable_text_filtering);
  fn(obj.allow_server_listings);
  fn(obj.particle_status);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::client_information& obj, [[maybe_unused]] FN&& fn){
  fn(obj.locale);
  fn(obj.view_distance);
  fn(obj.chat_mode);
  fn(obj.enable_chat_colors);
  fn(obj.displayed_skin_parts);
  fn(obj.main_hand);
  fn(obj.enable_text_filtering);
  fn(obj.allow_server_listings);
  fn(obj.particle_status);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::client_information> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().locale)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().view_distance)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().chat_mode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().enable_chat_colors)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().displayed_skin_parts)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().main_hand)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().enable_text_filtering)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().allow_server_listings)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().particle_status)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::client_information> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().locale)>("locale");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().view_distance)>("view_distance");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().chat_mode)>("chat_mode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().enable_chat_colors)>("enable_chat_colors");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().displayed_skin_parts)>("displayed_skin_parts");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().main_hand)>("main_hand");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().enable_text_filtering)>("enable_text_filtering");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().allow_server_listings)>("allow_server_listings");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::client_information>().particle_status)>("particle_status");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::client_information& obj, [[maybe_unused]] FN&& fn){
  fn(obj.locale, "locale");
  fn(obj.view_distance, "view_distance");
  fn(obj.chat_mode, "chat_mode");
  fn(obj.enable_chat_colors, "enable_chat_colors");
  fn(obj.displayed_skin_parts, "displayed_skin_parts");
  fn(obj.main_hand, "main_hand");
  fn(obj.enable_text_filtering, "enable_text_filtering");
  fn(obj.allow_server_listings, "allow_server_listings");
  fn(obj.particle_status, "particle_status");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::client_information& obj, [[maybe_unused]] FN&& fn){
  fn(obj.locale, "locale");
  fn(obj.view_distance, "view_distance");
  fn(obj.chat_mode, "chat_mode");
  fn(obj.enable_chat_colors, "enable_chat_colors");
  fn(obj.displayed_skin_parts, "displayed_skin_parts");
  fn(obj.main_hand, "main_hand");
  fn(obj.enable_text_filtering, "enable_text_filtering");
  fn(obj.allow_server_listings, "allow_server_listings");
  fn(obj.particle_status, "particle_status");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::client_information>() { return "copper_server::api::packets::server_bound::configuration::client_information"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::client_information>() { return 9; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::cookie_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::cookie_response>().key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::cookie_response>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::cookie_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::cookie_response>().key)>("key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::cookie_response>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::cookie_response>() { return "copper_server::api::packets::server_bound::configuration::cookie_response"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::cookie_response>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::custom_payload> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::custom_payload>().channel)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::custom_payload>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::custom_payload> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::custom_payload>().channel)>("channel");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::custom_payload>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::custom_payload>() { return "copper_server::api::packets::server_bound::configuration::custom_payload"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::custom_payload>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::finish_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::finish_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::finish_configuration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::finish_configuration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::finish_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::finish_configuration& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::finish_configuration>() { return "copper_server::api::packets::server_bound::configuration::finish_configuration"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::finish_configuration>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::keep_alive> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::keep_alive>().keep_alive_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::keep_alive> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::keep_alive>().keep_alive_id)>("keep_alive_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id, "keep_alive_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.keep_alive_id, "keep_alive_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::keep_alive>() { return "copper_server::api::packets::server_bound::configuration::keep_alive"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::keep_alive>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::pong& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ping_request_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::pong& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ping_request_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::pong> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::pong>().ping_request_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::pong> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::pong>().ping_request_id)>("ping_request_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::pong& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ping_request_id, "ping_request_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::pong& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ping_request_id, "ping_request_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::pong>() { return "copper_server::api::packets::server_bound::configuration::pong"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::pong>() { return 1; }
template<>struct enum_data<copper_server::api::packets::server_bound::configuration::resource_pack::result_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::configuration::resource_pack::result_e>;
static constexpr inline std::array<item, 8> values = {item{"success", copper_server::api::packets::server_bound::configuration::resource_pack::result_e::success}, item{"declined", copper_server::api::packets::server_bound::configuration::resource_pack::result_e::declined}, item{"download_failed", copper_server::api::packets::server_bound::configuration::resource_pack::result_e::download_failed}, item{"accepted", copper_server::api::packets::server_bound::configuration::resource_pack::result_e::accepted}, item{"downloaded", copper_server::api::packets::server_bound::configuration::resource_pack::result_e::downloaded}, item{"invalid_url", copper_server::api::packets::server_bound::configuration::resource_pack::result_e::invalid_url}, item{"reload_failed", copper_server::api::packets::server_bound::configuration::resource_pack::result_e::reload_failed}, item{"discarded", copper_server::api::packets::server_bound::configuration::resource_pack::result_e::discarded}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::resource_pack::result_e>() { return "copper_server::api::packets::server_bound::configuration::resource_pack::result_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::resource_pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.result);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::resource_pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.result);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::resource_pack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::resource_pack>().uuid)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::resource_pack>().result)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::resource_pack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::resource_pack>().uuid)>("uuid");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::resource_pack>().result)>("result");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::resource_pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.result, "result");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::resource_pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.result, "result");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::resource_pack>() { return "copper_server::api::packets::server_bound::configuration::resource_pack"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::resource_pack>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::select_known_packs::pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj._namespace);
  fn(obj.id);
  fn(obj.version);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::select_known_packs::pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj._namespace);
  fn(obj.id);
  fn(obj.version);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::select_known_packs::pack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::select_known_packs::pack>()._namespace)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::select_known_packs::pack>().id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::select_known_packs::pack>().version)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::select_known_packs::pack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::select_known_packs::pack>()._namespace)>("_namespace");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::select_known_packs::pack>().id)>("id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::select_known_packs::pack>().version)>("version");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::select_known_packs::pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj._namespace, "_namespace");
  fn(obj.id, "id");
  fn(obj.version, "version");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::select_known_packs::pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj._namespace, "_namespace");
  fn(obj.id, "id");
  fn(obj.version, "version");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::select_known_packs::pack>() { return "copper_server::api::packets::server_bound::configuration::select_known_packs::pack"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::select_known_packs::pack>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::select_known_packs& obj, [[maybe_unused]] FN&& fn){
  fn(obj.packs);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::select_known_packs& obj, [[maybe_unused]] FN&& fn){
  fn(obj.packs);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::select_known_packs> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::select_known_packs>().packs)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::select_known_packs> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::select_known_packs>().packs)>("packs");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::select_known_packs& obj, [[maybe_unused]] FN&& fn){
  fn(obj.packs, "packs");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::select_known_packs& obj, [[maybe_unused]] FN&& fn){
  fn(obj.packs, "packs");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::select_known_packs>() { return "copper_server::api::packets::server_bound::configuration::select_known_packs"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::select_known_packs>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::configuration::custom_click_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::custom_click_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::configuration::custom_click_action> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::custom_click_action>().id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::custom_click_action>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::configuration::custom_click_action> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::custom_click_action>().id)>("id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::configuration::custom_click_action>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::configuration::custom_click_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::configuration::custom_click_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::configuration::custom_click_action>() { return "copper_server::api::packets::server_bound::configuration::custom_click_action"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::configuration::custom_click_action>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::accept_teleportation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.teleport_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::accept_teleportation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.teleport_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::accept_teleportation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::accept_teleportation>().teleport_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::accept_teleportation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::accept_teleportation>().teleport_id)>("teleport_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::accept_teleportation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.teleport_id, "teleport_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::accept_teleportation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.teleport_id, "teleport_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::accept_teleportation>() { return "copper_server::api::packets::server_bound::play::accept_teleportation"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::accept_teleportation>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::block_entity_tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id);
  fn(obj.location);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::block_entity_tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id);
  fn(obj.location);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::block_entity_tag_query> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::block_entity_tag_query>().tag_query_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::block_entity_tag_query>().location)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::block_entity_tag_query> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::block_entity_tag_query>().tag_query_id)>("tag_query_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::block_entity_tag_query>().location)>("location");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::block_entity_tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id, "tag_query_id");
  fn(obj.location, "location");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::block_entity_tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id, "tag_query_id");
  fn(obj.location, "location");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::block_entity_tag_query>() { return "copper_server::api::packets::server_bound::play::block_entity_tag_query"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::block_entity_tag_query>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::bundle_item_selected& obj, [[maybe_unused]] FN&& fn){
  fn(obj.bundle_slot);
  fn(obj.item_slot);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::bundle_item_selected& obj, [[maybe_unused]] FN&& fn){
  fn(obj.bundle_slot);
  fn(obj.item_slot);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::bundle_item_selected> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::bundle_item_selected>().bundle_slot)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::bundle_item_selected>().item_slot)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::bundle_item_selected> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::bundle_item_selected>().bundle_slot)>("bundle_slot");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::bundle_item_selected>().item_slot)>("item_slot");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::bundle_item_selected& obj, [[maybe_unused]] FN&& fn){
  fn(obj.bundle_slot, "bundle_slot");
  fn(obj.item_slot, "item_slot");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::bundle_item_selected& obj, [[maybe_unused]] FN&& fn){
  fn(obj.bundle_slot, "bundle_slot");
  fn(obj.item_slot, "item_slot");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::bundle_item_selected>() { return "copper_server::api::packets::server_bound::play::bundle_item_selected"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::bundle_item_selected>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::change_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.difficulty);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::change_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.difficulty);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::change_difficulty> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::change_difficulty>().difficulty)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::change_difficulty> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::change_difficulty>().difficulty)>("difficulty");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::change_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.difficulty, "difficulty");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::change_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.difficulty, "difficulty");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::change_difficulty>() { return "copper_server::api::packets::server_bound::play::change_difficulty"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::change_difficulty>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::change_gamemode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::change_gamemode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::change_gamemode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::change_gamemode>().gamemode)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::change_gamemode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::change_gamemode>().gamemode)>("gamemode");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::change_gamemode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode, "gamemode");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::change_gamemode& obj, [[maybe_unused]] FN&& fn){
  fn(obj.gamemode, "gamemode");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::change_gamemode>() { return "copper_server::api::packets::server_bound::play::change_gamemode"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::change_gamemode>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_ack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.count);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_ack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.count);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::chat_ack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_ack>().count)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::chat_ack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_ack>().count)>("count");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_ack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.count, "count");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_ack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.count, "count");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::chat_ack>() { return "copper_server::api::packets::server_bound::play::chat_ack"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::chat_ack>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::chat_command> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command>().command)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::chat_command> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command>().command)>("command");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command, "command");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command, "command");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::chat_command>() { return "copper_server::api::packets::server_bound::play::chat_command"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::chat_command>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature& obj, [[maybe_unused]] FN&& fn){
  fn(obj.argument_name);
  fn(obj.signature);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature& obj, [[maybe_unused]] FN&& fn){
  fn(obj.argument_name);
  fn(obj.signature);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature>().argument_name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature>().signature)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature>().argument_name)>("argument_name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature>().signature)>("signature");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature& obj, [[maybe_unused]] FN&& fn){
  fn(obj.argument_name, "argument_name");
  fn(obj.signature, "signature");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature& obj, [[maybe_unused]] FN&& fn){
  fn(obj.argument_name, "argument_name");
  fn(obj.signature, "signature");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature>() { return "copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::chat_command_signed::argument_signature>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_command_signed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command);
  fn(obj.timestamp);
  fn(obj.salt);
  fn(obj.argument_signatures);
  fn(obj.message_count);
  fn(obj.acknowledged);
  fn(obj.check_sum);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_command_signed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command);
  fn(obj.timestamp);
  fn(obj.salt);
  fn(obj.argument_signatures);
  fn(obj.message_count);
  fn(obj.acknowledged);
  fn(obj.check_sum);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::chat_command_signed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().command)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().timestamp)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().salt)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().argument_signatures)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().message_count)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().acknowledged)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().check_sum)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::chat_command_signed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().command)>("command");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().timestamp)>("timestamp");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().salt)>("salt");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().argument_signatures)>("argument_signatures");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().message_count)>("message_count");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().acknowledged)>("acknowledged");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_command_signed>().check_sum)>("check_sum");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_command_signed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command, "command");
  fn(obj.timestamp, "timestamp");
  fn(obj.salt, "salt");
  fn(obj.argument_signatures, "argument_signatures");
  fn(obj.message_count, "message_count");
  fn(obj.acknowledged, "acknowledged");
  fn(obj.check_sum, "check_sum");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_command_signed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command, "command");
  fn(obj.timestamp, "timestamp");
  fn(obj.salt, "salt");
  fn(obj.argument_signatures, "argument_signatures");
  fn(obj.message_count, "message_count");
  fn(obj.acknowledged, "acknowledged");
  fn(obj.check_sum, "check_sum");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::chat_command_signed>() { return "copper_server::api::packets::server_bound::play::chat_command_signed"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::chat_command_signed>() { return 7; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command);
  fn(obj.timestamp);
  fn(obj.salt);
  fn(obj.signature);
  fn(obj.message_count);
  fn(obj.acknowledged);
  fn(obj.check_sum);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command);
  fn(obj.timestamp);
  fn(obj.salt);
  fn(obj.signature);
  fn(obj.message_count);
  fn(obj.acknowledged);
  fn(obj.check_sum);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().command)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().timestamp)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().salt)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().signature)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().message_count)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().acknowledged)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().check_sum)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::chat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().command)>("command");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().timestamp)>("timestamp");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().salt)>("salt");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().signature)>("signature");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().message_count)>("message_count");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().acknowledged)>("acknowledged");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat>().check_sum)>("check_sum");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command, "command");
  fn(obj.timestamp, "timestamp");
  fn(obj.salt, "salt");
  fn(obj.signature, "signature");
  fn(obj.message_count, "message_count");
  fn(obj.acknowledged, "acknowledged");
  fn(obj.check_sum, "check_sum");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.command, "command");
  fn(obj.timestamp, "timestamp");
  fn(obj.salt, "salt");
  fn(obj.signature, "signature");
  fn(obj.message_count, "message_count");
  fn(obj.acknowledged, "acknowledged");
  fn(obj.check_sum, "check_sum");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::chat>() { return "copper_server::api::packets::server_bound::play::chat"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::chat>() { return 7; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_session_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.expiries_at);
  fn(obj.public_key);
  fn(obj.key_signature);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_session_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.expiries_at);
  fn(obj.public_key);
  fn(obj.key_signature);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::chat_session_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_session_update>().uuid)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_session_update>().expiries_at)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_session_update>().public_key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_session_update>().key_signature)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::chat_session_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_session_update>().uuid)>("uuid");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_session_update>().expiries_at)>("expiries_at");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_session_update>().public_key)>("public_key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chat_session_update>().key_signature)>("key_signature");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::chat_session_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.expiries_at, "expiries_at");
  fn(obj.public_key, "public_key");
  fn(obj.key_signature, "key_signature");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::chat_session_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.expiries_at, "expiries_at");
  fn(obj.public_key, "public_key");
  fn(obj.key_signature, "key_signature");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::chat_session_update>() { return "copper_server::api::packets::server_bound::play::chat_session_update"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::chat_session_update>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::chunk_batch_received& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chunks_per_tick);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::chunk_batch_received& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chunks_per_tick);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::chunk_batch_received> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chunk_batch_received>().chunks_per_tick)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::chunk_batch_received> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::chunk_batch_received>().chunks_per_tick)>("chunks_per_tick");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::chunk_batch_received& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chunks_per_tick, "chunks_per_tick");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::chunk_batch_received& obj, [[maybe_unused]] FN&& fn){
  fn(obj.chunks_per_tick, "chunks_per_tick");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::chunk_batch_received>() { return "copper_server::api::packets::server_bound::play::chunk_batch_received"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::chunk_batch_received>() { return 1; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::client_command::action_id_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::client_command::action_id_e>;
static constexpr inline std::array<item, 2> values = {item{"perform_respawn", copper_server::api::packets::server_bound::play::client_command::action_id_e::perform_respawn}, item{"request_stats", copper_server::api::packets::server_bound::play::client_command::action_id_e::request_stats}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::client_command::action_id_e>() { return "copper_server::api::packets::server_bound::play::client_command::action_id_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::client_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.action_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::client_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.action_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::client_command> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_command>().action_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::client_command> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_command>().action_id)>("action_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::client_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.action_id, "action_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::client_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.action_id, "action_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::client_command>() { return "copper_server::api::packets::server_bound::play::client_command"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::client_command>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::client_tick_end& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::client_tick_end& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::client_tick_end> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::client_tick_end> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::client_tick_end& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::client_tick_end& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::client_tick_end>() { return "copper_server::api::packets::server_bound::play::client_tick_end"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::client_tick_end>() { return 0; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::client_information::chat_mode_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::client_information::chat_mode_e>;
static constexpr inline std::array<item, 3> values = {item{"disabled", copper_server::api::packets::server_bound::play::client_information::chat_mode_e::disabled}, item{"commands_only", copper_server::api::packets::server_bound::play::client_information::chat_mode_e::commands_only}, item{"hidden", copper_server::api::packets::server_bound::play::client_information::chat_mode_e::hidden}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::client_information::chat_mode_e>() { return "copper_server::api::packets::server_bound::play::client_information::chat_mode_e"; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f>;
static constexpr inline std::array<item, 8> values = {item{"cape", copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f::cape}, item{"jacket", copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f::jacket}, item{"left_sleeve", copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f::left_sleeve}, item{"right_sleeve", copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f::right_sleeve}, item{"left_pants", copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f::left_pants}, item{"right_pants", copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f::right_pants}, item{"hat", copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f::hat}, item{"_unused", copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f::_unused}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f>() { return "copper_server::api::packets::server_bound::play::client_information::displayer_skin_parts_f"; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::client_information::main_hand_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::client_information::main_hand_e>;
static constexpr inline std::array<item, 2> values = {item{"left", copper_server::api::packets::server_bound::play::client_information::main_hand_e::left}, item{"right", copper_server::api::packets::server_bound::play::client_information::main_hand_e::right}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::client_information::main_hand_e>() { return "copper_server::api::packets::server_bound::play::client_information::main_hand_e"; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::client_information::particle_status_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::client_information::particle_status_e>;
static constexpr inline std::array<item, 3> values = {item{"all", copper_server::api::packets::server_bound::play::client_information::particle_status_e::all}, item{"decreased", copper_server::api::packets::server_bound::play::client_information::particle_status_e::decreased}, item{"minimal", copper_server::api::packets::server_bound::play::client_information::particle_status_e::minimal}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::client_information::particle_status_e>() { return "copper_server::api::packets::server_bound::play::client_information::particle_status_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::client_information& obj, [[maybe_unused]] FN&& fn){
  fn(obj.locale);
  fn(obj.view_distance);
  fn(obj.chat_mode);
  fn(obj.enable_chat_colors);
  fn(obj.displayer_skin_parts);
  fn(obj.main_hand);
  fn(obj.enable_text_filtering);
  fn(obj.allow_server_listings);
  fn(obj.particle_status);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::client_information& obj, [[maybe_unused]] FN&& fn){
  fn(obj.locale);
  fn(obj.view_distance);
  fn(obj.chat_mode);
  fn(obj.enable_chat_colors);
  fn(obj.displayer_skin_parts);
  fn(obj.main_hand);
  fn(obj.enable_text_filtering);
  fn(obj.allow_server_listings);
  fn(obj.particle_status);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::client_information> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().locale)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().view_distance)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().chat_mode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().enable_chat_colors)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().displayer_skin_parts)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().main_hand)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().enable_text_filtering)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().allow_server_listings)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().particle_status)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::client_information> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().locale)>("locale");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().view_distance)>("view_distance");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().chat_mode)>("chat_mode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().enable_chat_colors)>("enable_chat_colors");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().displayer_skin_parts)>("displayer_skin_parts");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().main_hand)>("main_hand");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().enable_text_filtering)>("enable_text_filtering");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().allow_server_listings)>("allow_server_listings");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::client_information>().particle_status)>("particle_status");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::client_information& obj, [[maybe_unused]] FN&& fn){
  fn(obj.locale, "locale");
  fn(obj.view_distance, "view_distance");
  fn(obj.chat_mode, "chat_mode");
  fn(obj.enable_chat_colors, "enable_chat_colors");
  fn(obj.displayer_skin_parts, "displayer_skin_parts");
  fn(obj.main_hand, "main_hand");
  fn(obj.enable_text_filtering, "enable_text_filtering");
  fn(obj.allow_server_listings, "allow_server_listings");
  fn(obj.particle_status, "particle_status");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::client_information& obj, [[maybe_unused]] FN&& fn){
  fn(obj.locale, "locale");
  fn(obj.view_distance, "view_distance");
  fn(obj.chat_mode, "chat_mode");
  fn(obj.enable_chat_colors, "enable_chat_colors");
  fn(obj.displayer_skin_parts, "displayer_skin_parts");
  fn(obj.main_hand, "main_hand");
  fn(obj.enable_text_filtering, "enable_text_filtering");
  fn(obj.allow_server_listings, "allow_server_listings");
  fn(obj.particle_status, "particle_status");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::client_information>() { return "copper_server::api::packets::server_bound::play::client_information"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::client_information>() { return 9; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::command_suggestion& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_transaction_id);
  fn(obj.command_text);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::command_suggestion& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_transaction_id);
  fn(obj.command_text);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::command_suggestion> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::command_suggestion>().suggestion_transaction_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::command_suggestion>().command_text)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::command_suggestion> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::command_suggestion>().suggestion_transaction_id)>("suggestion_transaction_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::command_suggestion>().command_text)>("command_text");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::command_suggestion& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_transaction_id, "suggestion_transaction_id");
  fn(obj.command_text, "command_text");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::command_suggestion& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_transaction_id, "suggestion_transaction_id");
  fn(obj.command_text, "command_text");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::command_suggestion>() { return "copper_server::api::packets::server_bound::play::command_suggestion"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::command_suggestion>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::configuration_acknowledged& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::configuration_acknowledged& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::configuration_acknowledged> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::configuration_acknowledged> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::configuration_acknowledged& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::configuration_acknowledged& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::configuration_acknowledged>() { return "copper_server::api::packets::server_bound::play::configuration_acknowledged"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::configuration_acknowledged>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::container_button_click& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.button_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_button_click& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.button_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::container_button_click> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_button_click>().window_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_button_click>().button_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::container_button_click> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_button_click>().window_id)>("window_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_button_click>().button_id)>("button_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::container_button_click& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.button_id, "button_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_button_click& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.button_id, "button_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::container_button_click>() { return "copper_server::api::packets::server_bound::play::container_button_click"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::container_button_click>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
  fn(obj.crc32_hash);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
  fn(obj.crc32_hash);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component>().crc32_hash)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component>().crc32_hash)>("crc32_hash");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
  fn(obj.crc32_hash, "crc32_hash");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
  fn(obj.crc32_hash, "crc32_hash");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component>() { return "copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data::component>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::container_click::hashed_slot_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id);
  fn(obj.count);
  fn(obj.add_components);
  fn(obj.remove_components);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_click::hashed_slot_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id);
  fn(obj.count);
  fn(obj.add_components);
  fn(obj.remove_components);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>().item_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>().count)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>().add_components)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>().remove_components)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>().item_id)>("item_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>().count)>("count");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>().add_components)>("add_components");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>().remove_components)>("remove_components");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::container_click::hashed_slot_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id, "item_id");
  fn(obj.count, "count");
  fn(obj.add_components, "add_components");
  fn(obj.remove_components, "remove_components");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_click::hashed_slot_data& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id, "item_id");
  fn(obj.count, "count");
  fn(obj.add_components, "add_components");
  fn(obj.remove_components, "remove_components");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>() { return "copper_server::api::packets::server_bound::play::container_click::hashed_slot_data"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::container_click::hashed_slot_data>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::container_click::changed_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
  fn(obj.data);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_click::changed_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
  fn(obj.data);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::container_click::changed_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::changed_slot>().slot)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::changed_slot>().data)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::container_click::changed_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::changed_slot>().slot)>("slot");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click::changed_slot>().data)>("data");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::container_click::changed_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
  fn(obj.data, "data");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_click::changed_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
  fn(obj.data, "data");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::container_click::changed_slot>() { return "copper_server::api::packets::server_bound::play::container_click::changed_slot"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::container_click::changed_slot>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::container_click& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.state_id);
  fn(obj.slot);
  fn(obj.button);
  fn(obj.mode);
  fn(obj.changed);
  fn(obj.carry_item);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_click& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
  fn(obj.state_id);
  fn(obj.slot);
  fn(obj.button);
  fn(obj.mode);
  fn(obj.changed);
  fn(obj.carry_item);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::container_click> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().window_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().state_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().slot)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().button)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().mode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().changed)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().carry_item)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::container_click> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().window_id)>("window_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().state_id)>("state_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().slot)>("slot");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().button)>("button");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().mode)>("mode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().changed)>("changed");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_click>().carry_item)>("carry_item");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::container_click& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.state_id, "state_id");
  fn(obj.slot, "slot");
  fn(obj.button, "button");
  fn(obj.mode, "mode");
  fn(obj.changed, "changed");
  fn(obj.carry_item, "carry_item");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_click& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
  fn(obj.state_id, "state_id");
  fn(obj.slot, "slot");
  fn(obj.button, "button");
  fn(obj.mode, "mode");
  fn(obj.changed, "changed");
  fn(obj.carry_item, "carry_item");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::container_click>() { return "copper_server::api::packets::server_bound::play::container_click"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::container_click>() { return 7; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::container_close& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_close& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::container_close> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_close>().window_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::container_close> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_close>().window_id)>("window_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::container_close& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_close& obj, [[maybe_unused]] FN&& fn){
  fn(obj.window_id, "window_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::container_close>() { return "copper_server::api::packets::server_bound::play::container_close"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::container_close>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::container_slot_state_changed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot_id);
  fn(obj.window_id);
  fn(obj.state);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_slot_state_changed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot_id);
  fn(obj.window_id);
  fn(obj.state);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::container_slot_state_changed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_slot_state_changed>().slot_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_slot_state_changed>().window_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_slot_state_changed>().state)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::container_slot_state_changed> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_slot_state_changed>().slot_id)>("slot_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_slot_state_changed>().window_id)>("window_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::container_slot_state_changed>().state)>("state");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::container_slot_state_changed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot_id, "slot_id");
  fn(obj.window_id, "window_id");
  fn(obj.state, "state");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::container_slot_state_changed& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot_id, "slot_id");
  fn(obj.window_id, "window_id");
  fn(obj.state, "state");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::container_slot_state_changed>() { return "copper_server::api::packets::server_bound::play::container_slot_state_changed"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::container_slot_state_changed>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::cookie_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::cookie_response>().key)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::cookie_response>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::cookie_response> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::cookie_response>().key)>("key");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::cookie_response>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::cookie_response& obj, [[maybe_unused]] FN&& fn){
  fn(obj.key, "key");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::cookie_response>() { return "copper_server::api::packets::server_bound::play::cookie_response"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::cookie_response>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::custom_payload> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::custom_payload>().channel)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::custom_payload>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::custom_payload> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::custom_payload>().channel)>("channel");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::custom_payload>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::custom_payload& obj, [[maybe_unused]] FN&& fn){
  fn(obj.channel, "channel");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::custom_payload>() { return "copper_server::api::packets::server_bound::play::custom_payload"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::custom_payload>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::debug_sample_subscription& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sample_type);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::debug_sample_subscription& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sample_type);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::debug_sample_subscription> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::debug_sample_subscription>().sample_type)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::debug_sample_subscription> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::debug_sample_subscription>().sample_type)>("sample_type");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::debug_sample_subscription& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sample_type, "sample_type");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::debug_sample_subscription& obj, [[maybe_unused]] FN&& fn){
  fn(obj.sample_type, "sample_type");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::debug_sample_subscription>() { return "copper_server::api::packets::server_bound::play::debug_sample_subscription"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::debug_sample_subscription>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::edit_book& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
  fn(obj.entries);
  fn(obj.title);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::edit_book& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
  fn(obj.entries);
  fn(obj.title);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::edit_book> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::edit_book>().slot)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::edit_book>().entries)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::edit_book>().title)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::edit_book> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::edit_book>().slot)>("slot");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::edit_book>().entries)>("entries");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::edit_book>().title)>("title");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::edit_book& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
  fn(obj.entries, "entries");
  fn(obj.title, "title");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::edit_book& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
  fn(obj.entries, "entries");
  fn(obj.title, "title");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::edit_book>() { return "copper_server::api::packets::server_bound::play::edit_book"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::edit_book>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::entity_tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id);
  fn(obj.entity_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::entity_tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id);
  fn(obj.entity_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::entity_tag_query> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::entity_tag_query>().tag_query_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::entity_tag_query>().entity_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::entity_tag_query> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::entity_tag_query>().tag_query_id)>("tag_query_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::entity_tag_query>().entity_id)>("entity_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::entity_tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id, "tag_query_id");
  fn(obj.entity_id, "entity_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::entity_tag_query& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tag_query_id, "tag_query_id");
  fn(obj.entity_id, "entity_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::entity_tag_query>() { return "copper_server::api::packets::server_bound::play::entity_tag_query"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::entity_tag_query>() { return 2; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::interact::hand_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::interact::hand_e>;
static constexpr inline std::array<item, 2> values = {item{"main", copper_server::api::packets::server_bound::play::interact::hand_e::main}, item{"off", copper_server::api::packets::server_bound::play::interact::hand_e::off}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::interact::hand_e>() { return "copper_server::api::packets::server_bound::play::interact::hand_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::interact::interact_& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::interact::interact_& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::interact::interact_> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_>().hand)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::interact::interact_> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_>().hand)>("hand");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::interact::interact_& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::interact::interact_& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::interact::interact_>() { return "copper_server::api::packets::server_bound::play::interact::interact_"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::interact::interact_>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::interact::attack& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::interact::attack& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::interact::attack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::interact::attack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::interact::attack& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::interact::attack& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::interact::attack>() { return "copper_server::api::packets::server_bound::play::interact::attack"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::interact::attack>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::interact::interact_at& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.hand);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::interact::interact_at& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.hand);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::interact::interact_at> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_at>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_at>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_at>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_at>().hand)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::interact::interact_at> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_at>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_at>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_at>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact::interact_at>().hand)>("hand");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::interact::interact_at& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.hand, "hand");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::interact::interact_at& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.hand, "hand");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::interact::interact_at>() { return "copper_server::api::packets::server_bound::play::interact::interact_at"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::interact::interact_at>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::interact& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.type);
  fn(obj.sneak_key_pressed);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::interact& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.type);
  fn(obj.sneak_key_pressed);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::interact> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact>().type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact>().sneak_key_pressed)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::interact> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact>().type)>("type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::interact>().sneak_key_pressed)>("sneak_key_pressed");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::interact& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.type, "type");
  fn(obj.sneak_key_pressed, "sneak_key_pressed");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::interact& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.type, "type");
  fn(obj.sneak_key_pressed, "sneak_key_pressed");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::interact>() { return "copper_server::api::packets::server_bound::play::interact"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::interact>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::jigsaw_generate& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.levels);
  fn(obj.keep_jigsaws);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::jigsaw_generate& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.levels);
  fn(obj.keep_jigsaws);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::jigsaw_generate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::jigsaw_generate>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::jigsaw_generate>().levels)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::jigsaw_generate>().keep_jigsaws)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::jigsaw_generate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::jigsaw_generate>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::jigsaw_generate>().levels)>("levels");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::jigsaw_generate>().keep_jigsaws)>("keep_jigsaws");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::jigsaw_generate& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.levels, "levels");
  fn(obj.keep_jigsaws, "keep_jigsaws");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::jigsaw_generate& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.levels, "levels");
  fn(obj.keep_jigsaws, "keep_jigsaws");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::jigsaw_generate>() { return "copper_server::api::packets::server_bound::play::jigsaw_generate"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::jigsaw_generate>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::keep_alive> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::keep_alive>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::keep_alive> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::keep_alive>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::keep_alive& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::keep_alive>() { return "copper_server::api::packets::server_bound::play::keep_alive"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::keep_alive>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::lock_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.is_locked);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::lock_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.is_locked);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::lock_difficulty> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::lock_difficulty>().is_locked)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::lock_difficulty> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::lock_difficulty>().is_locked)>("is_locked");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::lock_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.is_locked, "is_locked");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::lock_difficulty& obj, [[maybe_unused]] FN&& fn){
  fn(obj.is_locked, "is_locked");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::lock_difficulty>() { return "copper_server::api::packets::server_bound::play::lock_difficulty"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::lock_difficulty>() { return 1; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::move_player_pos::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::move_player_pos::flags_f>;
static constexpr inline std::array<item, 2> values = {item{"on_ground", copper_server::api::packets::server_bound::play::move_player_pos::flags_f::on_ground}, item{"push_against_wall", copper_server::api::packets::server_bound::play::move_player_pos::flags_f::push_against_wall}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::move_player_pos::flags_f>() { return "copper_server::api::packets::server_bound::play::move_player_pos::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::move_player_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_player_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::move_player_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::move_player_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::move_player_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_player_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::move_player_pos>() { return "copper_server::api::packets::server_bound::play::move_player_pos"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::move_player_pos>() { return 4; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::move_player_pos_rot::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::move_player_pos_rot::flags_f>;
static constexpr inline std::array<item, 2> values = {item{"on_ground", copper_server::api::packets::server_bound::play::move_player_pos_rot::flags_f::on_ground}, item{"push_against_wall", copper_server::api::packets::server_bound::play::move_player_pos_rot::flags_f::push_against_wall}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::move_player_pos_rot::flags_f>() { return "copper_server::api::packets::server_bound::play::move_player_pos_rot::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::move_player_pos_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_player_pos_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::move_player_pos_rot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::move_player_pos_rot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_pos_rot>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::move_player_pos_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_player_pos_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::move_player_pos_rot>() { return "copper_server::api::packets::server_bound::play::move_player_pos_rot"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::move_player_pos_rot>() { return 6; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::move_player_rot::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::move_player_rot::flags_f>;
static constexpr inline std::array<item, 2> values = {item{"on_ground", copper_server::api::packets::server_bound::play::move_player_rot::flags_f::on_ground}, item{"push_against_wall", copper_server::api::packets::server_bound::play::move_player_rot::flags_f::push_against_wall}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::move_player_rot::flags_f>() { return "copper_server::api::packets::server_bound::play::move_player_rot::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::move_player_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_player_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::move_player_rot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_rot>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_rot>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_rot>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::move_player_rot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_rot>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_rot>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_rot>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::move_player_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_player_rot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::move_player_rot>() { return "copper_server::api::packets::server_bound::play::move_player_rot"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::move_player_rot>() { return 3; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::move_player_status_only::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::move_player_status_only::flags_f>;
static constexpr inline std::array<item, 2> values = {item{"on_ground", copper_server::api::packets::server_bound::play::move_player_status_only::flags_f::on_ground}, item{"push_against_wall", copper_server::api::packets::server_bound::play::move_player_status_only::flags_f::push_against_wall}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::move_player_status_only::flags_f>() { return "copper_server::api::packets::server_bound::play::move_player_status_only::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::move_player_status_only& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_player_status_only& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::move_player_status_only> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_status_only>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::move_player_status_only> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_player_status_only>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::move_player_status_only& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_player_status_only& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::move_player_status_only>() { return "copper_server::api::packets::server_bound::play::move_player_status_only"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::move_player_status_only>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::move_vehicle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.on_ground);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_vehicle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.yaw);
  fn(obj.pitch);
  fn(obj.on_ground);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::move_vehicle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().pitch)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().on_ground)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::move_vehicle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().pitch)>("pitch");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::move_vehicle>().on_ground)>("on_ground");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::move_vehicle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.on_ground, "on_ground");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::move_vehicle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
  fn(obj.on_ground, "on_ground");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::move_vehicle>() { return "copper_server::api::packets::server_bound::play::move_vehicle"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::move_vehicle>() { return 6; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::paddle_boat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.left_paddle_turning);
  fn(obj.right_paddle_turning);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::paddle_boat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.left_paddle_turning);
  fn(obj.right_paddle_turning);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::paddle_boat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::paddle_boat>().left_paddle_turning)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::paddle_boat>().right_paddle_turning)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::paddle_boat> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::paddle_boat>().left_paddle_turning)>("left_paddle_turning");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::paddle_boat>().right_paddle_turning)>("right_paddle_turning");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::paddle_boat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.left_paddle_turning, "left_paddle_turning");
  fn(obj.right_paddle_turning, "right_paddle_turning");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::paddle_boat& obj, [[maybe_unused]] FN&& fn){
  fn(obj.left_paddle_turning, "left_paddle_turning");
  fn(obj.right_paddle_turning, "right_paddle_turning");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::paddle_boat>() { return "copper_server::api::packets::server_bound::play::paddle_boat"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::paddle_boat>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::pick_item_from_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.include_data);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::pick_item_from_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.include_data);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::pick_item_from_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pick_item_from_block>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pick_item_from_block>().include_data)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::pick_item_from_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pick_item_from_block>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pick_item_from_block>().include_data)>("include_data");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::pick_item_from_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.include_data, "include_data");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::pick_item_from_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.include_data, "include_data");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::pick_item_from_block>() { return "copper_server::api::packets::server_bound::play::pick_item_from_block"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::pick_item_from_block>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::pick_item_from_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.include_data);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::pick_item_from_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.include_data);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::pick_item_from_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pick_item_from_entity>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pick_item_from_entity>().include_data)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::pick_item_from_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pick_item_from_entity>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pick_item_from_entity>().include_data)>("include_data");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::pick_item_from_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.include_data, "include_data");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::pick_item_from_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.include_data, "include_data");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::pick_item_from_entity>() { return "copper_server::api::packets::server_bound::play::pick_item_from_entity"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::pick_item_from_entity>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::ping_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::ping_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::ping_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::ping_request>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::ping_request> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::ping_request>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::ping_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::ping_request& obj, [[maybe_unused]] FN&& fn){
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::ping_request>() { return "copper_server::api::packets::server_bound::play::ping_request"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::ping_request>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::place_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
  fn(obj.recipe_id);
  fn(obj.make_all);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::place_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id);
  fn(obj.recipe_id);
  fn(obj.make_all);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::place_recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::place_recipe>().windows_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::place_recipe>().recipe_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::place_recipe>().make_all)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::place_recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::place_recipe>().windows_id)>("windows_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::place_recipe>().recipe_id)>("recipe_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::place_recipe>().make_all)>("make_all");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::place_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
  fn(obj.recipe_id, "recipe_id");
  fn(obj.make_all, "make_all");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::place_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.windows_id, "windows_id");
  fn(obj.recipe_id, "recipe_id");
  fn(obj.make_all, "make_all");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::place_recipe>() { return "copper_server::api::packets::server_bound::play::place_recipe"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::place_recipe>() { return 3; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::player_abilities::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::player_abilities::flags_f>;
static constexpr inline std::array<item, 1> values = {item{"flying", copper_server::api::packets::server_bound::play::player_abilities::flags_f::flying}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_abilities::flags_f>() { return "copper_server::api::packets::server_bound::play::player_abilities::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::player_abilities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_abilities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::player_abilities> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_abilities>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::player_abilities> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_abilities>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::player_abilities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_abilities& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_abilities>() { return "copper_server::api::packets::server_bound::play::player_abilities"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::player_abilities>() { return 1; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::player_action::status_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::player_action::status_e>;
static constexpr inline std::array<item, 7> values = {item{"digging_start", copper_server::api::packets::server_bound::play::player_action::status_e::digging_start}, item{"digging_canceled", copper_server::api::packets::server_bound::play::player_action::status_e::digging_canceled}, item{"digging_finished", copper_server::api::packets::server_bound::play::player_action::status_e::digging_finished}, item{"drop_item_stack", copper_server::api::packets::server_bound::play::player_action::status_e::drop_item_stack}, item{"drop_item", copper_server::api::packets::server_bound::play::player_action::status_e::drop_item}, item{"right_click_item", copper_server::api::packets::server_bound::play::player_action::status_e::right_click_item}, item{"swap_item_in_hand", copper_server::api::packets::server_bound::play::player_action::status_e::swap_item_in_hand}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_action::status_e>() { return "copper_server::api::packets::server_bound::play::player_action::status_e"; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::player_action::face_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::player_action::face_e>;
static constexpr inline std::array<item, 6> values = {item{"bottom", copper_server::api::packets::server_bound::play::player_action::face_e::bottom}, item{"top", copper_server::api::packets::server_bound::play::player_action::face_e::top}, item{"north", copper_server::api::packets::server_bound::play::player_action::face_e::north}, item{"south", copper_server::api::packets::server_bound::play::player_action::face_e::south}, item{"west", copper_server::api::packets::server_bound::play::player_action::face_e::west}, item{"east", copper_server::api::packets::server_bound::play::player_action::face_e::east}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_action::face_e>() { return "copper_server::api::packets::server_bound::play::player_action::face_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::player_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.status);
  fn(obj.location);
  fn(obj.face);
  fn(obj.block_sequence_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.status);
  fn(obj.location);
  fn(obj.face);
  fn(obj.block_sequence_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::player_action> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_action>().status)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_action>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_action>().face)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_action>().block_sequence_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::player_action> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_action>().status)>("status");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_action>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_action>().face)>("face");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_action>().block_sequence_id)>("block_sequence_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::player_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.status, "status");
  fn(obj.location, "location");
  fn(obj.face, "face");
  fn(obj.block_sequence_id, "block_sequence_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.status, "status");
  fn(obj.location, "location");
  fn(obj.face, "face");
  fn(obj.block_sequence_id, "block_sequence_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_action>() { return "copper_server::api::packets::server_bound::play::player_action"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::player_action>() { return 4; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::player_command::action_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::player_command::action_e>;
static constexpr inline std::array<item, 7> values = {item{"leave_bed", copper_server::api::packets::server_bound::play::player_command::action_e::leave_bed}, item{"start_sprinting", copper_server::api::packets::server_bound::play::player_command::action_e::start_sprinting}, item{"stop_sprinting", copper_server::api::packets::server_bound::play::player_command::action_e::stop_sprinting}, item{"horse_jump_start", copper_server::api::packets::server_bound::play::player_command::action_e::horse_jump_start}, item{"horse_jump_stop", copper_server::api::packets::server_bound::play::player_command::action_e::horse_jump_stop}, item{"inventory_vehicle_open", copper_server::api::packets::server_bound::play::player_command::action_e::inventory_vehicle_open}, item{"elytra_fly", copper_server::api::packets::server_bound::play::player_command::action_e::elytra_fly}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_command::action_e>() { return "copper_server::api::packets::server_bound::play::player_command::action_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::player_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.action);
  fn(obj.jump_boost);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.action);
  fn(obj.jump_boost);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::player_command> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_command>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_command>().action)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_command>().jump_boost)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::player_command> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_command>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_command>().action)>("action");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_command>().jump_boost)>("jump_boost");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::player_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.action, "action");
  fn(obj.jump_boost, "jump_boost");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_command& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.action, "action");
  fn(obj.jump_boost, "jump_boost");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_command>() { return "copper_server::api::packets::server_bound::play::player_command"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::player_command>() { return 3; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::player_input::status_f> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::player_input::status_f>;
static constexpr inline std::array<item, 7> values = {item{"forward", copper_server::api::packets::server_bound::play::player_input::status_f::forward}, item{"backward", copper_server::api::packets::server_bound::play::player_input::status_f::backward}, item{"left", copper_server::api::packets::server_bound::play::player_input::status_f::left}, item{"right", copper_server::api::packets::server_bound::play::player_input::status_f::right}, item{"jump", copper_server::api::packets::server_bound::play::player_input::status_f::jump}, item{"sneak", copper_server::api::packets::server_bound::play::player_input::status_f::sneak}, item{"sprint", copper_server::api::packets::server_bound::play::player_input::status_f::sprint}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_input::status_f>() { return "copper_server::api::packets::server_bound::play::player_input::status_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::player_input& obj, [[maybe_unused]] FN&& fn){
  fn(obj.face);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_input& obj, [[maybe_unused]] FN&& fn){
  fn(obj.face);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::player_input> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_input>().face)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::player_input> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::player_input>().face)>("face");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::player_input& obj, [[maybe_unused]] FN&& fn){
  fn(obj.face, "face");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_input& obj, [[maybe_unused]] FN&& fn){
  fn(obj.face, "face");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_input>() { return "copper_server::api::packets::server_bound::play::player_input"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::player_input>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::player_loaded& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_loaded& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::player_loaded> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::player_loaded> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::player_loaded& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::player_loaded& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::player_loaded>() { return "copper_server::api::packets::server_bound::play::player_loaded"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::player_loaded>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::pong& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::pong& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::pong> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pong>().id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::pong> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::pong>().id)>("id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::pong& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::pong& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::pong>() { return "copper_server::api::packets::server_bound::play::pong"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::pong>() { return 1; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::recipe_book_change_settings::book_type_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::recipe_book_change_settings::book_type_e>;
static constexpr inline std::array<item, 4> values = {item{"crafting", copper_server::api::packets::server_bound::play::recipe_book_change_settings::book_type_e::crafting}, item{"furnace", copper_server::api::packets::server_bound::play::recipe_book_change_settings::book_type_e::furnace}, item{"blast_furnace", copper_server::api::packets::server_bound::play::recipe_book_change_settings::book_type_e::blast_furnace}, item{"smoker", copper_server::api::packets::server_bound::play::recipe_book_change_settings::book_type_e::smoker}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::recipe_book_change_settings::book_type_e>() { return "copper_server::api::packets::server_bound::play::recipe_book_change_settings::book_type_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::recipe_book_change_settings& obj, [[maybe_unused]] FN&& fn){
  fn(obj.book_type);
  fn(obj.book_open);
  fn(obj.filter_active);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::recipe_book_change_settings& obj, [[maybe_unused]] FN&& fn){
  fn(obj.book_type);
  fn(obj.book_open);
  fn(obj.filter_active);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::recipe_book_change_settings> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::recipe_book_change_settings>().book_type)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::recipe_book_change_settings>().book_open)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::recipe_book_change_settings>().filter_active)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::recipe_book_change_settings> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::recipe_book_change_settings>().book_type)>("book_type");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::recipe_book_change_settings>().book_open)>("book_open");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::recipe_book_change_settings>().filter_active)>("filter_active");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::recipe_book_change_settings& obj, [[maybe_unused]] FN&& fn){
  fn(obj.book_type, "book_type");
  fn(obj.book_open, "book_open");
  fn(obj.filter_active, "filter_active");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::recipe_book_change_settings& obj, [[maybe_unused]] FN&& fn){
  fn(obj.book_type, "book_type");
  fn(obj.book_open, "book_open");
  fn(obj.filter_active, "filter_active");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::recipe_book_change_settings>() { return "copper_server::api::packets::server_bound::play::recipe_book_change_settings"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::recipe_book_change_settings>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::recipe_book_seen_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::recipe_book_seen_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::recipe_book_seen_recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::recipe_book_seen_recipe>().recipe_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::recipe_book_seen_recipe> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::recipe_book_seen_recipe>().recipe_id)>("recipe_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::recipe_book_seen_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_id, "recipe_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::recipe_book_seen_recipe& obj, [[maybe_unused]] FN&& fn){
  fn(obj.recipe_id, "recipe_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::recipe_book_seen_recipe>() { return "copper_server::api::packets::server_bound::play::recipe_book_seen_recipe"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::recipe_book_seen_recipe>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::rename_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.new_name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::rename_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.new_name);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::rename_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::rename_item>().new_name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::rename_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::rename_item>().new_name)>("new_name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::rename_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.new_name, "new_name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::rename_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.new_name, "new_name");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::rename_item>() { return "copper_server::api::packets::server_bound::play::rename_item"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::rename_item>() { return 1; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::resource_pack::result_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::resource_pack::result_e>;
static constexpr inline std::array<item, 8> values = {item{"success", copper_server::api::packets::server_bound::play::resource_pack::result_e::success}, item{"declined", copper_server::api::packets::server_bound::play::resource_pack::result_e::declined}, item{"download_failed", copper_server::api::packets::server_bound::play::resource_pack::result_e::download_failed}, item{"accepted", copper_server::api::packets::server_bound::play::resource_pack::result_e::accepted}, item{"downloaded", copper_server::api::packets::server_bound::play::resource_pack::result_e::downloaded}, item{"invalid_url", copper_server::api::packets::server_bound::play::resource_pack::result_e::invalid_url}, item{"reload_failed", copper_server::api::packets::server_bound::play::resource_pack::result_e::reload_failed}, item{"discarded", copper_server::api::packets::server_bound::play::resource_pack::result_e::discarded}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::resource_pack::result_e>() { return "copper_server::api::packets::server_bound::play::resource_pack::result_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::resource_pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.result);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::resource_pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
  fn(obj.result);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::resource_pack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::resource_pack>().uuid)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::resource_pack>().result)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::resource_pack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::resource_pack>().uuid)>("uuid");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::resource_pack>().result)>("result");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::resource_pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.result, "result");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::resource_pack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
  fn(obj.result, "result");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::resource_pack>() { return "copper_server::api::packets::server_bound::play::resource_pack"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::resource_pack>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::seen_advancements::opened_tab& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tab_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::seen_advancements::opened_tab& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tab_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::seen_advancements::opened_tab> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::seen_advancements::opened_tab>().tab_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::seen_advancements::opened_tab> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::seen_advancements::opened_tab>().tab_id)>("tab_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::seen_advancements::opened_tab& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tab_id, "tab_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::seen_advancements::opened_tab& obj, [[maybe_unused]] FN&& fn){
  fn(obj.tab_id, "tab_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::seen_advancements::opened_tab>() { return "copper_server::api::packets::server_bound::play::seen_advancements::opened_tab"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::seen_advancements::opened_tab>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::seen_advancements::closed_screen& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::seen_advancements::closed_screen& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::seen_advancements::closed_screen> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::seen_advancements::closed_screen> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::seen_advancements::closed_screen& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::seen_advancements::closed_screen& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::seen_advancements::closed_screen>() { return "copper_server::api::packets::server_bound::play::seen_advancements::closed_screen"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::seen_advancements::closed_screen>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::seen_advancements& obj, [[maybe_unused]] FN&& fn){
  fn(obj.action);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::seen_advancements& obj, [[maybe_unused]] FN&& fn){
  fn(obj.action);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::seen_advancements> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::seen_advancements>().action)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::seen_advancements> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::seen_advancements>().action)>("action");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::seen_advancements& obj, [[maybe_unused]] FN&& fn){
  fn(obj.action, "action");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::seen_advancements& obj, [[maybe_unused]] FN&& fn){
  fn(obj.action, "action");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::seen_advancements>() { return "copper_server::api::packets::server_bound::play::seen_advancements"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::seen_advancements>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::select_trade& obj, [[maybe_unused]] FN&& fn){
  fn(obj.selected_slot);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::select_trade& obj, [[maybe_unused]] FN&& fn){
  fn(obj.selected_slot);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::select_trade> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::select_trade>().selected_slot)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::select_trade> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::select_trade>().selected_slot)>("selected_slot");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::select_trade& obj, [[maybe_unused]] FN&& fn){
  fn(obj.selected_slot, "selected_slot");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::select_trade& obj, [[maybe_unused]] FN&& fn){
  fn(obj.selected_slot, "selected_slot");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::select_trade>() { return "copper_server::api::packets::server_bound::play::select_trade"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::select_trade>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_beacon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.primary_effect);
  fn(obj.secondary_effect);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_beacon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.primary_effect);
  fn(obj.secondary_effect);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_beacon> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_beacon>().primary_effect)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_beacon>().secondary_effect)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_beacon> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_beacon>().primary_effect)>("primary_effect");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_beacon>().secondary_effect)>("secondary_effect");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_beacon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.primary_effect, "primary_effect");
  fn(obj.secondary_effect, "secondary_effect");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_beacon& obj, [[maybe_unused]] FN&& fn){
  fn(obj.primary_effect, "primary_effect");
  fn(obj.secondary_effect, "secondary_effect");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_beacon>() { return "copper_server::api::packets::server_bound::play::set_beacon"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_beacon>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_carried_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_carried_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_carried_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_carried_item>().slot)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_carried_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_carried_item>().slot)>("slot");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_carried_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_carried_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_carried_item>() { return "copper_server::api::packets::server_bound::play::set_carried_item"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_carried_item>() { return 1; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::set_command_block::mode_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::set_command_block::mode_e>;
static constexpr inline std::array<item, 3> values = {item{"chain", copper_server::api::packets::server_bound::play::set_command_block::mode_e::chain}, item{"repeating", copper_server::api::packets::server_bound::play::set_command_block::mode_e::repeating}, item{"impulse", copper_server::api::packets::server_bound::play::set_command_block::mode_e::impulse}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_command_block::mode_e>() { return "copper_server::api::packets::server_bound::play::set_command_block::mode_e"; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::set_command_block::flags_f> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::set_command_block::flags_f>;
static constexpr inline std::array<item, 3> values = {item{"track_output", copper_server::api::packets::server_bound::play::set_command_block::flags_f::track_output}, item{"is_conditional", copper_server::api::packets::server_bound::play::set_command_block::flags_f::is_conditional}, item{"automatic", copper_server::api::packets::server_bound::play::set_command_block::flags_f::automatic}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_command_block::flags_f>() { return "copper_server::api::packets::server_bound::play::set_command_block::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_command_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.command);
  fn(obj.mode);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_command_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.command);
  fn(obj.mode);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_command_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_block>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_block>().command)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_block>().mode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_block>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_command_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_block>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_block>().command)>("command");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_block>().mode)>("mode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_block>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_command_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.command, "command");
  fn(obj.mode, "mode");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_command_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.command, "command");
  fn(obj.mode, "mode");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_command_block>() { return "copper_server::api::packets::server_bound::play::set_command_block"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_command_block>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_command_minecart& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.command);
  fn(obj.track_output);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_command_minecart& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id);
  fn(obj.command);
  fn(obj.track_output);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_command_minecart> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_minecart>().entity_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_minecart>().command)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_minecart>().track_output)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_command_minecart> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_minecart>().entity_id)>("entity_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_minecart>().command)>("command");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_command_minecart>().track_output)>("track_output");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_command_minecart& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.command, "command");
  fn(obj.track_output, "track_output");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_command_minecart& obj, [[maybe_unused]] FN&& fn){
  fn(obj.entity_id, "entity_id");
  fn(obj.command, "command");
  fn(obj.track_output, "track_output");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_command_minecart>() { return "copper_server::api::packets::server_bound::play::set_command_minecart"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_command_minecart>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_creative_mode_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_creative_mode_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_creative_mode_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_creative_mode_slot>().slot)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_creative_mode_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_creative_mode_slot>().slot)>("slot");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_creative_mode_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_creative_mode_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slot, "slot");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_creative_mode_slot>() { return "copper_server::api::packets::server_bound::play::set_creative_mode_slot"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_creative_mode_slot>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_jigsaw_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.name);
  fn(obj.target);
  fn(obj.pool);
  fn(obj.final_state);
  fn(obj.joint_state);
  fn(obj.selection_priority);
  fn(obj.placement_priority);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_jigsaw_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.name);
  fn(obj.target);
  fn(obj.pool);
  fn(obj.final_state);
  fn(obj.joint_state);
  fn(obj.selection_priority);
  fn(obj.placement_priority);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_jigsaw_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().target)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().pool)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().final_state)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().joint_state)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().selection_priority)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().placement_priority)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_jigsaw_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().target)>("target");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().pool)>("pool");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().final_state)>("final_state");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().joint_state)>("joint_state");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().selection_priority)>("selection_priority");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_jigsaw_block>().placement_priority)>("placement_priority");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_jigsaw_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.name, "name");
  fn(obj.target, "target");
  fn(obj.pool, "pool");
  fn(obj.final_state, "final_state");
  fn(obj.joint_state, "joint_state");
  fn(obj.selection_priority, "selection_priority");
  fn(obj.placement_priority, "placement_priority");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_jigsaw_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.name, "name");
  fn(obj.target, "target");
  fn(obj.pool, "pool");
  fn(obj.final_state, "final_state");
  fn(obj.joint_state, "joint_state");
  fn(obj.selection_priority, "selection_priority");
  fn(obj.placement_priority, "placement_priority");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_jigsaw_block>() { return "copper_server::api::packets::server_bound::play::set_jigsaw_block"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_jigsaw_block>() { return 8; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::set_structure_block::mirror_side_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::set_structure_block::mirror_side_e>;
static constexpr inline std::array<item, 3> values = {item{"none", copper_server::api::packets::server_bound::play::set_structure_block::mirror_side_e::none}, item{"left_right", copper_server::api::packets::server_bound::play::set_structure_block::mirror_side_e::left_right}, item{"front_back", copper_server::api::packets::server_bound::play::set_structure_block::mirror_side_e::front_back}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_structure_block::mirror_side_e>() { return "copper_server::api::packets::server_bound::play::set_structure_block::mirror_side_e"; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::set_structure_block::rotation_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::set_structure_block::rotation_e>;
static constexpr inline std::array<item, 4> values = {item{"none", copper_server::api::packets::server_bound::play::set_structure_block::rotation_e::none}, item{"clockwise_90", copper_server::api::packets::server_bound::play::set_structure_block::rotation_e::clockwise_90}, item{"clockwise_180", copper_server::api::packets::server_bound::play::set_structure_block::rotation_e::clockwise_180}, item{"counterclockwise_90", copper_server::api::packets::server_bound::play::set_structure_block::rotation_e::counterclockwise_90}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_structure_block::rotation_e>() { return "copper_server::api::packets::server_bound::play::set_structure_block::rotation_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block::ignore_entities& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block::ignore_entities& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_structure_block::ignore_entities> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_structure_block::ignore_entities> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block::ignore_entities& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block::ignore_entities& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_structure_block::ignore_entities>() { return "copper_server::api::packets::server_bound::play::set_structure_block::ignore_entities"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_structure_block::ignore_entities>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block::show_air& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block::show_air& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_structure_block::show_air> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_structure_block::show_air> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block::show_air& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block::show_air& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_structure_block::show_air>() { return "copper_server::api::packets::server_bound::play::set_structure_block::show_air"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_structure_block::show_air>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block::show_bounding_block& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block::show_bounding_block& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_structure_block::show_bounding_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_structure_block::show_bounding_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block::show_bounding_block& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block::show_bounding_block& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_structure_block::show_bounding_block>() { return "copper_server::api::packets::server_bound::play::set_structure_block::show_bounding_block"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_structure_block::show_bounding_block>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block::strict_placement& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block::strict_placement& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_structure_block::strict_placement> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_structure_block::strict_placement> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block::strict_placement& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block::strict_placement& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_structure_block::strict_placement>() { return "copper_server::api::packets::server_bound::play::set_structure_block::strict_placement"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_structure_block::strict_placement>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.action);
  fn(obj.mode);
  fn(obj.name);
  fn(obj.offset_x);
  fn(obj.offset_y);
  fn(obj.offset_z);
  fn(obj.size_x);
  fn(obj.size_y);
  fn(obj.size_z);
  fn(obj.mirror_side);
  fn(obj.rotation);
  fn(obj.metadata);
  fn(obj.integrity);
  fn(obj.seed);
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.action);
  fn(obj.mode);
  fn(obj.name);
  fn(obj.offset_x);
  fn(obj.offset_y);
  fn(obj.offset_z);
  fn(obj.size_x);
  fn(obj.size_y);
  fn(obj.size_z);
  fn(obj.mirror_side);
  fn(obj.rotation);
  fn(obj.metadata);
  fn(obj.integrity);
  fn(obj.seed);
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_structure_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().action)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().mode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().name)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().offset_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().offset_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().offset_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().size_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().size_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().size_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().mirror_side)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().rotation)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().metadata)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().integrity)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().seed)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_structure_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().action)>("action");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().mode)>("mode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().name)>("name");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().offset_x)>("offset_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().offset_y)>("offset_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().offset_z)>("offset_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().size_x)>("size_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().size_y)>("size_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().size_z)>("size_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().mirror_side)>("mirror_side");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().rotation)>("rotation");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().metadata)>("metadata");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().integrity)>("integrity");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().seed)>("seed");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_structure_block>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_structure_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.action, "action");
  fn(obj.mode, "mode");
  fn(obj.name, "name");
  fn(obj.offset_x, "offset_x");
  fn(obj.offset_y, "offset_y");
  fn(obj.offset_z, "offset_z");
  fn(obj.size_x, "size_x");
  fn(obj.size_y, "size_y");
  fn(obj.size_z, "size_z");
  fn(obj.mirror_side, "mirror_side");
  fn(obj.rotation, "rotation");
  fn(obj.metadata, "metadata");
  fn(obj.integrity, "integrity");
  fn(obj.seed, "seed");
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_structure_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.action, "action");
  fn(obj.mode, "mode");
  fn(obj.name, "name");
  fn(obj.offset_x, "offset_x");
  fn(obj.offset_y, "offset_y");
  fn(obj.offset_z, "offset_z");
  fn(obj.size_x, "size_x");
  fn(obj.size_y, "size_y");
  fn(obj.size_z, "size_z");
  fn(obj.mirror_side, "mirror_side");
  fn(obj.rotation, "rotation");
  fn(obj.metadata, "metadata");
  fn(obj.integrity, "integrity");
  fn(obj.seed, "seed");
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_structure_block>() { return "copper_server::api::packets::server_bound::play::set_structure_block"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_structure_block>() { return 16; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::set_test_block::mode_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::set_test_block::mode_e>;
static constexpr inline std::array<item, 4> values = {item{"start", copper_server::api::packets::server_bound::play::set_test_block::mode_e::start}, item{"log", copper_server::api::packets::server_bound::play::set_test_block::mode_e::log}, item{"fail", copper_server::api::packets::server_bound::play::set_test_block::mode_e::fail}, item{"accept", copper_server::api::packets::server_bound::play::set_test_block::mode_e::accept}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_test_block::mode_e>() { return "copper_server::api::packets::server_bound::play::set_test_block::mode_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::set_test_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.mode);
  fn(obj.message);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_test_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.mode);
  fn(obj.message);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::set_test_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_test_block>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_test_block>().mode)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_test_block>().message)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::set_test_block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_test_block>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_test_block>().mode)>("mode");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::set_test_block>().message)>("message");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::set_test_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.mode, "mode");
  fn(obj.message, "message");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::set_test_block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.mode, "mode");
  fn(obj.message, "message");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::set_test_block>() { return "copper_server::api::packets::server_bound::play::set_test_block"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::set_test_block>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::sign_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.is_front_text);
  fn(obj.lines);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::sign_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.is_front_text);
  fn(obj.lines);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::sign_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::sign_update>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::sign_update>().is_front_text)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::sign_update>().lines)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::sign_update> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::sign_update>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::sign_update>().is_front_text)>("is_front_text");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::sign_update>().lines)>("lines");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::sign_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.is_front_text, "is_front_text");
  fn(obj.lines, "lines");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::sign_update& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.is_front_text, "is_front_text");
  fn(obj.lines, "lines");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::sign_update>() { return "copper_server::api::packets::server_bound::play::sign_update"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::sign_update>() { return 3; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::swing::hand_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::swing::hand_e>;
static constexpr inline std::array<item, 2> values = {item{"main", copper_server::api::packets::server_bound::play::swing::hand_e::main}, item{"off", copper_server::api::packets::server_bound::play::swing::hand_e::off}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::swing::hand_e>() { return "copper_server::api::packets::server_bound::play::swing::hand_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::swing& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::swing& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::swing> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::swing>().hand)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::swing> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::swing>().hand)>("hand");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::swing& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::swing& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::swing>() { return "copper_server::api::packets::server_bound::play::swing"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::swing>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::teleport_to_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::teleport_to_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::teleport_to_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::teleport_to_entity>().uuid)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::teleport_to_entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::teleport_to_entity>().uuid)>("uuid");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::teleport_to_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::teleport_to_entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.uuid, "uuid");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::teleport_to_entity>() { return "copper_server::api::packets::server_bound::play::teleport_to_entity"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::teleport_to_entity>() { return 1; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::test_instance_block_action::action_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::test_instance_block_action::action_e>;
static constexpr inline std::array<item, 7> values = {item{"init", copper_server::api::packets::server_bound::play::test_instance_block_action::action_e::init}, item{"query", copper_server::api::packets::server_bound::play::test_instance_block_action::action_e::query}, item{"set", copper_server::api::packets::server_bound::play::test_instance_block_action::action_e::set}, item{"reset", copper_server::api::packets::server_bound::play::test_instance_block_action::action_e::reset}, item{"save", copper_server::api::packets::server_bound::play::test_instance_block_action::action_e::save}, item{"export_", copper_server::api::packets::server_bound::play::test_instance_block_action::action_e::export_}, item{"run", copper_server::api::packets::server_bound::play::test_instance_block_action::action_e::run}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::test_instance_block_action::action_e>() { return "copper_server::api::packets::server_bound::play::test_instance_block_action::action_e"; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::test_instance_block_action::rotation_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::test_instance_block_action::rotation_e>;
static constexpr inline std::array<item, 4> values = {item{"none", copper_server::api::packets::server_bound::play::test_instance_block_action::rotation_e::none}, item{"clockwise_90", copper_server::api::packets::server_bound::play::test_instance_block_action::rotation_e::clockwise_90}, item{"clockwise_180", copper_server::api::packets::server_bound::play::test_instance_block_action::rotation_e::clockwise_180}, item{"counterclockwise_90", copper_server::api::packets::server_bound::play::test_instance_block_action::rotation_e::counterclockwise_90}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::test_instance_block_action::rotation_e>() { return "copper_server::api::packets::server_bound::play::test_instance_block_action::rotation_e"; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::test_instance_block_action::status_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::test_instance_block_action::status_e>;
static constexpr inline std::array<item, 3> values = {item{"cleared", copper_server::api::packets::server_bound::play::test_instance_block_action::status_e::cleared}, item{"running", copper_server::api::packets::server_bound::play::test_instance_block_action::status_e::running}, item{"finished", copper_server::api::packets::server_bound::play::test_instance_block_action::status_e::finished}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::test_instance_block_action::status_e>() { return "copper_server::api::packets::server_bound::play::test_instance_block_action::status_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::test_instance_block_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.action);
  fn(obj.test_id);
  fn(obj.size_x);
  fn(obj.size_y);
  fn(obj.size_z);
  fn(obj.rotation);
  fn(obj.ignore_entities);
  fn(obj.status);
  fn(obj.error_message);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::test_instance_block_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location);
  fn(obj.action);
  fn(obj.test_id);
  fn(obj.size_x);
  fn(obj.size_y);
  fn(obj.size_z);
  fn(obj.rotation);
  fn(obj.ignore_entities);
  fn(obj.status);
  fn(obj.error_message);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::test_instance_block_action> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().action)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().test_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().size_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().size_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().size_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().rotation)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().ignore_entities)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().status)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().error_message)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::test_instance_block_action> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().action)>("action");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().test_id)>("test_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().size_x)>("size_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().size_y)>("size_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().size_z)>("size_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().rotation)>("rotation");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().ignore_entities)>("ignore_entities");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().status)>("status");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::test_instance_block_action>().error_message)>("error_message");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::test_instance_block_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.action, "action");
  fn(obj.test_id, "test_id");
  fn(obj.size_x, "size_x");
  fn(obj.size_y, "size_y");
  fn(obj.size_z, "size_z");
  fn(obj.rotation, "rotation");
  fn(obj.ignore_entities, "ignore_entities");
  fn(obj.status, "status");
  fn(obj.error_message, "error_message");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::test_instance_block_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.location, "location");
  fn(obj.action, "action");
  fn(obj.test_id, "test_id");
  fn(obj.size_x, "size_x");
  fn(obj.size_y, "size_y");
  fn(obj.size_z, "size_z");
  fn(obj.rotation, "rotation");
  fn(obj.ignore_entities, "ignore_entities");
  fn(obj.status, "status");
  fn(obj.error_message, "error_message");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::test_instance_block_action>() { return "copper_server::api::packets::server_bound::play::test_instance_block_action"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::test_instance_block_action>() { return 10; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::use_item_on::hand_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::use_item_on::hand_e>;
static constexpr inline std::array<item, 2> values = {item{"main", copper_server::api::packets::server_bound::play::use_item_on::hand_e::main}, item{"off", copper_server::api::packets::server_bound::play::use_item_on::hand_e::off}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::use_item_on::hand_e>() { return "copper_server::api::packets::server_bound::play::use_item_on::hand_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::use_item_on& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
  fn(obj.location);
  fn(obj.face);
  fn(obj.cursor_x);
  fn(obj.cursor_y);
  fn(obj.cursor_z);
  fn(obj.inside_block);
  fn(obj.world_border_hit);
  fn(obj.block_sequence_id);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::use_item_on& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
  fn(obj.location);
  fn(obj.face);
  fn(obj.cursor_x);
  fn(obj.cursor_y);
  fn(obj.cursor_z);
  fn(obj.inside_block);
  fn(obj.world_border_hit);
  fn(obj.block_sequence_id);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::use_item_on> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().hand)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().location)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().face)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().cursor_x)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().cursor_y)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().cursor_z)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().inside_block)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().world_border_hit)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().block_sequence_id)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::use_item_on> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().hand)>("hand");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().location)>("location");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().face)>("face");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().cursor_x)>("cursor_x");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().cursor_y)>("cursor_y");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().cursor_z)>("cursor_z");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().inside_block)>("inside_block");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().world_border_hit)>("world_border_hit");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item_on>().block_sequence_id)>("block_sequence_id");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::use_item_on& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
  fn(obj.location, "location");
  fn(obj.face, "face");
  fn(obj.cursor_x, "cursor_x");
  fn(obj.cursor_y, "cursor_y");
  fn(obj.cursor_z, "cursor_z");
  fn(obj.inside_block, "inside_block");
  fn(obj.world_border_hit, "world_border_hit");
  fn(obj.block_sequence_id, "block_sequence_id");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::use_item_on& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
  fn(obj.location, "location");
  fn(obj.face, "face");
  fn(obj.cursor_x, "cursor_x");
  fn(obj.cursor_y, "cursor_y");
  fn(obj.cursor_z, "cursor_z");
  fn(obj.inside_block, "inside_block");
  fn(obj.world_border_hit, "world_border_hit");
  fn(obj.block_sequence_id, "block_sequence_id");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::use_item_on>() { return "copper_server::api::packets::server_bound::play::use_item_on"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::use_item_on>() { return 9; }
template<>struct enum_data<copper_server::api::packets::server_bound::play::use_item::hand_e> {using item = std::pair<std::string_view, copper_server::api::packets::server_bound::play::use_item::hand_e>;
static constexpr inline std::array<item, 2> values = {item{"main", copper_server::api::packets::server_bound::play::use_item::hand_e::main}, item{"off", copper_server::api::packets::server_bound::play::use_item::hand_e::off}};};
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::use_item::hand_e>() { return "copper_server::api::packets::server_bound::play::use_item::hand_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::use_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
  fn(obj.block_sequence_id);
  fn(obj.yaw);
  fn(obj.pitch);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::use_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand);
  fn(obj.block_sequence_id);
  fn(obj.yaw);
  fn(obj.pitch);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::use_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item>().hand)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item>().block_sequence_id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item>().pitch)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::use_item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item>().hand)>("hand");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item>().block_sequence_id)>("block_sequence_id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::use_item>().pitch)>("pitch");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::use_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
  fn(obj.block_sequence_id, "block_sequence_id");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::use_item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.hand, "hand");
  fn(obj.block_sequence_id, "block_sequence_id");
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::use_item>() { return "copper_server::api::packets::server_bound::play::use_item"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::use_item>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::api::packets::server_bound::play::custom_click_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.payload);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::api::packets::server_bound::play::custom_click_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id);
  fn(obj.payload);
}
template<>struct for_each_type_s<copper_server::api::packets::server_bound::play::custom_click_action> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::custom_click_action>().id)>();
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::custom_click_action>().payload)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::api::packets::server_bound::play::custom_click_action> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::custom_click_action>().id)>("id");
  fn.template operator()<decltype(std::declval<copper_server::api::packets::server_bound::play::custom_click_action>().payload)>("payload");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::api::packets::server_bound::play::custom_click_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.payload, "payload");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::api::packets::server_bound::play::custom_click_action& obj, [[maybe_unused]] FN&& fn){
  fn(obj.id, "id");
  fn(obj.payload, "payload");
}
template<>consteval std::string_view type_name<copper_server::api::packets::server_bound::play::custom_click_action>() { return "copper_server::api::packets::server_bound::play::custom_click_action"; }
template<>consteval size_t fields_count<copper_server::api::packets::server_bound::play::custom_click_action>() { return 2; }
}
