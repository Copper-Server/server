// Generated by reflect_map tool
#pragma once
#include <string>
namespace copper_server::reflect{
template<class A, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::for_each_type<A>& obj, [[maybe_unused]] FN&& fn){
}
template<class A, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::for_each_type<A>& obj, [[maybe_unused]] FN&& fn){
}
template<class A>struct for_each_type_s<copper_server::base_objects::for_each_type<A>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class A>struct for_each_type_with_name_s<copper_server::base_objects::for_each_type<A>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class A, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::for_each_type<A>& obj, [[maybe_unused]] FN&& fn){
}
template<class A, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::for_each_type<A>& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::switches_to::status& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::switches_to::status& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::switches_to::status> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::switches_to::status> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::switches_to::status& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::switches_to::status& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::switches_to::status>() { return "copper_server::base_objects::switches_to::status"; }
template<>consteval size_t fields_count<copper_server::base_objects::switches_to::status>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::switches_to::login& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::switches_to::login& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::switches_to::login> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::switches_to::login> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::switches_to::login& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::switches_to::login& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::switches_to::login>() { return "copper_server::base_objects::switches_to::login"; }
template<>consteval size_t fields_count<copper_server::base_objects::switches_to::login>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::switches_to::configuration& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::switches_to::configuration& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::switches_to::configuration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::switches_to::configuration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::switches_to::configuration& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::switches_to::configuration& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::switches_to::configuration>() { return "copper_server::base_objects::switches_to::configuration"; }
template<>consteval size_t fields_count<copper_server::base_objects::switches_to::configuration>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::switches_to::play& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::switches_to::play& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::switches_to::play> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::switches_to::play> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::switches_to::play& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::switches_to::play& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::switches_to::play>() { return "copper_server::base_objects::switches_to::play"; }
template<>consteval size_t fields_count<copper_server::base_objects::switches_to::play>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::disconnect_after& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::disconnect_after& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::disconnect_after> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::disconnect_after> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::disconnect_after& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::disconnect_after& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::disconnect_after>() { return "copper_server::base_objects::disconnect_after"; }
template<>consteval size_t fields_count<copper_server::base_objects::disconnect_after>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::compound_packet& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::compound_packet& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::compound_packet> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::compound_packet> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::compound_packet& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::compound_packet& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::compound_packet>() { return "copper_server::base_objects::compound_packet"; }
template<>consteval size_t fields_count<copper_server::base_objects::compound_packet>() { return 0; }
template<int32_t id, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::packet<id>& obj, [[maybe_unused]] FN&& fn){
}
template<int32_t id, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::packet<id>& obj, [[maybe_unused]] FN&& fn){
}
template<int32_t id>struct for_each_type_s<copper_server::base_objects::packet<id>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<int32_t id>struct for_each_type_with_name_s<copper_server::base_objects::packet<id>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<int32_t id, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::packet<id>& obj, [[maybe_unused]] FN&& fn){
}
template<int32_t id, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::packet<id>& obj, [[maybe_unused]] FN&& fn){
}
template<int32_t value, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::enum_item<value>& obj, [[maybe_unused]] FN&& fn){
}
template<int32_t value, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::enum_item<value>& obj, [[maybe_unused]] FN&& fn){
}
template<int32_t value>struct for_each_type_s<copper_server::base_objects::enum_item<value>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<int32_t value>struct for_each_type_with_name_s<copper_server::base_objects::enum_item<value>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<int32_t value, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::enum_item<value>& obj, [[maybe_unused]] FN&& fn){
}
template<int32_t value, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::enum_item<value>& obj, [[maybe_unused]] FN&& fn){
}
template<size_t value, size_t mask, ptrdiff_t order, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::flag_item<value, mask, order>& obj, [[maybe_unused]] FN&& fn){
}
template<size_t value, size_t mask, ptrdiff_t order, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::flag_item<value, mask, order>& obj, [[maybe_unused]] FN&& fn){
}
template<size_t value, size_t mask, ptrdiff_t order>struct for_each_type_s<copper_server::base_objects::flag_item<value, mask, order>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<size_t value, size_t mask, ptrdiff_t order>struct for_each_type_with_name_s<copper_server::base_objects::flag_item<value, mask, order>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<size_t value, size_t mask, ptrdiff_t order, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::flag_item<value, mask, order>& obj, [[maybe_unused]] FN&& fn){
}
template<size_t value, size_t mask, ptrdiff_t order, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::flag_item<value, mask, order>& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::identifier& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::identifier& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::identifier> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::identifier>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::identifier> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::identifier>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::identifier& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::identifier& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::identifier>() { return "copper_server::base_objects::identifier"; }
template<>consteval size_t fields_count<copper_server::base_objects::identifier>() { return 1; }
template<size_t size, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::string_sized<size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<size_t size, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::string_sized<size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<size_t size>struct for_each_type_s<copper_server::base_objects::string_sized<size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::string_sized<size>>().value)>();
}
};
template<size_t size>struct for_each_type_with_name_s<copper_server::base_objects::string_sized<size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::string_sized<size>>().value)>("value");
}
};
template<size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::string_sized<size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::string_sized<size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::json_text_component& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::json_text_component& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::json_text_component> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::json_text_component>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::json_text_component> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::json_text_component>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::json_text_component& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::json_text_component& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::json_text_component>() { return "copper_server::base_objects::json_text_component"; }
template<>consteval size_t fields_count<copper_server::base_objects::json_text_component>() { return 1; }
template<class T, T min, T max, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::limited_num<T, min, max>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class T, T min, T max, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::limited_num<T, min, max>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class T, T min, T max>struct for_each_type_s<copper_server::base_objects::limited_num<T, min, max>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::limited_num<T, min, max>>().value)>();
}
};
template<class T, T min, T max>struct for_each_type_with_name_s<copper_server::base_objects::limited_num<T, min, max>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::limited_num<T, min, max>>().value)>("value");
}
};
template<class T, T min, T max, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::limited_num<T, min, max>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class T, T min, T max, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::limited_num<T, min, max>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::var_int32& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::var_int32& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::var_int32> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::var_int32>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::var_int32> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::var_int32>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::var_int32& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::var_int32& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::var_int32>() { return "copper_server::base_objects::var_int32"; }
template<>consteval size_t fields_count<copper_server::base_objects::var_int32>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::var_int64& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::var_int64& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::var_int64> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::var_int64>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::var_int64> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::var_int64>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::var_int64& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::var_int64& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::var_int64>() { return "copper_server::base_objects::var_int64"; }
template<>consteval size_t fields_count<copper_server::base_objects::var_int64>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::optional_var_int32& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::optional_var_int32& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::optional_var_int32> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::optional_var_int32> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::optional_var_int32& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::optional_var_int32& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::optional_var_int32>() { return "copper_server::base_objects::optional_var_int32"; }
template<>consteval size_t fields_count<copper_server::base_objects::optional_var_int32>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::optional_var_int64& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::optional_var_int64& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::optional_var_int64> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::optional_var_int64> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::optional_var_int64& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::optional_var_int64& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::optional_var_int64>() { return "copper_server::base_objects::optional_var_int64"; }
template<>consteval size_t fields_count<copper_server::base_objects::optional_var_int64>() { return 0; }
template<class Value, class T, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::value_optional<Value, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v);
  fn(obj.rest);
}
template<class Value, class T, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::value_optional<Value, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v);
  fn(obj.rest);
}
template<class Value, class T>struct for_each_type_s<copper_server::base_objects::value_optional<Value, T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::value_optional<Value, T>>().v)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::value_optional<Value, T>>().rest)>();
}
};
template<class Value, class T>struct for_each_type_with_name_s<copper_server::base_objects::value_optional<Value, T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::value_optional<Value, T>>().v)>("v");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::value_optional<Value, T>>().rest)>("rest");
}
};
template<class Value, class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::value_optional<Value, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v, "v");
  fn(obj.rest, "rest");
}
template<class Value, class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::value_optional<Value, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v, "v");
  fn(obj.rest, "rest");
}
template<class Value, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::depends_next<Value>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class Value, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::depends_next<Value>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class Value>struct for_each_type_s<copper_server::base_objects::depends_next<Value>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::depends_next<Value>>().value)>();
}
};
template<class Value>struct for_each_type_with_name_s<copper_server::base_objects::depends_next<Value>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::depends_next<Value>>().value)>("value");
}
};
template<class Value, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::depends_next<Value>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class Value, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::depends_next<Value>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>struct enum_data<copper_server::base_objects::size_source> {using item = std::pair<std::string_view, copper_server::base_objects::size_source>;
static constexpr inline std::array<item, 2> values = {item{"get_world_chunks_height", copper_server::base_objects::size_source::get_world_chunks_height}, item{"get_world_blocks_height", copper_server::base_objects::size_source::get_world_blocks_height}};};
template<>consteval std::string_view type_name<copper_server::base_objects::size_source>() { return "copper_server::base_objects::size_source"; }
template<auto... DependedValues, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::no_size<DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<auto... DependedValues, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::no_size<DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<auto... DependedValues>struct for_each_type_s<copper_server::base_objects::no_size<DependedValues...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<auto... DependedValues>struct for_each_type_with_name_s<copper_server::base_objects::no_size<DependedValues...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<auto... DependedValues, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::no_size<DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<auto... DependedValues, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::no_size<DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::size_from_packet& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::size_from_packet& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::size_from_packet> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::size_from_packet> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::size_from_packet& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::size_from_packet& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::size_from_packet>() { return "copper_server::base_objects::size_from_packet"; }
template<>consteval size_t fields_count<copper_server::base_objects::size_from_packet>() { return 0; }
template<class T, size_t size, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::list_array_sized<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::list_array_sized<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size>struct for_each_type_s<copper_server::base_objects::list_array_sized<T, size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, size_t size>struct for_each_type_with_name_s<copper_server::base_objects::list_array_sized<T, size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::list_array_sized<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::list_array_sized<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, auto... DependedValues, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::list_array_sized_no_size<T, size, DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, auto... DependedValues, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::list_array_sized_no_size<T, size, DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, auto... DependedValues>struct for_each_type_s<copper_server::base_objects::list_array_sized_no_size<T, size, DependedValues...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, size_t size, auto... DependedValues>struct for_each_type_with_name_s<copper_server::base_objects::list_array_sized_no_size<T, size, DependedValues...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, size_t size, auto... DependedValues, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::list_array_sized_no_size<T, size, DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, auto... DependedValues, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::list_array_sized_no_size<T, size, DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, auto... DependedValues, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::list_array_no_size<T, DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, auto... DependedValues, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::list_array_no_size<T, DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, auto... DependedValues>struct for_each_type_s<copper_server::base_objects::list_array_no_size<T, DependedValues...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, auto... DependedValues>struct for_each_type_with_name_s<copper_server::base_objects::list_array_no_size<T, DependedValues...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, auto... DependedValues, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::list_array_no_size<T, DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, auto... DependedValues, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::list_array_no_size<T, DependedValues...>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::list_array_sized_siz_from_packet<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::list_array_sized_siz_from_packet<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size>struct for_each_type_s<copper_server::base_objects::list_array_sized_siz_from_packet<T, size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, size_t size>struct for_each_type_with_name_s<copper_server::base_objects::list_array_sized_siz_from_packet<T, size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::list_array_sized_siz_from_packet<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::list_array_sized_siz_from_packet<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, class T_size, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::sized_entry<T, T_size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class T, class T_size, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::sized_entry<T, T_size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class T, class T_size>struct for_each_type_s<copper_server::base_objects::sized_entry<T, T_size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::sized_entry<T, T_size>>().value)>();
}
};
template<class T, class T_size>struct for_each_type_with_name_s<copper_server::base_objects::sized_entry<T, T_size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::sized_entry<T, T_size>>().value)>("value");
}
};
template<class T, class T_size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::sized_entry<T, T_size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class T, class T_size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::sized_entry<T, T_size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class T, size_t size, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::list_array_fixed<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::list_array_fixed<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size>struct for_each_type_s<copper_server::base_objects::list_array_fixed<T, size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, size_t size>struct for_each_type_with_name_s<copper_server::base_objects::list_array_fixed<T, size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::list_array_fixed<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::list_array_fixed<T, size>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::list_array_siz_from_packet<T>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::list_array_siz_from_packet<T>& obj, [[maybe_unused]] FN&& fn){
}
template<class T>struct for_each_type_s<copper_server::base_objects::list_array_siz_from_packet<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T>struct for_each_type_with_name_s<copper_server::base_objects::list_array_siz_from_packet<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::list_array_siz_from_packet<T>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::list_array_siz_from_packet<T>& obj, [[maybe_unused]] FN&& fn){
}
template<size_t size, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::bitset_fixed<size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<size_t size, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::bitset_fixed<size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<size_t size>struct for_each_type_s<copper_server::base_objects::bitset_fixed<size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::bitset_fixed<size>>().value)>();
}
};
template<size_t size>struct for_each_type_with_name_s<copper_server::base_objects::bitset_fixed<size>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::bitset_fixed<size>>().value)>("value");
}
};
template<size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::bitset_fixed<size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<size_t size, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::bitset_fixed<size>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class T, T flag, auto depend_prev_class, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::item_depend<T, flag, depend_prev_class>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, T flag, auto depend_prev_class, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::item_depend<T, flag, depend_prev_class>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, T flag, auto depend_prev_class>struct for_each_type_s<copper_server::base_objects::item_depend<T, flag, depend_prev_class>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, T flag, auto depend_prev_class>struct for_each_type_with_name_s<copper_server::base_objects::item_depend<T, flag, depend_prev_class>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, T flag, auto depend_prev_class, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::item_depend<T, flag, depend_prev_class>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, T flag, auto depend_prev_class, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::item_depend<T, flag, depend_prev_class>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::list_array_depend<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.decoding_flag);
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::list_array_depend<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.decoding_flag);
}
template<class T>struct for_each_type_s<copper_server::base_objects::list_array_depend<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::list_array_depend<T>>().decoding_flag)>();
}
};
template<class T>struct for_each_type_with_name_s<copper_server::base_objects::list_array_depend<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::list_array_depend<T>>().decoding_flag)>("decoding_flag");
}
};
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::list_array_depend<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.decoding_flag, "decoding_flag");
}
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::list_array_depend<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.decoding_flag, "decoding_flag");
}
template<class Variant0, class Variant1, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::or_<Variant0, Variant1>& obj, [[maybe_unused]] FN&& fn){
}
template<class Variant0, class Variant1, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::or_<Variant0, Variant1>& obj, [[maybe_unused]] FN&& fn){
}
template<class Variant0, class Variant1>struct for_each_type_s<copper_server::base_objects::or_<Variant0, Variant1>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class Variant0, class Variant1>struct for_each_type_with_name_s<copper_server::base_objects::or_<Variant0, Variant1>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class Variant0, class Variant1, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::or_<Variant0, Variant1>& obj, [[maybe_unused]] FN&& fn){
}
template<class Variant0, class Variant1, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::or_<Variant0, Variant1>& obj, [[maybe_unused]] FN&& fn){
}
template<class Variant0, class Variant1, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::bool_or<Variant0, Variant1>& obj, [[maybe_unused]] FN&& fn){
}
template<class Variant0, class Variant1, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::bool_or<Variant0, Variant1>& obj, [[maybe_unused]] FN&& fn){
}
template<class Variant0, class Variant1>struct for_each_type_s<copper_server::base_objects::bool_or<Variant0, Variant1>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class Variant0, class Variant1>struct for_each_type_with_name_s<copper_server::base_objects::bool_or<Variant0, Variant1>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class Variant0, class Variant1, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::bool_or<Variant0, Variant1>& obj, [[maybe_unused]] FN&& fn){
}
template<class Variant0, class Variant1, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::bool_or<Variant0, Variant1>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::packet_compress<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::packet_compress<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class T>struct for_each_type_s<copper_server::base_objects::packet_compress<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::packet_compress<T>>().value)>();
}
};
template<class T>struct for_each_type_with_name_s<copper_server::base_objects::packet_compress<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::packet_compress<T>>().value)>("value");
}
};
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::packet_compress<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::packet_compress<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::id_set<T>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::id_set<T>& obj, [[maybe_unused]] FN&& fn){
}
template<class T>struct for_each_type_s<copper_server::base_objects::id_set<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T>struct for_each_type_with_name_s<copper_server::base_objects::id_set<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::id_set<T>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::id_set<T>& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::Angle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::Angle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::Angle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::Angle>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::Angle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::Angle>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::Angle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::Angle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::Angle>() { return "copper_server::base_objects::Angle"; }
template<>consteval size_t fields_count<copper_server::base_objects::Angle>() { return 1; }
template<class Enum, class T, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::enum_as<Enum, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class Enum, class T, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::enum_as<Enum, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class Enum, class T>struct for_each_type_s<copper_server::base_objects::enum_as<Enum, T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::enum_as<Enum, T>>().value)>();
}
};
template<class Enum, class T>struct for_each_type_with_name_s<copper_server::base_objects::enum_as<Enum, T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::enum_as<Enum, T>>().value)>("value");
}
};
template<class Enum, class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::enum_as<Enum, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class Enum, class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::enum_as<Enum, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class ValueType, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::enum_switch<ValueType, Ty...>& obj, [[maybe_unused]] FN&& fn){
}
template<class ValueType, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::enum_switch<ValueType, Ty...>& obj, [[maybe_unused]] FN&& fn){
}
template<class ValueType, class... Ty>struct for_each_type_s<copper_server::base_objects::enum_switch<ValueType, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class ValueType, class... Ty>struct for_each_type_with_name_s<copper_server::base_objects::enum_switch<ValueType, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class ValueType, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::enum_switch<ValueType, Ty...>& obj, [[maybe_unused]] FN&& fn){
}
template<class ValueType, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::enum_switch<ValueType, Ty...>& obj, [[maybe_unused]] FN&& fn){
}
template<class header, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::enum_set<header, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.values);
}
template<class header, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::enum_set<header, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.values);
}
template<class header, class... Ty>struct for_each_type_s<copper_server::base_objects::enum_set<header, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::enum_set<header, Ty...>>().values)>();
}
};
template<class header, class... Ty>struct for_each_type_with_name_s<copper_server::base_objects::enum_set<header, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::enum_set<header, Ty...>>().values)>("values");
}
};
template<class header, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::enum_set<header, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.values, "values");
}
template<class header, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::enum_set<header, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.values, "values");
}
template<class flag_type, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::flags_list<flag_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flag);
  fn(obj.values);
}
template<class flag_type, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::flags_list<flag_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flag);
  fn(obj.values);
}
template<class flag_type, class... Ty>struct for_each_type_s<copper_server::base_objects::flags_list<flag_type, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::flags_list<flag_type, Ty...>>().flag)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::flags_list<flag_type, Ty...>>().values)>();
}
};
template<class flag_type, class... Ty>struct for_each_type_with_name_s<copper_server::base_objects::flags_list<flag_type, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::flags_list<flag_type, Ty...>>().flag)>("flag");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::flags_list<flag_type, Ty...>>().values)>("values");
}
};
template<class flag_type, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::flags_list<flag_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flag, "flag");
  fn(obj.values, "values");
}
template<class flag_type, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::flags_list<flag_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flag, "flag");
  fn(obj.values, "values");
}
template<class Source, class SourceType, SourceType Source::* source_name, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.values);
  fn(obj.pre_process_result);
}
template<class Source, class SourceType, SourceType Source::* source_name, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.values);
  fn(obj.pre_process_result);
}
template<class Source, class SourceType, SourceType Source::* source_name, class... Ty>struct for_each_type_s<copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>>().values)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>>().pre_process_result)>();
}
};
template<class Source, class SourceType, SourceType Source::* source_name, class... Ty>struct for_each_type_with_name_s<copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>>().values)>("values");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>>().pre_process_result)>("pre_process_result");
}
};
template<class Source, class SourceType, SourceType Source::* source_name, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.values, "values");
  fn(obj.pre_process_result, "pre_process_result");
}
template<class Source, class SourceType, SourceType Source::* source_name, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::flags_list_from<Source, SourceType, source_name, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.values, "values");
  fn(obj.pre_process_result, "pre_process_result");
}
template<class Enum, class T, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::enum_as_flag<Enum, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class Enum, class T, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::enum_as_flag<Enum, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class Enum, class T>struct for_each_type_s<copper_server::base_objects::enum_as_flag<Enum, T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::enum_as_flag<Enum, T>>().value)>();
}
};
template<class Enum, class T>struct for_each_type_with_name_s<copper_server::base_objects::enum_as_flag<Enum, T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::enum_as_flag<Enum, T>>().value)>("value");
}
};
template<class Enum, class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::enum_as_flag<Enum, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class Enum, class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::enum_as_flag<Enum, T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class base_type, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::any_of<base_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class base_type, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::any_of<base_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class base_type, class... Ty>struct for_each_type_s<copper_server::base_objects::any_of<base_type, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::any_of<base_type, Ty...>>().value)>();
}
};
template<class base_type, class... Ty>struct for_each_type_with_name_s<copper_server::base_objects::any_of<base_type, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::any_of<base_type, Ty...>>().value)>("value");
}
};
template<class base_type, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::any_of<base_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class base_type, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::any_of<base_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class value_type, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::partial_enum_switch<value_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
}
template<class value_type, class... Ty, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::partial_enum_switch<value_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
}
template<class value_type, class... Ty>struct for_each_type_s<copper_server::base_objects::partial_enum_switch<value_type, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class value_type, class... Ty>struct for_each_type_with_name_s<copper_server::base_objects::partial_enum_switch<value_type, Ty...>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class value_type, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::partial_enum_switch<value_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
}
template<class value_type, class... Ty, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::partial_enum_switch<value_type, Ty...>& obj, [[maybe_unused]] FN&& fn){
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::ignored<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class T, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::ignored<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class T>struct for_each_type_s<copper_server::base_objects::ignored<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::ignored<T>>().value)>();
}
};
template<class T>struct for_each_type_with_name_s<copper_server::base_objects::ignored<T>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::ignored<T>>().value)>("value");
}
};
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::ignored<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class T, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::ignored<T>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class T, util::CTS id, class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::ordered_id<T, id>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
  fn(obj.is_valid);
}
template<class T, util::CTS id, class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::ordered_id<T, id>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
  fn(obj.is_valid);
}
template<class T, util::CTS id>struct for_each_type_s<copper_server::base_objects::ordered_id<T, id>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::ordered_id<T, id>>().value)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::ordered_id<T, id>>().is_valid)>();
}
};
template<class T, util::CTS id>struct for_each_type_with_name_s<copper_server::base_objects::ordered_id<T, id>> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::ordered_id<T, id>>().value)>("value");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::ordered_id<T, id>>().is_valid)>("is_valid");
}
};
template<class T, util::CTS id, class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::ordered_id<T, id>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
  fn(obj.is_valid, "is_valid");
}
template<class T, util::CTS id, class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::ordered_id<T, id>& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
  fn(obj.is_valid, "is_valid");
}
}
