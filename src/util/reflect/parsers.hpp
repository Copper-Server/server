// Generated by reflect_map tool
#pragma once
#include <string>
namespace copper_server::reflect{
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_bool& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_bool& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_bool> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_bool> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_bool& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_bool& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_bool>() { return "copper_server::base_objects::parsers::command::_bool"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_bool>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_float::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_float::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_float::min> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_float::min>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_float::min> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_float::min>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_float::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_float::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_float::min>() { return "copper_server::base_objects::parsers::command::_float::min"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_float::min>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_float::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_float::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_float::max> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_float::max>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_float::max> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_float::max>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_float::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_float::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_float::max>() { return "copper_server::base_objects::parsers::command::_float::max"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_float::max>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_float& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_float& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_float> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_float>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_float> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_float>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_float& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_float& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_float>() { return "copper_server::base_objects::parsers::command::_float"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_float>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_double::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_double::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_double::min> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_double::min>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_double::min> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_double::min>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_double::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_double::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_double::min>() { return "copper_server::base_objects::parsers::command::_double::min"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_double::min>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_double::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_double::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_double::max> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_double::max>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_double::max> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_double::max>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_double::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_double::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_double::max>() { return "copper_server::base_objects::parsers::command::_double::max"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_double::max>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_double& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_double& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_double> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_double>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_double> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_double>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_double& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_double& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_double>() { return "copper_server::base_objects::parsers::command::_double"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_double>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_integer::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_integer::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_integer::min> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_integer::min>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_integer::min> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_integer::min>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_integer::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_integer::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_integer::min>() { return "copper_server::base_objects::parsers::command::_integer::min"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_integer::min>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_integer::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_integer::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_integer::max> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_integer::max>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_integer::max> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_integer::max>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_integer::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_integer::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_integer::max>() { return "copper_server::base_objects::parsers::command::_integer::max"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_integer::max>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_integer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_integer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_integer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_integer>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_integer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_integer>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_integer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_integer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_integer>() { return "copper_server::base_objects::parsers::command::_integer"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_integer>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_long::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_long::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_long::min> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_long::min>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_long::min> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_long::min>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_long::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_long::min& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_long::min>() { return "copper_server::base_objects::parsers::command::_long::min"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_long::min>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_long::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_long::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_long::max> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_long::max>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_long::max> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_long::max>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_long::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_long::max& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_long::max>() { return "copper_server::base_objects::parsers::command::_long::max"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_long::max>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::_long& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::_long& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::_long> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_long>().flags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::_long> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::_long>().flags)>("flags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::_long& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::_long& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flags, "flags");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::_long>() { return "copper_server::base_objects::parsers::command::_long"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::_long>() { return 1; }
template<>struct enum_data<copper_server::base_objects::parsers::command::string::type_e> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::command::string::type_e>;
static constexpr inline std::array<item, 3> values = {item{"single_word", copper_server::base_objects::parsers::command::string::type_e::single_word}, item{"quotable_phrase", copper_server::base_objects::parsers::command::string::type_e::quotable_phrase}, item{"greedy_phrase", copper_server::base_objects::parsers::command::string::type_e::greedy_phrase}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::string::type_e>() { return "copper_server::base_objects::parsers::command::string::type_e"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::string& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::string& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::string> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::string>().type)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::string> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::string>().type)>("type");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::string& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::string& obj, [[maybe_unused]] FN&& fn){
  fn(obj.type, "type");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::string>() { return "copper_server::base_objects::parsers::command::string"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::string>() { return 1; }
template<>struct enum_data<copper_server::base_objects::parsers::command::entity::flags_f> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::command::entity::flags_f>;
static constexpr inline std::array<item, 2> values = {item{"only_one_entity", copper_server::base_objects::parsers::command::entity::flags_f::only_one_entity}, item{"only_player_entity", copper_server::base_objects::parsers::command::entity::flags_f::only_player_entity}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::entity::flags_f>() { return "copper_server::base_objects::parsers::command::entity::flags_f"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flag);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flag);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::entity>().flag)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::entity>().flag)>("flag");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flag, "flag");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.flag, "flag");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::entity>() { return "copper_server::base_objects::parsers::command::entity"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::entity>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::game_profile& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::game_profile& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::game_profile> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::game_profile> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::game_profile& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::game_profile& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::game_profile>() { return "copper_server::base_objects::parsers::command::game_profile"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::game_profile>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::block_pos& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::block_pos& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::block_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::block_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::block_pos& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::block_pos& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::block_pos>() { return "copper_server::base_objects::parsers::command::block_pos"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::block_pos>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::column_pos& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::column_pos& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::column_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::column_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::column_pos& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::column_pos& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::column_pos>() { return "copper_server::base_objects::parsers::command::column_pos"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::column_pos>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::vec2& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::vec2& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::vec2> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::vec2> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::vec2& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::vec2& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::vec2>() { return "copper_server::base_objects::parsers::command::vec2"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::vec2>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::vec3& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::vec3& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::vec3> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::vec3> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::vec3& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::vec3& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::vec3>() { return "copper_server::base_objects::parsers::command::vec3"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::vec3>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::block_state& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::block_state& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::block_state> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::block_state> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::block_state& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::block_state& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::block_state>() { return "copper_server::base_objects::parsers::command::block_state"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::block_state>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::block_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::block_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::block_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::block_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::block_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::block_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::block_predicate>() { return "copper_server::base_objects::parsers::command::block_predicate"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::block_predicate>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::item_stack& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::item_stack& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::item_stack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::item_stack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::item_stack& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::item_stack& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::item_stack>() { return "copper_server::base_objects::parsers::command::item_stack"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::item_stack>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::item_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::item_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::item_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::item_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::item_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::item_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::item_predicate>() { return "copper_server::base_objects::parsers::command::item_predicate"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::item_predicate>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::color& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::color& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::color> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::color> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::color& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::color& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::color>() { return "copper_server::base_objects::parsers::command::color"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::color>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::hex_color& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::hex_color& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::hex_color> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::hex_color> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::hex_color& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::hex_color& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::hex_color>() { return "copper_server::base_objects::parsers::command::hex_color"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::hex_color>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::component& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::component& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::component> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::component> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::component& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::component& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::component>() { return "copper_server::base_objects::parsers::command::component"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::component>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::style& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::style& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::style> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::style> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::style& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::style& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::style>() { return "copper_server::base_objects::parsers::command::style"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::style>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::message& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::message& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::message> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::message> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::message& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::message& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::message>() { return "copper_server::base_objects::parsers::command::message"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::message>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::nbt_compound_tag& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::nbt_compound_tag& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::nbt_compound_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::nbt_compound_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::nbt_compound_tag& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::nbt_compound_tag& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::nbt_compound_tag>() { return "copper_server::base_objects::parsers::command::nbt_compound_tag"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::nbt_compound_tag>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::nbt_tag& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::nbt_tag& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::nbt_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::nbt_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::nbt_tag& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::nbt_tag& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::nbt_tag>() { return "copper_server::base_objects::parsers::command::nbt_tag"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::nbt_tag>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::nbt_path& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::nbt_path& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::nbt_path> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::nbt_path> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::nbt_path& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::nbt_path& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::nbt_path>() { return "copper_server::base_objects::parsers::command::nbt_path"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::nbt_path>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::objective& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::objective& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::objective> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::objective> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::objective& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::objective& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::objective>() { return "copper_server::base_objects::parsers::command::objective"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::objective>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::objective_criteria& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::objective_criteria& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::objective_criteria> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::objective_criteria> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::objective_criteria& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::objective_criteria& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::objective_criteria>() { return "copper_server::base_objects::parsers::command::objective_criteria"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::objective_criteria>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::operation& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::operation& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::operation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::operation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::operation& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::operation& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::operation>() { return "copper_server::base_objects::parsers::command::operation"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::operation>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::particle& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::particle& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::particle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::particle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::particle& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::particle& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::particle>() { return "copper_server::base_objects::parsers::command::particle"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::particle>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::angle& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::angle& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::angle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::angle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::angle& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::angle& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::angle>() { return "copper_server::base_objects::parsers::command::angle"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::angle>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::rotation& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::rotation& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::rotation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::rotation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::rotation& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::rotation& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::rotation>() { return "copper_server::base_objects::parsers::command::rotation"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::rotation>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::scoreboard_slot& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::scoreboard_slot& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::scoreboard_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::scoreboard_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::scoreboard_slot& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::scoreboard_slot& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::scoreboard_slot>() { return "copper_server::base_objects::parsers::command::scoreboard_slot"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::scoreboard_slot>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::score_holder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.allow_multiple);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::score_holder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.allow_multiple);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::score_holder> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::score_holder>().allow_multiple)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::score_holder> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::score_holder>().allow_multiple)>("allow_multiple");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::score_holder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.allow_multiple, "allow_multiple");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::score_holder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.allow_multiple, "allow_multiple");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::score_holder>() { return "copper_server::base_objects::parsers::command::score_holder"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::score_holder>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::swizzle& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::swizzle& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::swizzle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::swizzle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::swizzle& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::swizzle& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::swizzle>() { return "copper_server::base_objects::parsers::command::swizzle"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::swizzle>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::team& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::team& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::team> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::team> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::team& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::team& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::team>() { return "copper_server::base_objects::parsers::command::team"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::team>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::item_slot& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::item_slot& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::item_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::item_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::item_slot& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::item_slot& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::item_slot>() { return "copper_server::base_objects::parsers::command::item_slot"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::item_slot>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::item_slots& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::item_slots& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::item_slots> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::item_slots> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::item_slots& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::item_slots& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::item_slots>() { return "copper_server::base_objects::parsers::command::item_slots"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::item_slots>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::resource_location& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_location& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::resource_location> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::resource_location> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::resource_location& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_location& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::resource_location>() { return "copper_server::base_objects::parsers::command::resource_location"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::resource_location>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::function& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::function& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::function> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::function> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::function& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::function& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::function>() { return "copper_server::base_objects::parsers::command::function"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::function>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::entity_anchor& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::entity_anchor& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::entity_anchor> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::entity_anchor> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::entity_anchor& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::entity_anchor& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::entity_anchor>() { return "copper_server::base_objects::parsers::command::entity_anchor"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::entity_anchor>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::int_range& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::int_range& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::int_range> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::int_range> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::int_range& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::int_range& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::int_range>() { return "copper_server::base_objects::parsers::command::int_range"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::int_range>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::float_range& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::float_range& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::float_range> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::float_range> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::float_range& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::float_range& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::float_range>() { return "copper_server::base_objects::parsers::command::float_range"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::float_range>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::dimension& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::dimension& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::dimension> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::dimension> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::dimension& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::dimension& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::dimension>() { return "copper_server::base_objects::parsers::command::dimension"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::dimension>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::gamemode& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::gamemode& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::gamemode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::gamemode> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::gamemode& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::gamemode& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::gamemode>() { return "copper_server::base_objects::parsers::command::gamemode"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::gamemode>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.min_ticks);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.min_ticks);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::time> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::time>().min_ticks)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::time> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::time>().min_ticks)>("min_ticks");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.min_ticks, "min_ticks");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.min_ticks, "min_ticks");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::time>() { return "copper_server::base_objects::parsers::command::time"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::time>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::resource_or_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_or_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::resource_or_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource_or_tag>().suggestion_registry)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::resource_or_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource_or_tag>().suggestion_registry)>("suggestion_registry");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::resource_or_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_or_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::resource_or_tag>() { return "copper_server::base_objects::parsers::command::resource_or_tag"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::resource_or_tag>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::resource_or_tag_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_or_tag_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::resource_or_tag_key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource_or_tag_key>().suggestion_registry)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::resource_or_tag_key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource_or_tag_key>().suggestion_registry)>("suggestion_registry");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::resource_or_tag_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_or_tag_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::resource_or_tag_key>() { return "copper_server::base_objects::parsers::command::resource_or_tag_key"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::resource_or_tag_key>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::resource& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::resource& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::resource> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource>().suggestion_registry)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::resource> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource>().suggestion_registry)>("suggestion_registry");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::resource& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::resource& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::resource>() { return "copper_server::base_objects::parsers::command::resource"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::resource>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::resource_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::resource_key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource_key>().suggestion_registry)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::resource_key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource_key>().suggestion_registry)>("suggestion_registry");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::resource_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::resource_key>() { return "copper_server::base_objects::parsers::command::resource_key"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::resource_key>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::resource_selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::resource_selector> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource_selector>().suggestion_registry)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::resource_selector> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::command::resource_selector>().suggestion_registry)>("suggestion_registry");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::resource_selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::resource_selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.suggestion_registry, "suggestion_registry");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::resource_selector>() { return "copper_server::base_objects::parsers::command::resource_selector"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::resource_selector>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::template_mirror& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::template_mirror& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::template_mirror> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::template_mirror> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::template_mirror& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::template_mirror& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::template_mirror>() { return "copper_server::base_objects::parsers::command::template_mirror"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::template_mirror>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::template_rotation& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::template_rotation& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::template_rotation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::template_rotation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::template_rotation& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::template_rotation& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::template_rotation>() { return "copper_server::base_objects::parsers::command::template_rotation"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::template_rotation>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::heightmap& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::heightmap& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::heightmap> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::heightmap> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::heightmap& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::heightmap& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::heightmap>() { return "copper_server::base_objects::parsers::command::heightmap"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::heightmap>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::loot_table& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::loot_table& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::loot_table> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::loot_table> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::loot_table& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::loot_table& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::loot_table>() { return "copper_server::base_objects::parsers::command::loot_table"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::loot_table>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::loot_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::loot_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::loot_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::loot_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::loot_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::loot_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::loot_predicate>() { return "copper_server::base_objects::parsers::command::loot_predicate"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::loot_predicate>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::loot_modifier& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::loot_modifier& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::loot_modifier> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::loot_modifier> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::loot_modifier& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::loot_modifier& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::loot_modifier>() { return "copper_server::base_objects::parsers::command::loot_modifier"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::loot_modifier>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::dialog& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::dialog& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::dialog& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::dialog& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::dialog>() { return "copper_server::base_objects::parsers::command::dialog"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::dialog>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::command::uuid& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::command::uuid& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::command::uuid> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::command::uuid> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::command::uuid& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::command::uuid& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::command::uuid>() { return "copper_server::base_objects::parsers::command::uuid"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::command::uuid>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::_bool& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::_bool& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::_bool> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_bool>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::_bool> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_bool>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::_bool& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::_bool& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::_bool>() { return "copper_server::base_objects::parsers::_bool"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::_bool>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::_float& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::_float& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::_float> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_float>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::_float> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_float>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::_float& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::_float& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::_float>() { return "copper_server::base_objects::parsers::_float"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::_float>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::_double& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::_double& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::_double> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_double>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::_double> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_double>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::_double& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::_double& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::_double>() { return "copper_server::base_objects::parsers::_double"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::_double>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::_integer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::_integer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::_integer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_integer>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::_integer> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_integer>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::_integer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::_integer& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::_integer>() { return "copper_server::base_objects::parsers::_integer"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::_integer>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::_long& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::_long& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::_long> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_long>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::_long> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::_long>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::_long& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::_long& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::_long>() { return "copper_server::base_objects::parsers::_long"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::_long>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::string& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::string& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::string> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::string>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::string> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::string>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::string& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::string& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::string>() { return "copper_server::base_objects::parsers::string"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::string>() { return 1; }
template<>struct enum_data<copper_server::base_objects::parsers::entity::type_t> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::entity::type_t>;
static constexpr inline std::array<item, 3> values = {item{"name", copper_server::base_objects::parsers::entity::type_t::name}, item{"selector", copper_server::base_objects::parsers::entity::type_t::selector}, item{"uuid", copper_server::base_objects::parsers::entity::type_t::uuid}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::entity::type_t>() { return "copper_server::base_objects::parsers::entity::type_t"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
  fn(obj.type);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
  fn(obj.type);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::entity>().value)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::entity>().type)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::entity> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::entity>().value)>("value");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::entity>().type)>("type");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
  fn(obj.type, "type");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::entity& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
  fn(obj.type, "type");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::entity>() { return "copper_server::base_objects::parsers::entity"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::entity>() { return 2; }
template<>struct enum_data<copper_server::base_objects::parsers::game_profile::type_t> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::game_profile::type_t>;
static constexpr inline std::array<item, 3> values = {item{"name", copper_server::base_objects::parsers::game_profile::type_t::name}, item{"selector", copper_server::base_objects::parsers::game_profile::type_t::selector}, item{"uuid", copper_server::base_objects::parsers::game_profile::type_t::uuid}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::game_profile::type_t>() { return "copper_server::base_objects::parsers::game_profile::type_t"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::game_profile& obj, [[maybe_unused]] FN&& fn){
  fn(obj.string);
  fn(obj.type);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::game_profile& obj, [[maybe_unused]] FN&& fn){
  fn(obj.string);
  fn(obj.type);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::game_profile> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::game_profile>().string)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::game_profile>().type)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::game_profile> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::game_profile>().string)>("string");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::game_profile>().type)>("type");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::game_profile& obj, [[maybe_unused]] FN&& fn){
  fn(obj.string, "string");
  fn(obj.type, "type");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::game_profile& obj, [[maybe_unused]] FN&& fn){
  fn(obj.string, "string");
  fn(obj.type, "type");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::game_profile>() { return "copper_server::base_objects::parsers::game_profile"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::game_profile>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::block_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.x_relative);
  fn(obj.y_relative);
  fn(obj.z_relative);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::block_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.y);
  fn(obj.z);
  fn(obj.x_relative);
  fn(obj.y_relative);
  fn(obj.z_relative);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::block_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().y)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().x_relative)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().y_relative)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().z_relative)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::block_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().y)>("y");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().x_relative)>("x_relative");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().y_relative)>("y_relative");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_pos>().z_relative)>("z_relative");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::block_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.x_relative, "x_relative");
  fn(obj.y_relative, "y_relative");
  fn(obj.z_relative, "z_relative");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::block_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.y, "y");
  fn(obj.z, "z");
  fn(obj.x_relative, "x_relative");
  fn(obj.y_relative, "y_relative");
  fn(obj.z_relative, "z_relative");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::block_pos>() { return "copper_server::base_objects::parsers::block_pos"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::block_pos>() { return 6; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::column_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.x_relative);
  fn(obj.z_relative);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::column_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x);
  fn(obj.z);
  fn(obj.x_relative);
  fn(obj.z_relative);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::column_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::column_pos>().x)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::column_pos>().z)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::column_pos>().x_relative)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::column_pos>().z_relative)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::column_pos> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::column_pos>().x)>("x");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::column_pos>().z)>("z");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::column_pos>().x_relative)>("x_relative");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::column_pos>().z_relative)>("z_relative");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::column_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.x_relative, "x_relative");
  fn(obj.z_relative, "z_relative");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::column_pos& obj, [[maybe_unused]] FN&& fn){
  fn(obj.x, "x");
  fn(obj.z, "z");
  fn(obj.x_relative, "x_relative");
  fn(obj.z_relative, "z_relative");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::column_pos>() { return "copper_server::base_objects::parsers::column_pos"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::column_pos>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::vec2& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v);
  fn(obj.relative);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::vec2& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v);
  fn(obj.relative);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::vec2> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::vec2>().v)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::vec2>().relative)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::vec2> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::vec2>().v)>("v");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::vec2>().relative)>("relative");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::vec2& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v, "v");
  fn(obj.relative, "relative");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::vec2& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v, "v");
  fn(obj.relative, "relative");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::vec2>() { return "copper_server::base_objects::parsers::vec2"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::vec2>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::vec3& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v);
  fn(obj.relative);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::vec3& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v);
  fn(obj.relative);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::vec3> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::vec3>().v)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::vec3>().relative)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::vec3> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::vec3>().v)>("v");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::vec3>().relative)>("relative");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::vec3& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v, "v");
  fn(obj.relative, "relative");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::vec3& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v, "v");
  fn(obj.relative, "relative");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::vec3>() { return "copper_server::base_objects::parsers::vec3"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::vec3>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::block_state& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id);
  fn(obj.states);
  fn(obj.data_tags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::block_state& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id);
  fn(obj.states);
  fn(obj.data_tags);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::block_state> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_state>().block_id)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_state>().states)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_state>().data_tags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::block_state> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_state>().block_id)>("block_id");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_state>().states)>("states");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::block_state>().data_tags)>("data_tags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::block_state& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id, "block_id");
  fn(obj.states, "states");
  fn(obj.data_tags, "data_tags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::block_state& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id, "block_id");
  fn(obj.states, "states");
  fn(obj.data_tags, "data_tags");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::block_state>() { return "copper_server::base_objects::parsers::block_state"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::block_state>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::block_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::block_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::block_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::block_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::block_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::block_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::block_predicate>() { return "copper_server::base_objects::parsers::block_predicate"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::block_predicate>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::item_stack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
  fn(obj.data_tags);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::item_stack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
  fn(obj.data_tags);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::item_stack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_stack>().value)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_stack>().data_tags)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::item_stack> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_stack>().value)>("value");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_stack>().data_tags)>("data_tags");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::item_stack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
  fn(obj.data_tags, "data_tags");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::item_stack& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
  fn(obj.data_tags, "data_tags");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::item_stack>() { return "copper_server::base_objects::parsers::item_stack"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::item_stack>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::item_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::item_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::item_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::item_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::item_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::item_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::item_predicate>() { return "copper_server::base_objects::parsers::item_predicate"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::item_predicate>() { return 0; }
template<>struct enum_data<copper_server::base_objects::parsers::color> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::color>;
static constexpr inline std::array<item, 16> values = {item{"white", copper_server::base_objects::parsers::color::white}, item{"orange", copper_server::base_objects::parsers::color::orange}, item{"magenta", copper_server::base_objects::parsers::color::magenta}, item{"light_blue", copper_server::base_objects::parsers::color::light_blue}, item{"yellow", copper_server::base_objects::parsers::color::yellow}, item{"lime", copper_server::base_objects::parsers::color::lime}, item{"pink", copper_server::base_objects::parsers::color::pink}, item{"gray", copper_server::base_objects::parsers::color::gray}, item{"light_gray", copper_server::base_objects::parsers::color::light_gray}, item{"cyan", copper_server::base_objects::parsers::color::cyan}, item{"purple", copper_server::base_objects::parsers::color::purple}, item{"blue", copper_server::base_objects::parsers::color::blue}, item{"brown", copper_server::base_objects::parsers::color::brown}, item{"green", copper_server::base_objects::parsers::color::green}, item{"red", copper_server::base_objects::parsers::color::red}, item{"black", copper_server::base_objects::parsers::color::black}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::color>() { return "copper_server::base_objects::parsers::color"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::hex_color& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::hex_color& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::hex_color> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::hex_color>().rgb)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::hex_color> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::hex_color>().rgb)>("rgb");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::hex_color& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb, "rgb");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::hex_color& obj, [[maybe_unused]] FN&& fn){
  fn(obj.rgb, "rgb");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::hex_color>() { return "copper_server::base_objects::parsers::hex_color"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::hex_color>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::component& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::component& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::component> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::component> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::component& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::component& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::component>() { return "copper_server::base_objects::parsers::component"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::component>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::style& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::style& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::style> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::style> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::style& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::style& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::style>() { return "copper_server::base_objects::parsers::style"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::style>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::message& obj, [[maybe_unused]] FN&& fn){
  fn(obj.str);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::message& obj, [[maybe_unused]] FN&& fn){
  fn(obj.str);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::message> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::message>().str)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::message> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::message>().str)>("str");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::message& obj, [[maybe_unused]] FN&& fn){
  fn(obj.str, "str");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::message& obj, [[maybe_unused]] FN&& fn){
  fn(obj.str, "str");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::message>() { return "copper_server::base_objects::parsers::message"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::message>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::nbt_compound_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.nbt);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::nbt_compound_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.nbt);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::nbt_compound_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::nbt_compound_tag>().nbt)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::nbt_compound_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::nbt_compound_tag>().nbt)>("nbt");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::nbt_compound_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.nbt, "nbt");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::nbt_compound_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.nbt, "nbt");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::nbt_compound_tag>() { return "copper_server::base_objects::parsers::nbt_compound_tag"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::nbt_compound_tag>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::nbt_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.any_nbt);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::nbt_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.any_nbt);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::nbt_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::nbt_tag>().any_nbt)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::nbt_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::nbt_tag>().any_nbt)>("any_nbt");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::nbt_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.any_nbt, "any_nbt");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::nbt_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.any_nbt, "any_nbt");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::nbt_tag>() { return "copper_server::base_objects::parsers::nbt_tag"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::nbt_tag>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::nbt_path& obj, [[maybe_unused]] FN&& fn){
  fn(obj.path);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::nbt_path& obj, [[maybe_unused]] FN&& fn){
  fn(obj.path);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::nbt_path> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::nbt_path>().path)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::nbt_path> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::nbt_path>().path)>("path");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::nbt_path& obj, [[maybe_unused]] FN&& fn){
  fn(obj.path, "path");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::nbt_path& obj, [[maybe_unused]] FN&& fn){
  fn(obj.path, "path");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::nbt_path>() { return "copper_server::base_objects::parsers::nbt_path"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::nbt_path>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::objective> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::objective>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::objective> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::objective>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::objective& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::objective>() { return "copper_server::base_objects::parsers::objective"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::objective>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::objective_criteria& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::objective_criteria& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::objective_criteria> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::objective_criteria>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::objective_criteria> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::objective_criteria>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::objective_criteria& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::objective_criteria& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::objective_criteria>() { return "copper_server::base_objects::parsers::objective_criteria"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::objective_criteria>() { return 1; }
template<>struct enum_data<copper_server::base_objects::parsers::operation> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::operation>;
static constexpr inline std::array<item, 9> values = {item{"assignment", copper_server::base_objects::parsers::operation::assignment}, item{"addition", copper_server::base_objects::parsers::operation::addition}, item{"subtraction", copper_server::base_objects::parsers::operation::subtraction}, item{"multiplication", copper_server::base_objects::parsers::operation::multiplication}, item{"floor_division", copper_server::base_objects::parsers::operation::floor_division}, item{"modulus", copper_server::base_objects::parsers::operation::modulus}, item{"swapping", copper_server::base_objects::parsers::operation::swapping}, item{"minimum", copper_server::base_objects::parsers::operation::minimum}, item{"maximum", copper_server::base_objects::parsers::operation::maximum}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::operation>() { return "copper_server::base_objects::parsers::operation"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id);
  fn(obj.states);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id);
  fn(obj.states);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::block>().block_id)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::block>().states)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::block> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::block>().block_id)>("block_id");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::block>().states)>("states");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id, "block_id");
  fn(obj.states, "states");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::block& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id, "block_id");
  fn(obj.states, "states");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::block>() { return "copper_server::base_objects::parsers::particle::block"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::block>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::block_marker& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id);
  fn(obj.states);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::block_marker& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id);
  fn(obj.states);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::block_marker> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::block_marker>().block_id)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::block_marker>().states)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::block_marker> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::block_marker>().block_id)>("block_id");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::block_marker>().states)>("states");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::block_marker& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id, "block_id");
  fn(obj.states, "states");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::block_marker& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id, "block_id");
  fn(obj.states, "states");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::block_marker>() { return "copper_server::base_objects::parsers::particle::block_marker"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::block_marker>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::falling_dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id);
  fn(obj.states);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::falling_dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id);
  fn(obj.states);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::falling_dust> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::falling_dust>().block_id)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::falling_dust>().states)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::falling_dust> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::falling_dust>().block_id)>("block_id");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::falling_dust>().states)>("states");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::falling_dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id, "block_id");
  fn(obj.states, "states");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::falling_dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.block_id, "block_id");
  fn(obj.states, "states");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::falling_dust>() { return "copper_server::base_objects::parsers::particle::falling_dust"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::falling_dust>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.r);
  fn(obj.g);
  fn(obj.b);
  fn(obj.size);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.r);
  fn(obj.g);
  fn(obj.b);
  fn(obj.size);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::dust> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust>().r)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust>().g)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust>().b)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust>().size)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::dust> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust>().r)>("r");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust>().g)>("g");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust>().b)>("b");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust>().size)>("size");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.r, "r");
  fn(obj.g, "g");
  fn(obj.b, "b");
  fn(obj.size, "size");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::dust& obj, [[maybe_unused]] FN&& fn){
  fn(obj.r, "r");
  fn(obj.g, "g");
  fn(obj.b, "b");
  fn(obj.size, "size");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::dust>() { return "copper_server::base_objects::parsers::particle::dust"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::dust>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::dust_color_transition& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin_r);
  fn(obj.begin_g);
  fn(obj.begin_b);
  fn(obj.end_r);
  fn(obj.end_g);
  fn(obj.end_b);
  fn(obj.size);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::dust_color_transition& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin_r);
  fn(obj.begin_g);
  fn(obj.begin_b);
  fn(obj.end_r);
  fn(obj.end_g);
  fn(obj.end_b);
  fn(obj.size);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::dust_color_transition> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().begin_r)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().begin_g)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().begin_b)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().end_r)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().end_g)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().end_b)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().size)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::dust_color_transition> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().begin_r)>("begin_r");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().begin_g)>("begin_g");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().begin_b)>("begin_b");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().end_r)>("end_r");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().end_g)>("end_g");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().end_b)>("end_b");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::dust_color_transition>().size)>("size");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::dust_color_transition& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin_r, "begin_r");
  fn(obj.begin_g, "begin_g");
  fn(obj.begin_b, "begin_b");
  fn(obj.end_r, "end_r");
  fn(obj.end_g, "end_g");
  fn(obj.end_b, "end_b");
  fn(obj.size, "size");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::dust_color_transition& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin_r, "begin_r");
  fn(obj.begin_g, "begin_g");
  fn(obj.begin_b, "begin_b");
  fn(obj.end_r, "end_r");
  fn(obj.end_g, "end_g");
  fn(obj.end_b, "end_b");
  fn(obj.size, "size");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::dust_color_transition>() { return "copper_server::base_objects::parsers::particle::dust_color_transition"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::dust_color_transition>() { return 7; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id);
  fn(obj.nbt);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id);
  fn(obj.nbt);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::item>().item_id)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::item>().nbt)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::item> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::item>().item_id)>("item_id");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::item>().nbt)>("nbt");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id, "item_id");
  fn(obj.nbt, "nbt");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::item& obj, [[maybe_unused]] FN&& fn){
  fn(obj.item_id, "item_id");
  fn(obj.nbt, "nbt");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::item>() { return "copper_server::base_objects::parsers::particle::item"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::item>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::sculk_charge& obj, [[maybe_unused]] FN&& fn){
  fn(obj.angle);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::sculk_charge& obj, [[maybe_unused]] FN&& fn){
  fn(obj.angle);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::sculk_charge> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::sculk_charge>().angle)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::sculk_charge> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::sculk_charge>().angle)>("angle");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::sculk_charge& obj, [[maybe_unused]] FN&& fn){
  fn(obj.angle, "angle");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::sculk_charge& obj, [[maybe_unused]] FN&& fn){
  fn(obj.angle, "angle");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::sculk_charge>() { return "copper_server::base_objects::parsers::particle::sculk_charge"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::sculk_charge>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::shriek& obj, [[maybe_unused]] FN&& fn){
  fn(obj.angle);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::shriek& obj, [[maybe_unused]] FN&& fn){
  fn(obj.angle);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::shriek> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::shriek>().angle)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::shriek> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::shriek>().angle)>("angle");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::shriek& obj, [[maybe_unused]] FN&& fn){
  fn(obj.angle, "angle");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::shriek& obj, [[maybe_unused]] FN&& fn){
  fn(obj.angle, "angle");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::shriek>() { return "copper_server::base_objects::parsers::particle::shriek"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::shriek>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::vibration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.destination_x);
  fn(obj.destination_y);
  fn(obj.destination_z);
  fn(obj.ticks);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::vibration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.destination_x);
  fn(obj.destination_y);
  fn(obj.destination_z);
  fn(obj.ticks);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::vibration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::vibration>().destination_x)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::vibration>().destination_y)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::vibration>().destination_z)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::vibration>().ticks)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::vibration> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::vibration>().destination_x)>("destination_x");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::vibration>().destination_y)>("destination_y");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::vibration>().destination_z)>("destination_z");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::vibration>().ticks)>("ticks");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::vibration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.destination_x, "destination_x");
  fn(obj.destination_y, "destination_y");
  fn(obj.destination_z, "destination_z");
  fn(obj.ticks, "ticks");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::vibration& obj, [[maybe_unused]] FN&& fn){
  fn(obj.destination_x, "destination_x");
  fn(obj.destination_y, "destination_y");
  fn(obj.destination_z, "destination_z");
  fn(obj.ticks, "ticks");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::vibration>() { return "copper_server::base_objects::parsers::particle::vibration"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::vibration>() { return 4; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle::any_other& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle::any_other& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle::any_other> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::any_other>().name)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle::any_other> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle::any_other>().name)>("name");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle::any_other& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle::any_other& obj, [[maybe_unused]] FN&& fn){
  fn(obj.name, "name");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle::any_other>() { return "copper_server::base_objects::parsers::particle::any_other"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle::any_other>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::particle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.particle);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::particle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.particle);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::particle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle>().particle)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::particle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::particle>().particle)>("particle");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::particle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.particle, "particle");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::particle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.particle, "particle");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::particle>() { return "copper_server::base_objects::parsers::particle"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::particle>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::angle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw);
  fn(obj.relative);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::angle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw);
  fn(obj.relative);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::angle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::angle>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::angle>().relative)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::angle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::angle>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::angle>().relative)>("relative");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::angle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw, "yaw");
  fn(obj.relative, "relative");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::angle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw, "yaw");
  fn(obj.relative, "relative");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::angle>() { return "copper_server::base_objects::parsers::angle"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::angle>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::rotation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw);
  fn(obj.pitch);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::rotation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw);
  fn(obj.pitch);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::rotation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::rotation>().yaw)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::rotation>().pitch)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::rotation> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::rotation>().yaw)>("yaw");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::rotation>().pitch)>("pitch");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::rotation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::rotation& obj, [[maybe_unused]] FN&& fn){
  fn(obj.yaw, "yaw");
  fn(obj.pitch, "pitch");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::rotation>() { return "copper_server::base_objects::parsers::rotation"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::rotation>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::scoreboard_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::scoreboard_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::scoreboard_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::scoreboard_slot>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::scoreboard_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::scoreboard_slot>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::scoreboard_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::scoreboard_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::scoreboard_slot>() { return "copper_server::base_objects::parsers::scoreboard_slot"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::scoreboard_slot>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::score_holder::selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::score_holder::selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::score_holder::selector> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::score_holder::selector>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::score_holder::selector> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::score_holder::selector>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::score_holder::selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::score_holder::selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::score_holder::selector>() { return "copper_server::base_objects::parsers::score_holder::selector"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::score_holder::selector>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::score_holder::name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::score_holder::name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::score_holder::name> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::score_holder::name>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::score_holder::name> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::score_holder::name>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::score_holder::name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::score_holder::name& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::score_holder::name>() { return "copper_server::base_objects::parsers::score_holder::name"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::score_holder::name>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::score_holder::uuid& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::score_holder::uuid& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::score_holder::uuid> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::score_holder::uuid>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::score_holder::uuid> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::score_holder::uuid>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::score_holder::uuid& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::score_holder::uuid& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::score_holder::uuid>() { return "copper_server::base_objects::parsers::score_holder::uuid"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::score_holder::uuid>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::score_holder::anything& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::score_holder::anything& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::score_holder::anything> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::score_holder::anything> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::score_holder::anything& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::score_holder::anything& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::score_holder::anything>() { return "copper_server::base_objects::parsers::score_holder::anything"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::score_holder::anything>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::score_holder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::score_holder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::score_holder> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::score_holder>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::score_holder> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::score_holder>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::score_holder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::score_holder& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::score_holder>() { return "copper_server::base_objects::parsers::score_holder"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::score_holder>() { return 1; }
template<>struct enum_data<copper_server::base_objects::parsers::swizzle::coord> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::swizzle::coord>;
static constexpr inline std::array<item, 4> values = {item{"undefined", copper_server::base_objects::parsers::swizzle::coord::undefined}, item{"x", copper_server::base_objects::parsers::swizzle::coord::x}, item{"y", copper_server::base_objects::parsers::swizzle::coord::y}, item{"z", copper_server::base_objects::parsers::swizzle::coord::z}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::swizzle::coord>() { return "copper_server::base_objects::parsers::swizzle::coord"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::swizzle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v0);
  fn(obj.v1);
  fn(obj.v2);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::swizzle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v0);
  fn(obj.v1);
  fn(obj.v2);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::swizzle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::swizzle>().v0)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::swizzle>().v1)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::swizzle>().v2)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::swizzle> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::swizzle>().v0)>("v0");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::swizzle>().v1)>("v1");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::swizzle>().v2)>("v2");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::swizzle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v0, "v0");
  fn(obj.v1, "v1");
  fn(obj.v2, "v2");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::swizzle& obj, [[maybe_unused]] FN&& fn){
  fn(obj.v0, "v0");
  fn(obj.v1, "v1");
  fn(obj.v2, "v2");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::swizzle>() { return "copper_server::base_objects::parsers::swizzle"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::swizzle>() { return 3; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::team& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::team& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::team> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::team>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::team> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::team>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::team& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::team& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::team>() { return "copper_server::base_objects::parsers::team"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::team>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::item_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.container);
  fn(obj.number);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::item_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.container);
  fn(obj.number);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::item_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_slot>().container)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_slot>().number)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::item_slot> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_slot>().container)>("container");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_slot>().number)>("number");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::item_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.container, "container");
  fn(obj.number, "number");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::item_slot& obj, [[maybe_unused]] FN&& fn){
  fn(obj.container, "container");
  fn(obj.number, "number");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::item_slot>() { return "copper_server::base_objects::parsers::item_slot"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::item_slot>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::item_slots& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slots);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::item_slots& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slots);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::item_slots> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_slots>().slots)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::item_slots> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::item_slots>().slots)>("slots");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::item_slots& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slots, "slots");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::item_slots& obj, [[maybe_unused]] FN&& fn){
  fn(obj.slots, "slots");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::item_slots>() { return "copper_server::base_objects::parsers::item_slots"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::item_slots>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::resource_location& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::resource_location& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::resource_location> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_location>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::resource_location> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_location>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::resource_location& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::resource_location& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::resource_location>() { return "copper_server::base_objects::parsers::resource_location"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::resource_location>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::function& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::function& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::function> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::function>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::function> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::function>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::function& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::function& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::function>() { return "copper_server::base_objects::parsers::function"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::function>() { return 1; }
template<>struct enum_data<copper_server::base_objects::parsers::entity_anchor> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::entity_anchor>;
static constexpr inline std::array<item, 2> values = {item{"eyes", copper_server::base_objects::parsers::entity_anchor::eyes}, item{"feet", copper_server::base_objects::parsers::entity_anchor::feet}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::entity_anchor>() { return "copper_server::base_objects::parsers::entity_anchor"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::int_range& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin);
  fn(obj.end);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::int_range& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin);
  fn(obj.end);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::int_range> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::int_range>().begin)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::int_range>().end)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::int_range> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::int_range>().begin)>("begin");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::int_range>().end)>("end");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::int_range& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin, "begin");
  fn(obj.end, "end");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::int_range& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin, "begin");
  fn(obj.end, "end");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::int_range>() { return "copper_server::base_objects::parsers::int_range"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::int_range>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::float_range& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin);
  fn(obj.end);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::float_range& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin);
  fn(obj.end);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::float_range> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::float_range>().begin)>();
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::float_range>().end)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::float_range> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::float_range>().begin)>("begin");
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::float_range>().end)>("end");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::float_range& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin, "begin");
  fn(obj.end, "end");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::float_range& obj, [[maybe_unused]] FN&& fn){
  fn(obj.begin, "begin");
  fn(obj.end, "end");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::float_range>() { return "copper_server::base_objects::parsers::float_range"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::float_range>() { return 2; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::dimension& obj, [[maybe_unused]] FN&& fn){
  fn(obj.string);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::dimension& obj, [[maybe_unused]] FN&& fn){
  fn(obj.string);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::dimension> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::dimension>().string)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::dimension> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::dimension>().string)>("string");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::dimension& obj, [[maybe_unused]] FN&& fn){
  fn(obj.string, "string");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::dimension& obj, [[maybe_unused]] FN&& fn){
  fn(obj.string, "string");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::dimension>() { return "copper_server::base_objects::parsers::dimension"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::dimension>() { return 1; }
template<>struct enum_data<copper_server::base_objects::parsers::gamemode> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::gamemode>;
static constexpr inline std::array<item, 4> values = {item{"survival", copper_server::base_objects::parsers::gamemode::survival}, item{"creative", copper_server::base_objects::parsers::gamemode::creative}, item{"adventure", copper_server::base_objects::parsers::gamemode::adventure}, item{"spectator", copper_server::base_objects::parsers::gamemode::spectator}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::gamemode>() { return "copper_server::base_objects::parsers::gamemode"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ticks);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ticks);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::time> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::time>().ticks)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::time> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::time>().ticks)>("ticks");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ticks, "ticks");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::time& obj, [[maybe_unused]] FN&& fn){
  fn(obj.ticks, "ticks");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::time>() { return "copper_server::base_objects::parsers::time"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::time>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::resource_or_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::resource_or_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::resource_or_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_or_tag>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::resource_or_tag> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_or_tag>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::resource_or_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::resource_or_tag& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::resource_or_tag>() { return "copper_server::base_objects::parsers::resource_or_tag"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::resource_or_tag>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::resource_or_tag_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::resource_or_tag_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::resource_or_tag_key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_or_tag_key>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::resource_or_tag_key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_or_tag_key>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::resource_or_tag_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::resource_or_tag_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::resource_or_tag_key>() { return "copper_server::base_objects::parsers::resource_or_tag_key"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::resource_or_tag_key>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::resource& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::resource& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::resource> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::resource> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::resource& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::resource& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::resource>() { return "copper_server::base_objects::parsers::resource"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::resource>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::resource_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::resource_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::resource_key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_key>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::resource_key> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_key>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::resource_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::resource_key& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::resource_key>() { return "copper_server::base_objects::parsers::resource_key"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::resource_key>() { return 1; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::resource_selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::resource_selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::resource_selector> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_selector>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::resource_selector> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::resource_selector>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::resource_selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::resource_selector& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::resource_selector>() { return "copper_server::base_objects::parsers::resource_selector"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::resource_selector>() { return 1; }
template<>struct enum_data<copper_server::base_objects::parsers::template_mirror> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::template_mirror>;
static constexpr inline std::array<item, 3> values = {item{"none", copper_server::base_objects::parsers::template_mirror::none}, item{"front_back", copper_server::base_objects::parsers::template_mirror::front_back}, item{"left_right", copper_server::base_objects::parsers::template_mirror::left_right}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::template_mirror>() { return "copper_server::base_objects::parsers::template_mirror"; }
template<>struct enum_data<copper_server::base_objects::parsers::template_rotation> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::template_rotation>;
static constexpr inline std::array<item, 4> values = {item{"none", copper_server::base_objects::parsers::template_rotation::none}, item{"clockwise_90", copper_server::base_objects::parsers::template_rotation::clockwise_90}, item{"counterclockwise_90", copper_server::base_objects::parsers::template_rotation::counterclockwise_90}, item{"_180", copper_server::base_objects::parsers::template_rotation::_180}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::template_rotation>() { return "copper_server::base_objects::parsers::template_rotation"; }
template<>struct enum_data<copper_server::base_objects::parsers::heightmap> {using item = std::pair<std::string_view, copper_server::base_objects::parsers::heightmap>;
static constexpr inline std::array<item, 4> values = {item{"world_surface", copper_server::base_objects::parsers::heightmap::world_surface}, item{"motion_blocking", copper_server::base_objects::parsers::heightmap::motion_blocking}, item{"motion_blocking_no_leaves", copper_server::base_objects::parsers::heightmap::motion_blocking_no_leaves}, item{"ocean_floor", copper_server::base_objects::parsers::heightmap::ocean_floor}};};
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::heightmap>() { return "copper_server::base_objects::parsers::heightmap"; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::loot_table& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::loot_table& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::loot_table> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::loot_table> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::loot_table& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::loot_table& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::loot_table>() { return "copper_server::base_objects::parsers::loot_table"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::loot_table>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::loot_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::loot_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::loot_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::loot_predicate> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::loot_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::loot_predicate& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::loot_predicate>() { return "copper_server::base_objects::parsers::loot_predicate"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::loot_predicate>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::loot_modifier& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::loot_modifier& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::loot_modifier> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::loot_modifier> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::loot_modifier& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::loot_modifier& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::loot_modifier>() { return "copper_server::base_objects::parsers::loot_modifier"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::loot_modifier>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::dialog& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::dialog& obj, [[maybe_unused]] FN&& fn){
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::dialog> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::dialog& obj, [[maybe_unused]] FN&& fn){
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::dialog& obj, [[maybe_unused]] FN&& fn){
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::dialog>() { return "copper_server::base_objects::parsers::dialog"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::dialog>() { return 0; }
template<class FN>constexpr void for_each_field([[maybe_unused]] copper_server::base_objects::parsers::uuid& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<class FN>constexpr void for_each_field([[maybe_unused]] const copper_server::base_objects::parsers::uuid& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value);
}
template<>struct for_each_type_s<copper_server::base_objects::parsers::uuid> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::uuid>().value)>();
}
};
template<>struct for_each_type_with_name_s<copper_server::base_objects::parsers::uuid> {
template<class FN>static constexpr void each([[maybe_unused]] FN&& fn){
  fn.template operator()<decltype(std::declval<copper_server::base_objects::parsers::uuid>().value)>("value");
}
};
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] copper_server::base_objects::parsers::uuid& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<class FN>constexpr void for_each_field_with_name([[maybe_unused]] const copper_server::base_objects::parsers::uuid& obj, [[maybe_unused]] FN&& fn){
  fn(obj.value, "value");
}
template<>consteval std::string_view type_name<copper_server::base_objects::parsers::uuid>() { return "copper_server::base_objects::parsers::uuid"; }
template<>consteval size_t fields_count<copper_server::base_objects::parsers::uuid>() { return 1; }
}
